--[[
 _______           _______  _______  _______  _______  _______ 
(  ____ \|\     /|(  ____ \(  ____ \(  ____ )(  ___  )(  ____ \
| (    \/( \   / )| (    \/| (    \/| (    )|| (   ) || (    \/
| (__     \ (_) / | |      | (__    | (____)|| |   | || (_____ 
|  __)     ) _ (  | |      |  __)   |     __)| |   | |(_____  )
| (       / ( ) \ | |      | (      | (\ (   | |   | |      ) |
| (____/\( /   \ )| (____/\| (____/\| ) \ \__| (___) |/\____) |
(_______/|/     \|(_______/(_______/|/   \__/(_______)\_______) V2
                                                               
SCRIPT SOURCE
CURRENT VERSION: 1.0.1
]]
if not LPH_OBFUSCATED then
    LPH_JIT_MAX = function(...) return(...) end;
    LPH_NO_VIRTUALIZE = function(...) return(...) end;
end
-- Script Hub Initiating
local succ,err = pcall(function()
    if not isfolder("Exceros Hub") then
        makefolder("Exceros Hub")
    end
end)
if not succ then
    game:GetService('Players').LocalPlayer:Kick("Error occured with folder creation, send this to Exceros Hub maintainers [CODE 0XA1]")
end

-- LPH Macro's
if not LPH_OBFUSCATED then
    LPH_JIT_MAX = function(...) return(...) end;
    LPH_NO_VIRTUALIZE = function(...) return(...) end;
end
--
-- Game's
local Games = { -- ( Game Id's )
    ["Saisei"] = 3341967115, 
    ["Michaels Zombies"] = 3104101863,
    ["Booga Booga Reborn"] = 4154513353,
    ["Project Lazarus"] = 169302362,
    ["Adventure Story"] = 461037015,
    ["Steal Time From Others"] = 3737753748,
    ["Super League Soccer"] = 4293374620,
    ["NST Remastered"] = 4793958015,
    ["Peroxide"] = 3419284255,
}

-- Game Check
local GameToLoad = nil
if game.GameId and typeof(game.GameId) == "number" then -- [[ Loop's and checks games and find's if supported ]]
    for name,id in pairs(Games) do
        if game.GameId == id then
            GameToLoad = name
            break
        end
    end
end

if GameToLoad == nil then -- [[ If game is not found (game.GameId == id) then kick and stop script ]]
    game:GetService("Players").LocalPlayer:Kick("Game unsupported, if this game is supported and you are kicked please message maintainers of Exceros Hub [CODE 0XA2]")
    return
end

if not game:IsLoaded() then -- [[ Yield's until game is loaded. ]]
    game.Loaded:Wait()
end

-- Script Loader
local s, e = pcall(function() -- [[ pcall to fix 'attempt to index nil with value' error's ]]

if GameToLoad == "Saisei" then -- [[ Saisei Loader ]]
    local Interactables = workspace:WaitForChild("Interactables")

    local NotificationLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/Paupxx/Scripts/main/Notification%20Library.lua"))()
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()

    local Window = Library:CreateWindow({
        Title = "Exceros Hub || Saisei",
        Center = true,
        AutoShow = true,
        TabPadding = 8,
        MenuFadeTime = 0.2
    })

    -- tabs
    local Tabs = {
        Main = Window:AddTab('Main'),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }

    -- groupbox
    local CombatGroup = Tabs.Main:AddLeftGroupbox('Combat')
    local Teleportation = Tabs.Main:AddRightGroupbox('Teleports')
    local LocalGroupbox = Tabs.Main:AddLeftGroupbox("Local")
    local WorldGroup = Tabs.Main:AddRightGroupbox("World")
    local EspGroupBox = Tabs.Main:AddRightGroupbox("ESP")
    local SpectateGroupbox = Tabs.Main:AddRightGroupbox("Misc")
    local Discordbox = Tabs.Main:AddRightGroupbox("Discord")

    -- Services
    local Players = game:GetService('Players')
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Lighting = game:GetService("Lighting")
    local UserInputService = game:GetService("UserInputService")

    -- | Main Script | -- 
    local Player = Players.LocalPlayer
    local Connections = {}

    -- | Variables | --
    local KillAura = false
    local KillAuraRange = false
    local HBE = false
    local HBESize = 0
    local HBEVisible = false
    local FastAnimations = false
    local WalkSpeedToggled = false
    local WalkSpeedValue = 18
    local JumpPowerToggled = false
    local JumpPowerValue = 50
    local InfiniteJump = false
    local FullBright = false
    local ClimbBoost = 0
    local InfClimb = false
    local ChestEspToggle = false
    local AutoCollectChest = false
    local PlayerESPToggle = false
    local PlayerESPColor = Color3.fromRGB(148, 50, 205)
    local HealthESP = false
    local UseNoClip = false
    local UseSpectating = false
    local CurrentlySpectating = nil
    local InfStamina = false
    local InfBlood = false
    local InfPosture = false
    local AlwaysAttack = false
    local ModNotify = true

    Connections.MainLoop = RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        if HBE then
            for i,player in pairs(Players:GetPlayers()) do
                if player and player ~= Player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    player.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(HBESize,HBESize,HBESize)
                    if HBEVisible then
                        player.Character:FindFirstChild("HumanoidRootPart").Transparency = 0.4
                    else
                        player.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                    end
                end
            end
        end
        if Player.Character then
            local Humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid")
            if Humanoid then
                if FastAnimations then
                    for i,v in pairs(Humanoid:GetPlayingAnimationTracks()) do
                        v:AdjustSpeed(9e9)
                    end
                end
                if WalkSpeedToggled then
                    Humanoid.WalkSpeed = WalkSpeedValue
                end
                if JumpPowerToggled then
                    Humanoid.UseJumpPower = true
                    Humanoid.JumpPower = JumpPowerValue
                end
            end -- end of hum check
        end -- end of char check
        if InfClimb then
            local CanClimb = ReplicatedStorage:FindFirstChild("CanClimb") 
            if CanClimb and CanClimb.Value == false then
                CanClimb.Value = true
            end
        end
        if FullBright then
            Lighting.Brightness = 2
            Lighting.ClockTime = 14
            Lighting.FogEnd = 100000
            Lighting.FogStart = 100000
            Lighting.GlobalShadows = false
            Lighting.OutdoorAmbient = Color3.fromRGB(128,128,128)
            pcall(function()
                for i,v in pairs(Lighting:GetChildren()) do
                    if v.Enabled then v.Enabled = false end
                end
            end)
        end
        if InfStamina then
            Player.Backpack.Stamina.Value = 100
        end
        if InfPosture then
            Player.Backpack.Posture.Value = 0
        end
        if InfBlood then
            Player.Backpack.Blood.Value = 0
        end
        if AlwaysAttack then
            Player.Backpack.PlayerCantAttack.Value = false
            ReplicatedStorage.Attacking.Value = false
        end
    end))

    -- | Toggles etc | --

    local function GetPlayersInRange(Range)
        local InRange = {}
        for i,v in pairs(Players:GetPlayers()) do
            if v and v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health ~= 0 then
                local Distance = (Player.Character.HumanoidRootPart.Position-v.Character.HumanoidRootPart.Position).Magnitude
                if Distance <= Range then
                    table.insert(InRange, v.Character)
                end
            end
        end
        return InRange
    end

    local getDamageRemote; getDamageRemote = hookmetamethod(game, "__namecall", LPH_NO_VIRTUALIZE(function(self, ...)
        if not checkcaller() and typeof(self) == "Instance" and KillAura then
            if (getnamecallmethod() == "fireServer" or getnamecallmethod() == "FireServer") then
                local Args = {...}
                if Args[1] == "Hit" and typeof(Args[2]) == "table" then
                    Args[2] = GetPlayersInRange(tonumber(KillAuraRange))
                    return self.FireServer(self, table.unpack(Args))
                end
            end
        end
        return getDamageRemote(self,...)
    end))

    CombatGroup:AddToggle('Kill-Aura', {
        Text = 'Kill-Aura',
        Default = false,
        Tooltip = 'allows u to hit anyone near u', 
        Callback = function(Value)
            KillAura = Value
        end
    })

    CombatGroup:AddSlider('Kill-Aura Range', {
        Text = 'Kill-Aura Range',
        Default = 1,
        Min = 0,
        Max = 20,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            KillAuraRange = Value
        end
    })--]]

    CombatGroup:AddDivider()

    CombatGroup:AddToggle('Hitbox Expander', {
        Text = 'Hitbox Expander',
        Default = false,
        Tooltip = 'expands other players hitboxs', 
        Callback = function(Value)
            HBE = Value
        end
    })

    CombatGroup:AddSlider('Hitbox Expander Size', {
        Text = 'Hitbox Expander',
        Default = 0,
        Min = 0,
        Max = 12,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            HBESize = Value
        end
    })

    CombatGroup:AddToggle('Hitbox Expander Visible', {
        Text = 'Hitbox Expander Visible',
        Default = false,
        Tooltip = 'visible other people hrp', 
        Callback = function(Value)
            HBEVisible = Value
        end
    })

    CombatGroup:AddDivider()

    CombatGroup:AddToggle('Fast Animations', {
        Text = 'Fast Animations',
        Default = false,
        Tooltip = 'makes anims super fast that it does so much damage OL', 
        Callback = function(Value)
            FastAnimations = Value
        end
    })

    CombatGroup:AddToggle('Infinite Stamina', {
        Text = 'Infinite Stamina',
        Default = false,
        Tooltip = 'infinite stamina', 
        Callback = function(Value)
            InfStamina = Value
        end
    })

    CombatGroup:AddToggle('Infinite Posture', {
        Text = 'Infinite Posture',
        Default = false,
        Tooltip = 'infinite Posture', 
        Callback = function(Value)
            InfPosture = Value
        end
    })

    CombatGroup:AddToggle('Infinite Blood', {
        Text = 'Infinite Blood',
        Default = false,
        Tooltip = 'infinite Blood', 
        Callback = function(Value)
            InfBlood = Value
        end
    })

    CombatGroup:AddToggle('No Attack Stun', {
        Text = 'No Attack Stun',
        Default = false,
        Tooltip = 'no attack stun', 
        Callback = function(Value)
            AlwaysAttack = Value
        end
    })


    -- local player section

    LocalGroupbox:AddToggle('Walk Speed', {
        Text = 'Walk Speed',
        Default = false,
        Tooltip = 'Modifies your walkspeed', 
        Callback = function(Value)
            WalkSpeedToggled = Value
        end
    })

    LocalGroupbox:AddSlider('Walk Speed Value', {
        Text = 'Walk Speed Value',
        Default = 18,
        Min = 18,
        Max = 200,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            WalkSpeedValue = Value
        end
    })

    LocalGroupbox:AddToggle('Jump Power', {
        Text = 'Jump Power',
        Default = false,
        Tooltip = 'Modifies your jump power', 
        Callback = function(Value)
            JumpPowerToggled = Value
        end
    })

    LocalGroupbox:AddSlider('Jump Power Value', {
        Text = 'Jump Power Value',
        Default = 50,
        Min = 50,
        Max = 500,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            JumpPowerValue = Value
        end
    })

    LocalGroupbox:AddToggle('Character Noclip', {
        Text = 'Character Noclip',
        Default = false,
        Tooltip = 'no collision wowzer', 
        Callback = function(Value)
            UseNoClip = Value
        end
    })


    LocalGroupbox:AddToggle('Infinite Jump', {
        Text = 'Infinite Jump',
        Default = false,
        Tooltip = 'jump infinite times', 
        Callback = function(Value)
            InfiniteJump = Value
        end
    })

    LocalGroupbox:AddSlider('Climb Boost', {
        Text = 'Climb Boost',
        Default = 0,
        Min = 0,
        Max = 250,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            ClimbBoost = Value
        end
    })

    LocalGroupbox:AddToggle('Infinite Climb', {
        Text = 'Infinite Climb',
        Default = false,
        Tooltip = 'infinite climb', 
        Callback = function(Value)
            InfClimb = Value
        end
    })

    -- world seciton
    WorldGroup:AddToggle('Full Bright', {
        Text = 'Full Bright',
        Default = false,
        Tooltip = 'Full Bright', 
        Callback = function(Value)
            FullBright = Value
        end
    })

    -- esp
    EspGroupBox:AddToggle('Chest ESP', {
        Text = 'Chest ESP',
        Default = false,
        Tooltip = 'shows silver/bronze chests lol', 
        Callback = function(Value)
            ChestEspToggle = Value
        end
    })

    EspGroupBox:AddToggle('Auto-Collect Chest', {
        Text = 'Auto-Collect Chest',
        Default = false,
        Tooltip = 'collects chests ye', 
        Callback = function(Value)
            AutoCollectChest = Value
        end
    })

    EspGroupBox:AddDivider()

    EspGroupBox:AddToggle('Player ESP', {
        Text = 'Player ESP',
        Default = false,
        Tooltip = 'shows player esp', 
        Callback = function(Value)
            PlayerESPToggle = Value
        end
    })

    EspGroupBox:AddToggle('Show Health', {
        Text = 'Show Health',
        Default = false,
        Tooltip = 'show health fr', 
        Callback = function(Value)
            HealthESP = Value
        end
    })

    EspGroupBox:AddLabel('Player ESP Color'):AddColorPicker('Player ESP Color', {
        Default = Color3.fromRGB(148, 50, 205), 
        Title = 'Choose Player ESP Color', 
        Transparency = nil,

        Callback = function(Value)
            PlayerESPColor = Value
        end
    })

    -- chest esp section
    local ChestESP = {}

    local function CompareVectorToCFrame(part1,part2)
        return math.floor((part1.Position-part2:GetModelCFrame().Position).Magnitude)
    end

    local function AddToTable(model)
        local Con1
        
        local totalModelData = {}
        
        local TextDrawing = Drawing.new("Text")
        TextDrawing.Size = 16
        TextDrawing.Visible = false
        TextDrawing.Outline = true
        TextDrawing.Center = true
        TextDrawing.Text = tostring(model)
        
        local Color = Color3.fromRGB(0,0,0)
        if tostring(model) == "Silver" then
            Color = Color3.fromRGB(99, 99, 99)
        elseif tostring(model) == "Bronze" then
            Color = Color3.fromRGB(205, 127, 50)
        elseif tostring(model) == "Gold" then
            Color = Color3.fromRGB(205, 171, 50)
        end
        
        TextDrawing.Color = Color
        
        totalModelData.Drawing = TextDrawing
        totalModelData.Model = model
        totalModelData.Name = tostring(model)
        table.insert(ChestESP, totalModelData)
        
        Con1 = model.AncestryChanged:Connect(function(old,new)
            if old == nil or new == nil then
                model:Destroy()
                Con1:Disconnect()
            end
        end)
    end

    RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        for i,v in pairs(ChestESP) do
            if v.Model ~= nil and v.Drawing ~= nil then
                --[[if v.Model:FindFirstChild("Item") then
                    local Item = v.Model.Item
                    if Item then
                        local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(Item.Position)
                        if OnScreen then
                            v.Drawing.Visible = true
                            v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                        else
                            v.Drawing.Visible = false
                        end
                        
                    end
                else--]]
                    if ChestEspToggle then
                        local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position)
                        if OnScreen then
                            v.Drawing.Text = v.Name .. " [" .. tostring(CompareVectorToCFrame(Player.Character.HumanoidRootPart, v.Model)) .. "m]" 
                            v.Drawing.Visible = true
                            v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                        else
                            v.Drawing.Visible = false
                        end
                        if v.Model:FindFirstChildOfClass("ClickDetector") and AutoCollectChest then
                            if (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude < 12 then
                                fireclickdetector(v.Model:FindFirstChildOfClass("ClickDetector"))
                            end
                        end
                    else
                        v.Drawing.Visible = false
                    --end
                end
            else
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(ChestESP, i)
            end
        end
    end))

    for i,v in pairs(Interactables:GetChildren()) do
        if tostring(v) == "Silver" or tostring(v) == "Bronze" or tostring(v) == "Gold" then
            AddToTable(v)
        end
    end
    Interactables.ChildAdded:Connect(function(child)
        if tostring(child) == "Silver" or tostring(child) == "Bronze" or tostring(child) == "Gold" then
            AddToTable(child)
        end
    end)
    Interactables.ChildRemoved:Connect(function(child)
        for i,v in pairs(ChestESP) do
            if v.Model == child then
                v.Model = nil
            end
        end
    end)

    -- player esp
    local PlayerESP = {}

    local function AddToTable2(model)
        local Con1
        
        local totalModelData = {}
        
        for i,v in pairs(PlayerESP) do
            if tostring(v.Name) == tostring(model) then
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(PlayerESP, i)
            end
        end
        
        local TextDrawing = Drawing.new("Text")
        TextDrawing.Size = 16
        TextDrawing.Visible = false
        TextDrawing.Outline = true
        TextDrawing.Center = true
        TextDrawing.Text = tostring(model)
        TextDrawing.Color = PlayerESPColor
        
        totalModelData.Drawing = TextDrawing
        totalModelData.Model = model
        totalModelData.Name = tostring(model)
        
        table.insert(PlayerESP, totalModelData)
    end

    RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        for i,v in pairs(PlayerESP) do
            if v.Model ~= nil and v.Drawing ~= nil then
                if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                    if OnScreen and PlayerESPToggle then
                        if HealthESP and v.Model:FindFirstChildOfClass("Humanoid") then
                            local healthString = tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").Health)) .. "/" .. tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").MaxHealth))
                            v.Drawing.Text = v.Name .. " [" .. tostring(CompareVectorToCFrame(Player.Character.HumanoidRootPart, v.Model)) .. "m]" .. " [" .. healthString .. "]"                         
                        else
                            v.Drawing.Text = v.Name .. " [" .. tostring(CompareVectorToCFrame(Player.Character.HumanoidRootPart, v.Model)) .. "m]"                         
                        end
                        v.Drawing.Color = PlayerESPColor
                        v.Drawing.Visible = true
                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                    else
                        v.Drawing.Visible = false
                    end
                else
                    v.Drawing.Visible = false
                end
            else
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(ChestESP, i)
            end
        end
    end))

    for i,v in pairs(Players:GetPlayers()) do
        if v ~= Player then
            if v.Character then
                AddToTable2(v.Character)
            end
            v.CharacterAdded:Connect(function(char)
                AddToTable2(char)
            end)
        end
    end
    Players.PlayerAdded:Connect(function(p)
        p.CharacterAdded:Connect(function(char)
            AddToTable2(char)
        end)
    end)
    Players.PlayerRemoving:Connect(function(p)
        for i,v in pairs(PlayerESP) do
            if tostring(v.Name) == tostring(p) then
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(PlayerESP, i)
            end
        end
    end)

    -- noclip
    local SavedBaseInstances = {}
    Connections.NoclipLoop = RunService.Stepped:Connect(function()
        if Player.Character and UseNoClip then
            for i,v in pairs(Player.Character:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide == true then
                    if not SavedBaseInstances[v] then
                        SavedBaseInstances[v] = v
                    end
                    v.CanCollide = false
                end
            end
        else
            if Player.Character then
                for i,v in pairs(Player.Character:GetDescendants()) do
                    if SavedBaseInstances[v] then
                        SavedBaseInstances[v].CanCollide = true
                        table.remove(SavedBaseInstances, table.find(SavedBaseInstances, v))
                    end
                end
            end
        end
    end)
    -- infintue jump
    local infJump
    local infJumpDebounce = false
    infJump = UserInputService.JumpRequest:Connect(function()
        if not infJumpDebounce and InfiniteJump then
            infJumpDebounce = true
            Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            task.wait()
            infJumpDebounce = false
        end
    end)

    -- teleport area

    local Areas = workspace:WaitForChild("Areas", 20)
    local Final = {}
    local TeleportSpots = {}
    for i,v in pairs(Areas:GetChildren()) do
        if not table.find(Final, tostring(v.Area.Value)) then
            table.insert(Final, tostring(v.Area.Value))
        end
        if not TeleportSpots[tostring(v.Area.Value)] and not table.find(TeleportSpots, tostring(v.Area.Value)) then 
            TeleportSpots[tostring(v.Area.Value)] = v.Position
        end
    end
    local LastTp = Final[1]
    local SetValueOfIndex = false

    Teleportation:AddDropdown('Teleport To Area', {
        Values = Final,
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected

        Text = 'Teleport To Area',
        Tooltip = 'teleports u to area wow', -- Information shown when you hover over the dropdown

        Callback = function(Value)
            if not SetValueOfIndex then
                if LastTp ~= TeleportSpots[tostring(Value)] then
                    Player.Character.HumanoidRootPart.CFrame = CFrame.new(TeleportSpots[tostring(Value)])
                    LastTp = TeleportSpots[tostring(Value)]
                end
            else
                task.delay(1, function() SetValueOfIndex = false end)
            end
        end
    })

    Connections.AreaChildAdded = Areas.ChildAdded:Connect(function(child)
        if child:WaitForChild("Area") then
            if not table.find(Final, tostring(child.Area.Value)) then
                table.insert(Final, tostring(child.Area.Value))
            end
            if not TeleportSpots[tostring(child.Area.Value)] and not table.find(TeleportSpots, tostring(child.Area.Value)) then 
                TeleportSpots[tostring(child.Area.Value)] = child.Position
            end
            SetValueOfIndex = true
            Options["Teleport To Area"]:SetValue(Final)
        end
    end)

    Connections.AreaChildRemoved = Areas.ChildRemoved:Connect(function(child)
        if child:FindFirstChild("Area") then
            if TeleportSpots[tostring(child.Area.Value)] or table.find(TeleportSpots, tostring(child.Area.Value)) then
                table.remove(TeleportSpots, table.find(TeleportSpots, tostring(child.Area.Value)))
                TeleportSpots[tostring(child.Area.Value)] = nil
            end
            if Final[tostring(child.Area.Value)] or table.find(Final, tostring(child.Area.Value)) then
                table.remove(Final, table.find(Final, tostring(child.Area.Value)))
                Final[tostring(child.Area.Value)] = nil
            end
            SetValueOfIndex = true
            Options["Teleport To Area"]:SetValue(Final)
        end
    end)

    -- climb/dash boost
    local Hooking = false

    local climbBoostHook; climbBoostHook = hookmetamethod(game, "__newindex", LPH_NO_VIRTUALIZE(function(s,k,v)
        if not checkcaller() and typeof(s) == "Instance" and not Hooking and ClimbBoost > 0 then
            if tostring(k) == "Velocity" and s:IsA("BodyVelocity") and (v and type(v) == "vector" and v.Y and v.Y>=30) then
                Hooking = true
                s.Velocity = Vector3.new(0,ClimbBoost,0)
                Hooking = false
                return
            end
        end
        return climbBoostHook(s,k,v)
    end))

    -- specatae
    local PlayersInGame = {}
    local SettingState = false

    for i,v in pairs(Players:GetPlayers()) do
        table.insert(PlayersInGame, tostring(v))
    end
    Players.PlayerAdded:Connect(function(v)
        table.insert(PlayersInGame, tostring(v))
        SettingState = true
        Options["Spectate Player"]:SetValue(PlayersInGame)
        task.delay(0.5, function()
            SettingState = false
        end)
    end)
    Players.PlayerRemoving:Connect(function(player)
        if table.find(PlayersInGame, tostring(player)) then
            table.remove(PlayersInGame, table.find(PlayersInGame, tostring(player)))
            SettingState = true
            Options["Spectate Player"]:SetValue(PlayersInGame)
            task.delay(0.5, function()
                SettingState = false
            end)
        end
    end)

    SpectateGroupbox:AddToggle('Spectate Player Toggle', {
        Text = 'Spectate Player Toggle',
        Default = false,
        Tooltip = 'enable spectating', 
        Callback = function(Value)
            UseSpectating = Value
            if not UseSpectating then
                workspace.CurrentCamera.CameraSubject = Player.Character:FindFirstChildOfClass("Humanoid")
            end
        end
    })

    SpectateGroupbox:AddDropdown('Spectate Player', {
        Values = PlayersInGame,
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected

        Text = 'Spectate Player',
        Tooltip = 'spectate player seelctor', -- Information shown when you hover over the dropdown

        Callback = function(Value)
            if UseSpectating and not SettingState then
                local foundPlayer = Players[tostring(Value)]
                if foundPlayer then
                    local char = foundPlayer.Character
                    if char then
                        local humanoid = char:WaitForChild("Humanoid")
                        if humanoid then
                            workspace.CurrentCamera.CameraSubject = humanoid
                        end
                    end
                end
            end
        end
    })

    -- auto take all chests
    local ClickedCFrame = nil
    local Names = {
        "Gold",
        "Bronze",
        "Silver",
    }
    SpectateGroupbox:AddButton({
        Text = 'Collect All Chests',
        Func = function()
            if Player.Character and Player.Character.HumanoidRootPart then
                ClickedCFrame = Player.Character.HumanoidRootPart.CFrame
            end
            local FoundChests = {}
            for i,v in pairs(Interactables:GetChildren()) do
                if table.find(Names, tostring(v)) and v then
                    table.insert(FoundChests, v)
                end
            end
            repeat task.wait(0.5)
                if FoundChests[1] then
                    local firstchest = FoundChests[1]
                    Player.Character.HumanoidRootPart.CFrame = firstchest:GetModelCFrame()
                    if firstchest:FindFirstChildOfClass("ClickDetector") then
                        fireclickdetector(firstchest:FindFirstChildOfClass("ClickDetector"), 12)
                        table.remove(FoundChests, 1)
                    end
                end
            until #FoundChests == 0
            Player.Character.HumanoidRootPart.CFrame = ClickedCFrame
            ClickedCFrame = nil
        end,
        DoubleClick = false,
        Tooltip = 'collects all chests'
    })

    Discordbox:AddButton({
        Text = "Copy Discord Link",
        Func = function()
            if setclipboard then
                setclipboard(tostring('https://discord.gg/2BtXmsaXwT'))
            end
        end,
        DoubleClick = false,
        Tooltip = "join discord for help wow",
    })

    Discordbox:AddLabel('https://discord.gg/2BtXmsaXwT')

    SpectateGroupbox:AddToggle('Mod Notifier', {
        Text = 'Mod Notifier',
        Default = true,
        Tooltip = 'mod notifiert', 
        Callback = function(Value)
            ModNotify = Value
        end
    })

    local Mods = {
        119859927, -- cindersouls
        157219694, -- xx dive
        3612304180, -- unemployed messiah
        51362470, -- willowvis
        706454089, -- bobby mcstew
        145513929, -- swamppilled
        90554915, -- the soggy and whatever
        308568750, -- killicus
        113204352, -- i hate pink 200
        80455824, -- scronkly
    }

    Players.PlayerAdded:Connect(function(plr)
        if table.find(Mods, plr.UserId) and ModNotify then
            NotificationLibrary.AddNotification({
                Text = "A moderator is in your server! [" .. tostring(plr) .. "]",
                TimeColor = Color3.fromRGB(173, 150, 222),
                Timer = 999,
                AllowMouseClick = true,
            })
        end
    end)
    Players.PlayerRemoving:Connect(function(plr)
        if table.find(Mods, plr.UserId) and ModNotify then
            NotificationLibrary.AddNotification({
                Text = "A moderator has left your server! [" .. tostring(plr) .. "]",
                TimeColor = Color3.fromRGB(173, 150, 222),
                Timer = 25,
                AllowMouseClick = true,
            })
        end
    end)
    for i,plr in pairs(Players:GetPlayers()) do
        if table.find(Mods, plr.UserId) and ModNotify then
            NotificationLibrary.AddNotification({
                Text = "A moderator is in your server! [" .. tostring(plr) .. "]",
                TimeColor = Color3.fromRGB(173, 150, 222),
                Timer = 999,
                AllowMouseClick = true,
            })
        end
    end

    Library.KeybindFrame.Visible = false; -- todo: add a function for this

    Library:OnUnload(function()
        for i,v in pairs(Connections) do v:Disconnect() end
        Library.Unloaded = true
    end)

    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'RightControl', NoUI = true, Text = 'Menu keybind' })

    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('Exceros Hub')
    SaveManager:SetFolder('Exceros Hub/Saisei')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
end
if GameToLoad == "Michaels Zombies" then -- [[ Michaels Zombies Loader ]]
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
    
    local Window = Library:CreateWindow({
        Title = "Exceros Hub || Michaels Zombies",
        Center = true,
        AutoShow = true,
        TabPadding = 8,
        MenuFadeTime = 0.2
    })
    
    local Tabs = {
        Main = Window:AddTab('Main'),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }
    
    -- Services
    local Players = game:GetService('Players')
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Lighting = game:GetService("Lighting")
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    
    local Player = Players.LocalPlayer
    local Camera = workspace.CurrentCamera
    
    -- Connections
    local Connections = {}
    local Hooks = {}
    local Original_Values = {}
    
    -- groupboxes
    local GunMods = Tabs.Main:AddLeftGroupbox('Gun Modifiers')
    local LocalSection = Tabs.Main:AddRightGroupbox('Local')
    local AutoFarm = Tabs.Main:AddRightGroupbox("Autofarm")
    local ESPSection = Tabs.Main:AddRightGroupbox("ESP")
    local AimbotSection = Tabs.Main:AddRightGroupbox("Aimbot")
    local SilentAimSection = Tabs.Main:AddLeftGroupbox("Silent Aim")
    
    -- variables
    local RPM = 0
    local Penetration = 0
    local BulletSpeed = 0
    local ReloadSpeed = 0
    local KnifeAura = false
    local AutoFarmOn = false
    local TweenSpeed = 0.5
    local PickupPowers = false 
    local ZombieESP = false
    local ZombieESPDistance = false
    local MysteryBoxESP = false
    local MysteryBoxDistance = false
    local PerkMachineESP = false
    local PerkMachineDistance = false
    local ZombieColor = Color3.fromRGB(23, 174, 212)
    local MysteryBoxColor = Color3.fromRGB(23, 174, 212)
    local PerkMachineColor = Color3.fromRGB(23, 174, 212)
    local AimbotToggle = false
    local AimbotSmoothing = 0
    local AimbotDistance = 0
    local AimbotPart = "Head"
    local VisibilityCheck = false
    local SilentAim = false
    local SilentAimFOVCircle = false 
    local SIlentAimFovColor = Color3.fromRGB(255,255,255)
    local SilentAimTarget = "Head"
    local SilentAimRadius = 100
    local SpoofHit = false
    local SpoofHitTarget = "Head"
    
    
    -- things
    GunMods:AddButton({
        Text = 'No Spread',
        Func = LPH_JIT_MAX(function()
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "SPREAD") then
                    local spread_table = rawget(v, "SPREAD")
                    if typeof(spread_table) == "table" then
                        if rawget(spread_table, "MAX") and rawget(spread_table, "MIN") then
                            rawset(spread_table, "MAX", 0)
                            rawset(spread_table, "DEFAULT", 0)
                            rawset(spread_table, "MIN", 0)
                        end
                    end
                end
            end
        end),
        DoubleClick = false,
        Tooltip = 'no spread for guns'
    })
    
    local HookedFunctions = {}
    
    GunMods:AddButton({
        Text = 'No Recoil',
        Func = LPH_JIT_MAX(function()
            for i,v in pairs(getgc(true)) do
                if type(v) == "table" and rawget(v, "CAMERA_RECOIL") then
                    if type(rawget(v, "CAMERA_RECOIL")) == "table" then
                        for i2,v2 in pairs(rawget(v, "CAMERA_RECOIL")) do
                            if type(v2) == "function" then
                                for i3,v3 in pairs(debug.getconstants(v2)) do
                                    if type(v3) == "number" then
                                        debug.setconstant(v2, i3, 0)
                                    end
                                end
                            end
                        end
                    end
                end
            end     
        end),
        DoubleClick = false,
        Tooltip = 'no recoil for guns'
    })
    
    GunMods:AddSlider('RPM Value', {
        Text = 'RPM Value',
        Default = 1,
        Min = 1,
        Max = 2000,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            RPM = Value
        end
    })
    
    GunMods:AddButton({
        Text = 'Set RPM',
        Func = LPH_JIT_MAX(function()
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "RPM") then
                    if typeof(rawget(v, "RPM")) == "number" then
                        rawset(v, "RPM", RPM)
                    end
                end
            end
        end),
        DoubleClick = false,
        Tooltip = 'modify rpm'
    })
    
    GunMods:AddSlider('Penetration Value', {
        Text = 'Penetration Value',
        Default = 1,
        Min = 1,
        Max = 5000,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            Penetration = Value
        end
    })
    
    GunMods:AddButton({
        Text = 'Set Penetration',
        Func = LPH_JIT_MAX(function()
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "PENETRATION") then
                    if typeof(rawget(v, "PENETRATION")) == "number" then
                        rawset(v, "PENETRATION", Penetration)
                    end
                end
            end
        end),
        DoubleClick = false,
        Tooltip = 'penetration'
    })
    
    GunMods:AddSlider('Bullet Speed Value', {
        Text = 'Bullet Speed Value',
        Default = 1,
        Min = 1,
        Max = 5000,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            BulletSpeed = Value
        end
    })
    
    GunMods:AddButton({
        Text = 'Set Bullet Speed',
        Func = LPH_JIT_MAX(function()
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "BULLET_SPEED") then
                    if typeof(rawget(v, "BULLET_SPEED")) == "number" then
                        rawset(v, "BULLET_SPEED", BulletSpeed)
                    end
                end
            end
        end),
        DoubleClick = false,
        Tooltip = 'penetration'
    })
    
    GunMods:AddDropdown('Gun Fire Type', {
        Values = {"SEMI", "AUTO"},
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Gun Fire Type',
        Tooltip = 'sets gun fire type', -- Information shown when you hover over the dropdown
    
        Callback = LPH_JIT_MAX(function(Value)
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "FIRE_TYPE") then
                    if typeof(rawget(v, "FIRE_TYPE")) == "string" then
                        rawset(v, "FIRE_TYPE", "AUTO")
                    end
                end
            end
        end)
    })
    
    GunMods:AddSlider('Reload Speed Value', {
        Text = 'Reload Speed Value',
        Default = 1,
        Min = 1,
        Max = 100,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            ReloadSpeed = Value
        end
    })
    
    GunMods:AddButton({
        Text = 'Set Reload Speed',
        Func = LPH_JIT_MAX(function()
            for i,v in pairs(getgc(true)) do
                if type(v) == "table" and rawget(v, "RELOAD_SPEED") then
                    if type(rawget(v, "RELOAD_SPEED")) == "number" then
                        rawset(v, "RELOAD_SPEED", ReloadSpeed)
                    end
                end
                if type(v) == "function" and debug.getinfo(v).name == "getReloadMultiplier" then
                    local Internal
                    Internal = hookfunction(v, function(...)
                        if not checkcaller() then
                            return ReloadSpeed
                        end
                        return Internal(...)
                    end)
                end
            end
        end),
        DoubleClick = false,
        Tooltip = 'reload speed'
    })
    
    -- local
    LocalSection:AddToggle('Knife Aura', {
        Text = 'Knife Aura',
        Default = false,
        Tooltip = 'knfie aura around u', 
        Callback = function(Value)
            KnifeAura = Value
        end
    })
    
    LocalSection:AddToggle('Auto Pickup Powerups', {
        Text = 'Auto Pickup Powerups',
        Default = false,
        Tooltip = 'pickup powers', 
        Callback = function(Value)
            PickupPowers = Value
        end
    })
    
    -- autofarm
    AutoFarm:AddToggle('Auto-Farm', {
        Text = 'Auto-Farm',
        Default = false,
        Tooltip = 'auto farm', 
        Callback = function(Value)
            AutoFarmOn = Value
        end
    })
    
    AutoFarm:AddSlider('Tween Speed', {
        Text = 'Tween Speed',
        Default = 0.5,
        Min = 0.5,
        Max = 2,
        Rounding = 3,
        Compact = false,
    
        Callback = function(Value)
            TweenSpeed = Value
        end
    })
    -- zombie esp
    ESPSection:AddToggle('Zombie ESP', {
        Text = 'Zombie ESP',
        Default = false,
        Tooltip = 'Zombie ESP', 
        Callback = function(Value)
            ZombieESP = Value
        end
    }):AddColorPicker('ESP Color', {
        Default = Color3.fromRGB(23, 174, 212), 
        Title = 'Zombie ESP Color', 
        Transparency = nil,
    
        Callback = function(Value)
            ZombieColor = Value
        end
    })
    
    ESPSection:AddToggle('Show Zombie Distance', {
        Text = 'Show Zombie Distance',
        Default = false,
        Tooltip = 'show distance from zobie', 
        Callback = function(Value)
            ZombieESPDistance = Value
        end
    })
    
    -- mystery box
    ESPSection:AddDivider()
    ESPSection:AddToggle('Mystery Box ESP', {
        Text = 'Mystery Box ESP',
        Default = false,
        Tooltip = 'Mystery Box ESP', 
        Callback = function(Value)
            MysteryBoxESP = Value
        end
    }):AddColorPicker('ESP Color', {
        Default = Color3.fromRGB(23, 174, 212), 
        Title = 'MysteryBox ESP Color', 
        Transparency = nil,
    
        Callback = function(Value)
            MysteryBoxColor = Value
        end
    })
    
    ESPSection:AddToggle('Show MysteryBox Distance', {
        Text = 'Show MysteryBox Distance',
        Default = false,
        Tooltip = 'mystery box distance', 
        Callback = function(Value)
            MysteryBoxDistance = Value
        end
    })
    -- perk machine
    ESPSection:AddDivider()
    ESPSection:AddToggle('Perk Machine ESP', {
        Text = 'Perk Machine ESP',
        Default = false,
        Tooltip = 'Perk Machine ESP', 
        Callback = function(Value)
            PerkMachineESP = Value
        end
    }):AddColorPicker('ESP Color', {
        Default = Color3.fromRGB(23, 174, 212), 
        Title = 'Perk Machine ESP Color', 
        Transparency = nil,
    
        Callback = function(Value)
            PerkMachineColor = Value
        end
    })
    
    ESPSection:AddToggle('Show Perk Machine Distance', {
        Text = 'Show Perk Machine Distance',
        Default = false,
        Tooltip = 'Show Perk Machine Distance', 
        Callback = function(Value)
            PerkMachineDistance = Value
        end
    })
    
    -- aimbot
    AimbotSection:AddToggle('Aimbot', {
        Text = 'Aimbot',
        Default = false,
        Tooltip = 'camera aimbot', 
        Callback = function(Value)
            AimbotToggle = Value
        end
    }):AddKeyPicker('Keybind', {
        Default = 'MB2', -- String as the name of the keybind (MB1, MB2 for mouse buttons)
        SyncToggleState = true,
    
        Mode = 'Toggle', -- Modes: Always, Toggle, Hold
    
        Text = 'Aimbot', -- Text to display in the keybind menu
        NoUI = false, -- Set to true if you want to hide from the Keybind menu,
    
        Callback = function(Value)
            AimbotToggle = Value
        end,
    })
    
    AimbotSection:AddToggle('Visibility Check', {
        Text = 'Visibility Check',
        Default = false,
        Tooltip = 'camera Visibility Check', 
        Callback = function(Value)
            VisibilityCheck = Value
        end
    })
    
    AimbotSection:AddSlider('Aimbot Distance', {
        Text = 'Aimbot Distance',
        Default = 0,
        Min = 0,
        Max = 1000,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            AimbotDistance = Value
        end
    })
    
    AimbotSection:AddSlider('Aimbot Smoothing', {
        Text = 'Aimbot Smoothing',
        Default = 0,
        Min = 0,
        Max = 1000,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            AimbotSmoothing = Value
        end
    })
    
    AimbotSection:AddDropdown('Aimbot Part', {
        Values = {
            "Head",
            "HumanoidRootPart",
        },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Aimbot Part',
        Tooltip = 'aimbot Part', -- Information shown when you hover over the dropdown
    
        Callback = function(Value)
            AimbotPart = tostring(Value)
        end
    })
    
    -- silent aim
    SilentAimSection:AddToggle('Spoof Hit', {
        Text = 'Spoof Hit',
        Default = false,
        Tooltip = 'Spoof Hit', 
        Callback = function(Value)
            SpoofHit = Value
        end
    })
    SilentAimSection:AddDropdown('Part', {
        Values = {
            "Head",
            "HumanoidRootPart",
            "Torso",
        },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Part',
        Tooltip = 'aimbot Part', -- Information shown when you hover over the dropdown
    
        Callback = function(Value)
            SpoofHitTarget = tostring(Value)
        end
    })
    
    --[[
    SilentAimSection:AddToggle('FOV Circle', {
        Text = 'FOV Circle',
        Default = false,
        Tooltip = 'FOV Circle', 
        Callback = function(Value)
            SilentAimFOVCircle = Value
        end
    }):AddColorPicker('Color', {
        Default = Color3.fromRGB(255,255,255), 
        Title = 'Color', 
        Transparency = nil,
    
        Callback = function(Value)
            SIlentAimFovColor = Value
        end
    })
    
    SilentAimSection:AddSlider('FOV Radius', {
        Text = 'FOV Radius',
        Default = 100,
        Min = 0,
        Max = 1000,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            SilentAimRadius = Value
        end
    })--]]
    
    local function getClosestZombie(d)
        local Zombies_Folder = workspace.Ignore.Zombies
        local Closest, maxDistance = nil, d
        if Zombies_Folder then
            for i,v in pairs(Zombies_Folder:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 then
                    local Distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-v.HumanoidRootPart.Position).Magnitude
                    if Distance < maxDistance then
                        maxDistance = Distance
                        Closest = v
                    end
                end
            end
        end
        return Closest, maxDistance
    end
    
    local function getClosestZombieToMouse()
        local Zombies_Folder = workspace.Ignore.Zombies
        local Closest
        local DistanceToMouse
        
        if Zombies_Folder then
            for i,v in pairs(Zombies_Folder:GetChildren()) do
                if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 then
                    local vector, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.HumanoidRootPart.Position)
                    if OnScreen then
                        local mousePos = UserInputService:GetMouseLocation()
                        local Distance = (mousePos-Vector2.new(vector.X, vector.Y)).Magnitude
                        if Distance <= (DistanceToMouse or SilentAimRadius or 2000) then
                            Closest = v
                            DistanceToMouse = Distance
                        end
                    end
                end
            end
        end
        return Closest, DistanceToMouse
    end
    
    local function isVisible(part)
        if part then
            local Ray = Ray.new(Camera.CFrame.Position, part.CFrame.Position-Camera.CFrame.Position)
            local CheckIfVisible = workspace:FindPartOnRayWithIgnoreList(Ray, {Camera, Player.Character})
            if CheckIfVisible and CheckIfVisible:IsDescendantOf(part.Parent) then
                return true
            else
                return false
            end
        end
    end
    
    local function getClosestPlayer(d)
        local Closest, maxDistance = nil, d
        if Player and Player.Character then
            for i,v in pairs(game:GetService("Players"):GetPlayers()) do
                if v and v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                    local Distance = (Player.Character.HumanoidRootPart.Position-v.Character.HumanoidRootPart.Position).Magnitude
                    if Distance < maxDistance then
                        maxDistance = Distance
                        Closest = v
                    end
                end
            end
        end
        return Closest, maxDistance
    end
    --[[
    local Circle_Drawn = nil
    Connections.SilentAimLoop = RunService.RenderStepped:Connect(function()
        if SilentAim then
            if SilentAimFOVCircle then
                if Circle_Drawn == nil then
                    Circle_Drawn = Drawing.new("Circle")
                end
                if Circle_Drawn then
                    Circle_Drawn.Transparency = 1
                    Circle_Drawn.Thickness = 1
                    Circle_Drawn.NumSides = 360
                    Circle_Drawn.Radius = SilentAimRadius
                    Circle_Drawn.Filled = false
                    Circle_Drawn.Color = SIlentAimFovColor
                    Circle_Drawn.Position = UserInputService:GetMouseLocation()
                end
            else
                if Circle_Drawn ~= nil then
                    Circle_Drawn:Remove()
                    Circle_Drawn = nil
                end
            end
        else
            if Circle_Drawn ~= nil then
                Circle_Drawn:Remove()
                Circle_Drawn = nil
            end
        end
    end)
    ]]
    Hooks.ClientHit = hookmetamethod(game, "__namecall", LPH_NO_VIRTUALIZE(function(self,...)
        if not checkcaller() and typeof(self) == "Instance" and SpoofHit then
            if (getnamecallmethod() == "fireServer" or getnamecallmethod() == "FireServer") then
                local Args = {...}
                if Args[1] and (Args[2] and typeof(Args[2]) == "string") and (Args[3] and typeof(Args[3]) == "number") then
                    local Hit_Part = Args[1]
                    Args[1] = Hit_Part.Parent[SpoofHitTarget]
                    return self.FireServer(self, table.unpack(Args))
                end
            end
        end
        return Hooks.ClientHit(self,...)
    end))
    
    -- Camera.CFrame = CFrame.new(Camera.CFrame.p, Target.CFrame.Position)
    -- zombie_esp
    
    local Zombies_ESP = {}
    
    local function AddToTable(model)
        local Con1
        
        local totalModelData = {}
        
        local TextDrawing = Drawing.new("Text")
        TextDrawing.Size = 16
        TextDrawing.Visible = false
        TextDrawing.Outline = true
        TextDrawing.Center = true
        TextDrawing.Text = tostring(model)
        TextDrawing.Color = Color3.fromRGB(23, 174, 212)
        
        totalModelData.Drawing = TextDrawing
        totalModelData.Model = model
        totalModelData.Name = tostring(model)
    
        table.insert(Zombies_ESP, totalModelData)
        
        Con1 = model.AncestryChanged:Connect(function(old,new)
            if old == nil or new == nil then
                Con1:Disconnect()
            end
        end)
    end
    
    Connections.Zombie_ESPLoop = RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        for i,v in pairs(Zombies_ESP) do
            if v.Model ~= nil and v.Drawing ~= nil then
                if ZombieESP and v.Model:FindFirstChild("HumanoidRootPart") then
                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model.HumanoidRootPart.Position + Vector3.new(0, 2, 0))
                    if OnScreen then
                        if ZombieESPDistance then
                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.HumanoidRootPart.Position).Magnitude)) .. "m]"
                        else 
                            v.Drawing.Text = v.Name
                        end
                        v.Drawing.Visible = true
                        v.Drawing.Color = ZombieColor
                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                    else
                        v.Drawing.Visible = false
                    end
                else
                    v.Drawing.Visible = false
                end
            else
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(Zombies_ESP, i)
            end
        end
    end))
    
    task.spawn(function()
        for i,v in pairs(workspace:WaitForChild("Ignore"):WaitForChild("Zombies"):GetChildren()) do
            AddToTable(v)
        end
        workspace:WaitForChild("Ignore"):WaitForChild("Zombies").ChildAdded:Connect(function(child)
            AddToTable(child)
        end)
        workspace:WaitForChild("Ignore"):WaitForChild("Zombies").ChildRemoved:Connect(function(child)
            for i,v in pairs(Zombies_ESP) do
                if v.Model == child then
                    v.Model = nil
                end
            end
        end)
    end)
    
    -- mystery box and map components
    
    local MysteryBox = {}
    
    local function AddToTable2(model)
        local Con1
        
        local totalModelData = {}
        
        local TextDrawing = Drawing.new("Text")
        TextDrawing.Size = 16
        TextDrawing.Visible = false
        TextDrawing.Outline = true
        TextDrawing.Center = true
        TextDrawing.Text = tostring(model)
        TextDrawing.Color = Color3.fromRGB(23, 174, 212)
        
        totalModelData.Drawing = TextDrawing
        totalModelData.Model = model
        totalModelData.Name = tostring(model)
    
        table.insert(MysteryBox, totalModelData)
        
        Con1 = model.AncestryChanged:Connect(function(old,new)
            if old == nil or new == nil then
                Con1:Disconnect()
            end
        end)
    end
    
    Connections.MapComponents = RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        for i,v in pairs(MysteryBox) do
            if v.Model ~= nil and v.Drawing ~= nil then
                if MysteryBoxESP then
                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model.HumanoidRootPart.Position + Vector3.new(0, 4, 0))
                    if OnScreen then
                        if MysteryBoxDistance then
                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.HumanoidRootPart.Position).Magnitude)) .. "m]"
                        else 
                            v.Drawing.Text = v.Name
                        end
                        v.Drawing.Visible = true
                        v.Drawing.Color = MysteryBoxColor
                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                    else
                        v.Drawing.Visible = false
                    end
                else
                    v.Drawing.Visible = false
                end
            else
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(MysteryBox, i)
            end
        end
    end))
    
    task.spawn(function()
        for i,v in pairs(workspace:WaitForChild("_MapComponents"):GetChildren()) do
            if tostring(v) == "MysteryBox" then
                AddToTable2(v)
            end
        end
        workspace:WaitForChild("_MapComponents").ChildAdded:Connect(function(child)
            if tostring(child) == "MysteryBox" then
                AddToTable2(child)
            end
        end)
        workspace:WaitForChild("_MapComponents").ChildRemoved:Connect(function(child)
            for i,v in pairs(MysteryBox) do
                if v.Model == child then
                    v.Model = nil
                end
            end
        end)
    end)
    -- perk machines
    local PerkMachines = {}
    
    local function AddToTable3(model)
        local Con1
        
        local totalModelData = {}
        
        local TextDrawing = Drawing.new("Text")
        TextDrawing.Size = 16
        TextDrawing.Visible = false
        TextDrawing.Outline = true
        TextDrawing.Center = true
        TextDrawing.Text = tostring(model)
        TextDrawing.Color = Color3.fromRGB(23, 174, 212)
        
        totalModelData.Drawing = TextDrawing
        totalModelData.Model = model
        totalModelData.Name = tostring(model)
    
        table.insert(PerkMachines, totalModelData)
        
        Con1 = model.AncestryChanged:Connect(function(old,new)
            if old == nil or new == nil then
                Con1:Disconnect()
            end
        end)
    end
    
    Connections.MapComponents = RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        for i,v in pairs(PerkMachines) do
            if v.Model ~= nil and v.Drawing ~= nil then
                if PerkMachineESP then
                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model.PurchasePerk.Position + Vector3.new(0, 2, 0))
                    if OnScreen then
                        if PerkMachineDistance then
                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PurchasePerk.Position).Magnitude)) .. "m]"
                        else 
                            v.Drawing.Text = v.Name
                        end
                        v.Drawing.Visible = true
                        v.Drawing.Color = PerkMachineColor
                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                    else
                        v.Drawing.Visible = false
                    end
                else
                    v.Drawing.Visible = false
                end
            else
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(PerkMachines, i)
            end
        end
    end))


    task.spawn(function()
        for i,v in pairs(workspace:WaitForChild("_PerkMachines"):GetChildren()) do
            if v:IsA("Model") then
                AddToTable3(v)
            end
        end
        workspace:WaitForChild("_PerkMachines").ChildAdded:Connect(function(child)
            if child:IsA("Model") then
                AddToTable3(child)
            end
        end)
        workspace:WaitForChild("_PerkMachines").ChildRemoved:Connect(function(child)
            for i,v in pairs(PerkMachines) do
                if v.Model == child then
                    v.Model = nil
                end
            end
        end)
    end)
    local TweeningInProgress = false
    local tween__ = nil
    
    Connections.MainLoop = RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        if Player and Player.Character then
            if KnifeAura then
                local c_zombie = getClosestZombie(12)
                if c_zombie then
                    game:GetService("ReplicatedStorage").Framework.Remotes.KnifeHitbox:FireServer(c_zombie)
                end
            end
            if AutoFarmOn then
                local c_zombie, dist = getClosestZombie(1000)
                if c_zombie then
                    if dist > 7 then
                        if not TweeningInProgress and tween__ == nil then
                            tween__ = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(TweenSpeed), {CFrame = c_zombie.HumanoidRootPart.CFrame + Vector3.new(0, 4, 0)})
                            tween__:Play()
                            local c; c = tween__.Completed:Connect(function() TweeningInProgress = false c:Disconnect() tween__ = nil end)
                        end
                    else
                        if tween__ then
                            tween__:Cancel()
                            tween__ = nil
                        end
                        Player.Character.HumanoidRootPart.CFrame = c_zombie.HumanoidRootPart.CFrame + Vector3.new(0, 4, 0)
                    end
                end
            end
            if PickupPowers then
                for i,v in pairs(workspace.Ignore._Powerups:GetChildren()) do
                    if v:IsA('BasePart') then
                        firetouchinterest(v, Player.Character.HumanoidRootPart, 0)
                        firetouchinterest(v, Player.Character.HumanoidRootPart, 1)
                    end
                end
            end
            if AimbotToggle then
                local ClosestZombie, Distance = getClosestZombie(AimbotDistance)
                if ClosestZombie and ClosestZombie:FindFirstChild(AimbotPart) then
                    local TargetPart = ClosestZombie:FindFirstChild(AimbotPart)
                    if TargetPart then
                        if VisibilityCheck then
                            local is_vis = isVisible(TargetPart)
                            if is_vis then
                                TweenService:Create(Camera, TweenInfo.new(Distance/AimbotSmoothing), {CFrame = CFrame.new(Camera.CFrame.Position, TargetPart.CFrame.Position)}):Play()
                            end
                        else
                            TweenService:Create(Camera, TweenInfo.new(Distance/AimbotSmoothing), {CFrame = CFrame.new(Camera.CFrame.Position, TargetPart.CFrame.Position)}):Play()
                        end
                    end
                end
            end
        end -- end of char check
    end))
    
    -- make autofarm
    
    Library.KeybindFrame.Visible = true; -- todo: add a function for this
    
    Library:OnUnload(function()
        for i,v in pairs(Connections) do v:Disconnect() end
        for i,v in pairs(Zombies_ESP) do if v.Drawing then v.Drawing:Remove() table.remove(Zombies_ESP, i) end end
        for i,v in pairs(MysteryBox) do if v.Drawing then v.Drawing:Remove() table.remove(MysteryBox, i) end end
        for i,v in pairs(PerkMachines) do if v.Drawing then v.Drawing:Remove() table.remove(PerkMachines, i) end end
        Library.Unloaded = true
    end)
    
    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
    
    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
    
    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
    
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('Exceros Hub')
    SaveManager:SetFolder('Exceros Hub/Michaels Zombies')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
end
if GameToLoad == "Booga Booga Reborn" then -- [[ Booga Booga Reborn Loader ]]
    if game.PlaceId == 11879754496 then -- void
        do
            local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
            local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
            local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
            
            local Window = Library:CreateWindow({
                Title = "Exceros Hub || Booga Booga Void || discord.gg/exceros",
                Center = true,
                AutoShow = true,
                TabPadding = 8,
                MenuFadeTime = 0.2
            })
            
            local Tabs = {
                Main = Window:AddTab('Main'),
                ESP = Window:AddTab("ESP"),
                Crafting = Window:AddTab("Crafting"),
                Misc = Window:AddTab("Misc"),
                ['UI Settings'] = Window:AddTab('UI Settings'),
            }
            
            -- Services
            local VirtualUser = game:GetService("VirtualUser")
            local Player = game:GetService("Players").LocalPlayer
            local Players = game:GetService('Players')
            local RunService = game:GetService("RunService")
            local ReplicatedStorage = game:GetService('ReplicatedStorage')
            local Lighting = game:GetService("Lighting")
            local UserInputService = game:GetService("UserInputService")
            local TweenService = game:GetService("TweenService")
            local TeleportService = game:GetService('TeleportService')
            local HttpService = game:GetService("HttpService")
            
            local GC = getconnections or get_signal_cons
            local Character = Player.Character
            local Player = Players.LocalPlayer
            
            -- Connections
            local Connections = {}
            local Hooks = {}
            
            -- groupboxes
            local CraftBox = Tabs.Crafting:AddLeftGroupbox('Crafting')
            local AutoHealBox = Tabs.Main:AddLeftGroupbox('Auto Heal')
            local LocalGroupBox = Tabs.Main:AddLeftGroupbox('Local')
            local KillAuraBox = Tabs.Main:AddRightGroupbox('Kill Aura')
            local CombatBox = Tabs.Main:AddLeftGroupbox("Combat")
            local FarmingBox = Tabs.Main:AddRightGroupbox("Auto")
            local TeleportBox = Tabs.Misc:AddLeftGroupbox("Teleports")
            local BoatModifier = Tabs.Misc:AddRightGroupbox("Boats")

            -- esp groubpxoes
            local OreESPBox = Tabs.ESP:AddLeftGroupbox("Ore ESP")
            local PlayerESPBox = Tabs.ESP:AddRightGroupbox("Player ESP")
            
            -- variables
            local AutoDropItem = "Item Name"
            local AutoDrop = false
            local sets = "Leaf Set"
            local AutoHarvest = false
            local AutoPlant = false
            local WalkSpeedToggled = false
            local WalkSpeedValue = 16
            local JumpPowerToggled = false
            local JumpPowerValue = 50
            local AutoKillCritters = false
            local AutoKillCrittersRange = 12
            local KillAuraPlayers = false
            local KillAuraPlayersRange = 12
            local AutoMineResources = false 
            local AutoMineResourcesRange = 50
            local InfiniteJump = false
            local AutoPickup = false
            local AuotPickupRange = 20
            local AutoPlant = false
            local AutoFarm = false
            local AutoHeal = false
            local SelectedFruit = "Bloodfruit"
            local FruitToEat = "Bloodfruit"
            local AutoHealAt = 75
            local HealAmountMultiplier = 1
            local PlantFruitRange = 100
            local CollectFruitRange = 25
            local OreESPToggle = false
            local ShowOreESPDistance = false
            local ShowOreHealth = false
            local ShownOres = {}
            local HitboxExpander = false
            local HitboxExpanderShown = false
            local HitboxExpanderRange = 12
            local PlayerESPToggle = false
            local PlayerESPColor = Color3.fromRGB(148, 50, 205)
            local HealthESP = false
            local ItemToDrop = ""
            local VoodooBoltNearby = false
            local ShowArmor = false
            local ArmorColor = Color3.fromRGB(202, 131, 25)
            local ArmorPosition = "Down"
            local ArmorSize = 13 
            local ShowTribeColor = false
            local HubNoClip = false
            local HeadSizeToggle = false
            local HeadSizeVariable = 6
            local UseAnimation = false
            local IsAnimationPlaying = false
            local BoatSpeedToggle = false
            local BoatSpeed = 15
            local AntiDock = false
            -- loop breaker
            local BreakPoint = false
            -- anti afk

            task.spawn(function()
                for i,v in pairs(getconnections(Player.Idled)) do
                    v:Disable()
                end
                Player.Idled:Connect(function()
                    local VirtualUser = game:GetService("VirtualUser")
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end)

            AutoHealBox:AddDropdown('Auto Heal Fruits', {
                Values = { 'Bloodfruit', 'Bluefruit', 'Berry', 'Jelly', 'Lemon', 'Pumpkin'},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Fruits',
                Tooltip = 'fruits used to heal', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    FruitToEat = tostring(Value)
                end
            })
            
            AutoHealBox:AddToggle('Auto Heal', {
                Text = 'Auto Heal',
                Default = false,
                Tooltip = 'Toggle on/off Auto Heal', 
                Callback = function(Value)
                    AutoHeal = Value
                end
            })
            
            AutoHealBox:AddSlider('Eat Multiplier', {
                Text = 'Eat Multiplier',
                Default = 1,
                Min = 1,
                Max = 5,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HealAmountMultiplier = Value
                end
            })
            
            AutoHealBox:AddSlider('Heal at health%', {
                Text = 'Heal at health%',
                Default = 75,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoHealAt = Value
                end
            })
            
            -- walkspeed / local player shit
            LocalGroupBox:AddToggle('Walk Speed', {
                Text = 'Walk Speed',
                Default = false,
                Tooltip = 'Modifies your walkspeed', 
                Callback = function(Value)
                    WalkSpeedToggled = Value
                end
            })
            
            LocalGroupBox:AddSlider('Walk Speed Value', {
                Text = 'Walk Speed Value',
                Default = 16,
                Min = 16,
                Max = 25,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    WalkSpeedValue = Value
                end
            })
            
            LocalGroupBox:AddToggle('Jump Power', {
                Text = 'Jump Power',
                Default = false,
                Tooltip = 'Jump Power', 
                Callback = function(Value)
                    JumpPowerToggled = Value
                end
            })
            
            LocalGroupBox:AddSlider('Jump Power Value', {
                Text = 'Jump Power Value',
                Default = 50,
                Min = 50,
                Max = 150,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    JumpPowerValue = Value
                end
            })
            
            LocalGroupBox:AddToggle('Infinite Jump', {
                Text = 'Infinite Jump',
                Default = false,
                Tooltip = 'infinite jump', 
                Callback = function(Value)
                    InfiniteJump = Value
                end
            })
            
            LocalGroupBox:AddToggle('Hut No-Clip', {
                Text = 'Hut No-Clip',
                Default = false,
                Tooltip = 'infinite jump', 
                Callback = function(Value)
                    HubNoClip = Value
                end
            })
            
            -- boat shit
            BoatModifier:AddToggle('Boat Speed', {
                Text = 'Boat Speed',
                Default = false,
                Tooltip = 'modifies the (raft/sail/boat) speed the user is on', 
                Callback = function(Value)
                    BoatSpeedToggle = Value
                end
            })

            BoatModifier:AddSlider('Boat Speed Strength', {
                Text = 'Boat Speed Strength',
                Default = 15,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    BoatSpeed = Value
                end
            })

            -- kill auras
            KillAuraBox:AddToggle('Auto-Kill Critters', {
                Text = 'Auto-Kill Critters',
                Default = false,
                Tooltip = 'kills critters around u', 
                Callback = function(Value)
                    AutoKillCritters = Value
                end
            })
            
            KillAuraBox:AddSlider('Critters Range', {
                Text = 'Critters Range',
                Default = 12,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoKillCrittersRange = Value
                end
            })
            
            -- combat
            CombatBox:AddToggle('Kill Aura Players', {
                Text = 'Kill Aura Players',
                Default = false,
                Tooltip = 'kill auras', 
                Callback = function(Value)
                    KillAuraPlayers = Value
                end
            })
            
            CombatBox:AddSlider('Kill Aura Range', {
                Text = 'Kill Aura Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    KillAuraPlayersRange = Value
                end
            })
            
            CombatBox:AddToggle('Use Slash Animation', {
                Text = 'Use Slash Animation',
                Default = false,
                Tooltip = 'uses slash animation', 
                Callback = function(Value)
                    UseAnimation = Value
                end
            })

            CombatBox:AddDivider()
            
            CombatBox:AddToggle('Hitbox Expander', {
                Text = 'Hitbox Expander',
                Default = false,
                Tooltip = 'extends htiboxes', 
                Callback = function(Value)
                    HitboxExpander = Value
                end
            })
            
            
            CombatBox:AddSlider('Hitbox Range', {
                Text = 'Hitbox Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HitboxExpanderRange = Value
                end
            })
            
            CombatBox:AddToggle('Hitbox Expander Visible', {
                Text = 'Hitbox Expander Visible',
                Default = false,
                Tooltip = 'extends htiboxes Visible', 
                Callback = function(Value)
                    HitboxExpanderShown = Value
                end
            })

            CombatBox:AddToggle('Head Size', {
                Text = 'Head Size',
                Default = false,
                Tooltip = 'headsize', 
                Callback = function(Value)
                    HeadSizeToggle = Value
                end
            })
            
            
            CombatBox:AddSlider('Head Size Range', {
                Text = 'Head Size Range',
                Default = 6,
                Min = 0,
                Max = 6,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HeadSizeVariable = Value
                end
            })
            
            
            CombatBox:AddToggle('Auto-Bolt Nearby Player', {
                Text = 'Auto-Bolt Nearby Player',
                Default = false,
                Tooltip = 'if (voodoo bolt) it shoots nearest player', 
                Callback = function(Value)
                    VoodooBoltNearby = Value
                end
            })

            CombatBox:AddToggle('Anti Dock', {
                Text = 'Anti Dock',
                Default = false,
                Tooltip = 'Anti Dock', 
                Callback = function(Value)
                    AntiDock = Value
                end
            })
            
            -- farming
            FarmingBox:AddToggle('Auto-Mine Resource', {
                Text = 'Auto-Mine Resource',
                Default = false,
                Tooltip = 'auto mine resources', 
                Callback = function(Value)
                    AutoMineResources = Value
                end
            })
            
            FarmingBox:AddSlider('Mine Range', {
                Text = 'Mine Range',
                Default = 50,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoMineResourcesRange = Value
                end
            })
            
            FarmingBox:AddToggle('Auto-Collect Resources', {
                Text = 'Auto-Collect Resources',
                Default = false,
                Tooltip = 'auto collects resources', 
                Callback = function(Value)
                    AutoPickup = Value
                end
            })
            
            FarmingBox:AddSlider('Auto-Collect Range', {
                Text = 'Auto-Collect Range',
                Default = 20,
                Min = 0,
                Max = 25,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AuotPickupRange = Value
                end
            })
            FarmingBox:AddToggle('Auto-Drop Items', {
                Text = 'Auto-Drop Items',
                Default = false,
                Tooltip = 'Automatically drop items', 
                Callback = function(Value)
                    AutoDrop = Value
                end
            })
            FarmingBox:AddInput('Item Name', {
                Default = 'Item Name',
                Numeric = false, -- true / false, only allows numbers
                Finished = false, -- true / false, only calls callback when you press enter
            
                Text = 'Item Name',
                Tooltip = 'Item to automatically drop', -- Information shown when you hover over the textbox
            
                Placeholder = 'Type item name', -- placeholder text when the box is empty
                -- MaxLength is also an option which is the max length of the text
            
                Callback = function(AutoDropItem)
                    ItemToDrop = AutoDropItem
                end
            })
            
            
            -- esp
            OreESPBox:AddToggle('Ore ESP', {
                Text = 'Ore ESP',
                Default = false,
                Tooltip = 'ore esp for ores', 
                Callback = function(Value)
                    OreESPToggle = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Distance', {
                Text = 'Show Ore Distance',
                Default = false,
                Tooltip = 'show distance ore esp for ores', 
                Callback = function(Value)
                    ShowOreESPDistance = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Health', {
                Text = 'Show Ore Health',
                Default = false,
                Tooltip = 'shows health', 
                Callback = function(Value)
                    ShowOreHealth = Value
                end
            })
            
            local allowedOresforESP = {
                    "Strange God",
                    "Dark God",
                    "Infinity God",
                    "Magical God",
                    "Odd God",
                    "Soulless God",
                    "Strangefruit Cluster",
                    "Uber Goober",
                    "Void Crag",
                    "Magnetite Rock",
                },
            
            OreESPBox:AddDropdown('Shown Ores', {
                Values = {
                    "Strange God",
                    "Dark God",
                    "Infinity God",
                    "Magical God",
                    "Odd God",
                    "Soulless God",
                    "Strangefruit Cluster",
                    "Uber Goober",
                    "Void Crag",
                    "Magnetite Rock",
                },
                Default = 1,
                Multi = true,
            
                Text = 'Shown Ores',
                Tooltip = 'shows selected ores on esp', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    ShownOres = Value
                end
            })
            
            -- player esp
            PlayerESPBox:AddToggle('Player ESP', {
                Text = 'Player ESP',
                Default = false,
                Tooltip = 'shows player esp', 
                Callback = function(Value)
                    PlayerESPToggle = Value
                end
                }):AddColorPicker('Player ESP Color', {
                    Default = Color3.fromRGB(148, 50, 205), 
                    Title = 'Choose Player ESP Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        PlayerESPColor = Value
                    end
                })
            
                PlayerESPBox:AddToggle('Show Health', {
                    Text = 'Show Health',
                    Default = false,
                    Tooltip = 'show health fr', 
                    Callback = function(Value)
                        HealthESP = Value
                    end
                })
            
                PlayerESPBox:AddToggle('Use Tribe Color', {
                    Text = 'Use Tribe Color',
                    Default = false,
                    Tooltip = 'showst ribe color instead', 
                    Callback = function(Value)
                        ShowTribeColor = Value
                    end
                })
            
                PlayerESPBox:AddDivider()
            
                PlayerESPBox:AddToggle('Show Armor', {
                    Text = 'Show Armor',
                    Default = false,
                    Tooltip = 'shows player esp', 
                    Callback = function(Value)
                        ShowArmor = Value
                    end
                }):AddColorPicker('Armor Color', {
                    Default = ArmorColor, 
                    Title = 'Armor Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        ArmorColor = Value
                    end
                })
                
                PlayerESPBox:AddSlider('Armor ESP Size', {
                    Text = 'Armor ESP Size',
                    Default = 12,
                    Min = 0,
                    Max = 20,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        ArmorSize = Value
                    end
                })
            
                PlayerESPBox:AddDropdown('Armor Position', {
                    Values = {
                        "Left",
                        "Right",
                        "Down"
                    },
                    Default = 3,
                    Multi = false,
                
                    Text = 'Armor Position',
                    Tooltip = 'changes esp location', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        ArmorPosition = Value
                    end
                })
            
            -- functions
            local function getClosestCritter(d)
                local Closest, maxDistance = nil, d
                if (workspace:FindFirstChild("Void Ant") or workspace:FindFirstChild("Lost Soul")) then
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil and (tostring(v) == "Void Ant" or tostring(v) == "Lost Soul") then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end
            
            local function getClosestPlayer(d)
                local Closest, maxDistance = nil, d
                if Player and Player.Character then
                    for i,v in pairs(game:GetService("Players"):GetPlayers()) do
                        if v and v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Character.HumanoidRootPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end
            
            local function getClosestResource(d)
                local Closest, maxDistance = nil, d
                local p = nil
                if p == nil then
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") and v:FindFirstChild("Health") and not v:FindFirstChild("Humanoid") and (v.PrimaryPart ~= nil or v:FindFirstChild("Totem") or v:FindFirstChild("Leaves")) then
                            if v.PrimaryPart ~= nil and v.PrimaryPart then
                                p = v.PrimaryPart
                            elseif v:FindFirstChild("Totem") then
                                p = v.Totem
                            elseif v:FindFirstChild("Leaves") then
                                p = v.Leaves
                            end
                            local Distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-p.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, p
            end
            
            local function getClosestDrop(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Items") then
                    for i,v in pairs(workspace.Items:GetChildren()) do
                        if v:IsA("BasePart") and v:FindFirstChild("Pickup") then
                            local Distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position-v.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end
            
            -- inf jump
            local infJumpDebounce = false
            Connections.infjump = UserInputService.JumpRequest:Connect(function()
                if not infJumpDebounce and InfiniteJump then
                    infJumpDebounce = true
                    Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait()
                    infJumpDebounce = false
                end
            end)
            
            local HarvestDebounce = false
            local PlantDebounce = false
            local MineDebounce = false
            local CollectDebounce = false
            local VoodooDebounce = false
            
            local ConnectedToWalkSpeed = nil
            Connections.MainLoop = RunService.Stepped:Connect(function()
                if Player and Player.Character then
                    if WalkSpeedToggled then
                        Player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeedValue
                        if not ConnectedToWalkSpeed then
                            ConnectedToWalkSpeed = Player.Character:FindFirstChildOfClass("Humanoid"):GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                                Player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeedValue
                            end)
                        end
                    else
                        if ConnectedToWalkSpeed then
                            ConnectedToWalkSpeed:Disconnect()
                            ConnectedToWalkSpeed = nil
                        end
                    end
                    if JumpPowerToggled then
                        Player.Character:FindFirstChildOfClass("Humanoid").JumpPower = JumpPowerValue
                    end
            
                    if BoatSpeedToggle then
                        if Player.Character and Player.Character.Humanoid and Player.Character.Humanoid.SeatPart then
                            if Player.Character.Humanoid.SeatPart:FindFirstChild("BodyVelocity") then
                                Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity = Vector3.new(Player.Character.HumanoidRootPart.CFrame.LookVector.X*BoatSpeed, Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity.Y, Player.Character.HumanoidRootPart.CFrame.LookVector.Z*BoatSpeed)
                            end
                        end
                    end

                    -- kill aura
                    if AutoKillCritters then
                        local crit = getClosestCritter(AutoKillCrittersRange)
                        if crit and crit.PrimaryPart then
                            local args = {
                                [1] = os.clock(),
                                [2] = {
                                    crit.PrimaryPart,
                                    crit.HumanoidRootPart,
                                    crit.Head,
                                }
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
                            
                        end
                    end
            
                    -- combat
                    if KillAuraPlayers then
                        local closest_plr = getClosestPlayer(KillAuraPlayersRange)
                        print(closest_plr)
                        if closest_plr and closest_plr.Character and closest_plr.Character.PrimaryPart then
                            print('swing')
                            if UseAnimation then
                                local a = game:GetService("ReplicatedStorage").Animations.Slash
                                if a then 
                                    if not IsAnimationPlaying then
                                        IsAnimationPlaying = true
                                        local anim = Player.Character.Humanoid:LoadAnimation(a)
                                        anim:Play()
                                        local c; c = anim.Ended:Connect(function() IsAnimationPlaying = false c:Disconnect() end)
                                        local c2; c2 = anim.Stopped:Connect(function() IsAnimationPlaying = false c2:Disconnect() end)
                                    end
                                end
                            end
                            local args = {
                                [1] = os.clock(),
                                [2] = {
                                    closest_plr.Character.PrimaryPart,
                                    closest_plr.Character.HumanoidRootPart,
                                    closest_plr.Character.Head,
                                }
                            }
                            
                            game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
                            
                        end
                    end

            
                    -- farming
                    if AutoMineResources then
                        if not MineDebounce then
                            MineDebounce = true
                            local closest_resource, closest_part = getClosestResource(AutoMineResourcesRange)
                            if closest_resource then
                                print(closest_resource)
                                local args = {
                                    [1] = os.clock(),
                                    [2] = {
                                        closest_part,
                                        closest_resource.PrimaryPart,
                                        closest_resource:FindFirstChildOfClass("BasePart"),
                                        closest_resource:FindFirstChildOfClass("Part"),
                                    },
                                }
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("SwingTool"):FireServer(unpack(args))
                            end
                            task.delay(0.1, function() MineDebounce = false end)
                        end
                    end
            
                    if AutoPickup then
                        if not CollectDebounce then
                            local closest_drop = getClosestDrop(AuotPickupRange)
                            if closest_drop then
                                game:GetService("ReplicatedStorage"):WaitForChild("Events"):WaitForChild("Pickup"):FireServer(
                                    closest_drop,
                                    "Part"
                                )
                            end
                            task.delay(0.1, function() CollectDebounce = false end)
                        end
                    end
            
                    -- auto eat
                    local Inventory = Player.PlayerGui.MainGui.RightPanel.Inventory.List
                    if Inventory then
                        if AutoHeal then
                            if (Player.Character.Humanoid.Health/Player.Character.Humanoid.MaxHealth*100) <= AutoHealAt then 
                                for i = 1, HealAmountMultiplier do 
                                    game:GetService("ReplicatedStorage").Events.UseBagItem:FireServer(FruitToEat)
                                end
                            end
                        end
                    end
            
                    if HubNoClip then
                        for i,v in pairs(workspace.Deployables:GetChildren()) do
                            if v:IsA("Model") and v:FindFirstChild("Door") and v.Door.CanCollide == true then
                                if HubNoClip then
                                    v.Door.CanCollide = false
                                    v.Door.Transparency = 0.7
                                end
                            end
                        end
                    end
                    
                    if AntiDock then
                        local RayParams = RaycastParams.new()
                        RayParams.FilterDescendantsInstances = {Player.Character}
                        RayParams.FilterType = Enum.RaycastFilterType.Exclude
                        local Ray = workspace:Raycast(Player.Character.HumanoidRootPart.Position, Vector3.new(0, 4, 0), RayParams)
                        if Ray and Ray.Instance and tostring(Ray.Instance) == "StructureWood" then
                            Player.Character.HumanoidRootPart.CFrame *= CFrame.new(0, 2, 0)
                        end
                    end

                    if HeadSizeToggle then
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") then
                                v.Character:FindFirstChild("Head").Size = Vector3.new(HeadSizeVariable,HeadSizeVariable,HeadSizeVariable)
                            end
                        end
                    else
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character.Head.Size ~= Vector3.new(2, 1, 1) then
                                v.Character:FindFirstChild("Head").Size = Vector3.new(2, 1, 1)
                            end
                        end
                    end

                    if HitboxExpander then
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                                if HitboxExpanderShown then
                                    v.Character:FindFirstChild("HumanoidRootPart").Transparency = 0.7
                                else
                                    if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                        v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                    end
                                end
                                v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(HitboxExpanderRange,HitboxExpanderRange,HitboxExpanderRange)
                            end
                        end
                    else
                        for _,v in pairs(Players:GetPlayers()) do
                            if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                                if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                    v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                end
                                if v.Character:FindFirstChild("HumanoidRootPart").Size ~= Vector3.new(2, 2, 1) then
                                    v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(2, 2, 1)
                                end
                            end
                        end
                    end
            
                    if AutoDrop then
                        game:GetService("ReplicatedStorage").Events.DropBagItem:FireServer(ItemToDrop)
                    end
            
                    if VoodooBoltNearby then
                        local ClosestPlayer = getClosestPlayer(100)
                        if ClosestPlayer then
                            if not VoodooDebounce then
                                VoodooDebounce = true
                                game:GetService("ReplicatedStorage"):FindFirstChild("Events"):FindFirstChild("VoodooSpell"):FireServer(ClosestPlayer.Character.PrimaryPart.Position)
                                task.delay(0.5, function() VoodooDebounce = false end)
                            end
                        end
                    end
            
                else
                    HarvestDebounce = false
                    PlantDebounce = false
                    VoodooDebounce = false
                    MineDebounce = false
                    CollectDebounce = false
                end -- end of char check
            end)
            
            if Player.Character then
                PlantDebounce = false
                HarvestDebounce = false
                MineDebounce = false
                CollectDebounce = false
                VoodooDebounce = false
                local _; _ = Player.Character:WaitForChild("Humanoid").Died:Connect(function() _:Disconnect() VoodooDebounce = false PlantDebounce = false HarvestDebounce = false end)
            end
            Player.CharacterAdded:Connect(function(c)
                PlantDebounce = false
                HarvestDebounce = false
                MineDebounce = false
                CollectDebounce = false
                VoodooDebounce = false
                local _; _ = c:WaitForChild("Humanoid").Died:Connect(function() _:Disconnect() VoodooDebounce = false PlantDebounce = false HarvestDebounce = false end)
            end)
            
            
                local Ores = {}
            
                local function AddOreToTable(model)
                    local Con1
                    
                    if table.find(allowedOresforESP, tostring(model)) then
                        local totalModelData = {}
                    
                        local TextDrawing = Drawing.new("Text")
                        TextDrawing.Size = 16
                        TextDrawing.Visible = false
                        TextDrawing.Outline = true
                        TextDrawing.Center = true
                        TextDrawing.Text = tostring(model)
                        TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                        
                        totalModelData.Drawing = TextDrawing
                        totalModelData.Model = model
                        totalModelData.Name = tostring(model)
                
                        table.insert(Ores, totalModelData)
                        
                        Con1 = model.AncestryChanged:Connect(function(old,new)
                            if old == nil or new == nil then
                                Con1:Disconnect()
                            end
                        end)
                    end
                end
            
                Connections.MapComponents = RunService.RenderStepped:Connect(function()
                    for i,v in pairs(Ores) do
                        if v.Model ~= nil and v.Drawing ~= nil then
                            if OreESPToggle and ShownOres[tostring(v.Model)] == true then
                                local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                if OnScreen then
                                    if ShowOreESPDistance then
                                        local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
            
                                        if ShowOreHealth then
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m] " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                        else
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m]"
                                        end
                                    else
                                        if ShowOreHealth then
                                            v.Drawing.Text = v.Name .. " " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                        else
                                            v.Drawing.Text = v.Name
                                        end
                                    end
                                    v.Drawing.Visible = true
                                    if v.Model:FindFirstChild("Small Rock") then
                                        v.Drawing.Color = v.Model["Small Rock"].BrickColor.Color
                                    elseif v.Model:FindFirstChild("Totem") then
                                        v.Drawing.Color = v.Model.Totem.BrickColor.Color
                                    elseif v.Model:FindFirstChild("Feather Stone") then
                                        v.Drawing.Color = v.Model["Feather Stone"].BrickColor.Color
                                    else
                                        v.Drawing.Color = Color3.fromRGB(0, 162, 255)
                                    end
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(Ores, i)
                        end
                    end
                end)
            
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") then
                            AddOreToTable(v)
                        end
                    end
                    workspace.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(child)
                        if child:IsA("Model") then
                            AddOreToTable(child)
                        end
                    end))
                    workspace.ChildRemoved:Connect(LPH_NO_VIRTUALIZE(function(child)
                        for i,v in pairs(Ores) do
                            if v.Model == child then
                                v.Model = nil
                            end
                        end
                    end))
            
                local PlayerESP = {}
            
                local function AddPlayerToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(PlayerESP, totalModelData)
                end
            
                RunService.RenderStepped:Connect(function()
                    for i,v in pairs(PlayerESP) do
                        if v.Model ~= nil and v.Drawing ~= nil then
                            if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                                if OnScreen and PlayerESPToggle then
                                    if HealthESP and v.Model:FindFirstChildOfClass("Humanoid") then
                                        local healthString = tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").Health)) .. "/" .. tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").MaxHealth))
                                        v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]" .. " [" .. healthString .. "]"                         
                                    else
                                        v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]"                         
                                    end
                                    if ShowTribeColor then
                                        v.Drawing.Color = v.Model:FindFirstChild("UpperTorso").Color
                                    else
                                        v.Drawing.Color = PlayerESPColor
                                    end
                                    v.Drawing.Visible = true
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                end)
            
                for i,v in pairs(Players:GetPlayers()) do
                    if v ~= Player then
                        if v.Character then
                            AddPlayerToTable(v.Character)
                        end
                        v.CharacterAdded:Connect(function(char)
                            AddPlayerToTable(char)
                        end)
                    end
                end
                Players.PlayerAdded:Connect(function(p)
                    p.CharacterAdded:Connect(function(char)
                        AddPlayerToTable(char)
                    end)
                end)
            
                Players.PlayerRemoving:Connect(function(p)
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(p) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                end)
            
                -- armor esp fuck u
                local ArmorESP = {}
            
                local function AddPlayerArmorToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(ArmorESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 12
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = "null"
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(ArmorESP, totalModelData)
                end
            
                Connections.mainloopforarmoresp = RunService.Stepped:Connect(LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(ArmorESP) do
                        if v.Model ~= nil and v.Drawing ~= nil then
                            if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                local Offset = Vector3.new(0,0,0)
                                if ArmorPosition == "Left" then
                                    Offset = Vector3.new(0,0,5)
                                elseif ArmorPosition == "Right" then
                                    Offset = Vector3.new(0,0,-5)
                                elseif ArmorPosition == "Down" then
                                    Offset = Vector3.new(0,-3.5,0)
                                end
                                local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Offset)
                                if OnScreen and ShowArmor then
                                    local equipped = "\n"
                                    for i2,v2 in pairs(v.Model:GetChildren()) do
                                        if v2:IsA("Accessory") and table.find({"torso", "head", "leg", "legs"}, tostring(v2:FindFirstChildOfClass("BoolValue"))) then
                                            equipped = equipped .. tostring(v2) .. "\n"
                                        end
                                    end
                                    v.Drawing.Text = tostring(equipped) or ""
                                    v.Drawing.Color = ArmorColor
                                    v.Drawing.Size = ArmorSize
                                    v.Drawing.Visible = true
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                end))
            
                for i,v in pairs(Players:GetPlayers()) do
                    if v ~= Player then
                        if v.Character then
                            AddPlayerArmorToTable(v.Character)
                        end
                        v.CharacterAdded:Connect(function(char)
                            AddPlayerArmorToTable(char)
                        end)
                    end
                end
                Players.PlayerAdded:Connect(function(p)
                    p.CharacterAdded:Connect(function(char)
                        AddPlayerArmorToTable(char)
                    end)
                end)
            
                Players.PlayerRemoving:Connect(function(p)
                    for i,v in pairs(ArmorESP) do
                        if tostring(v.Name) == tostring(p) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                end)
            
                -- hut noclip stuff
                
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end
                workspace.Deployables.ChildAdded:Connect(LPH_NO_VIRTUALIZE(function(v)
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end))

            
                CraftBox:AddDropdown('Craft Set', {
                    Values = { 'Leaf Set', 'Hide Set', 'Iron Set', 'Steel Set', 'Adurite Set', 'Crystal Set', 'Magnetite Set','Emerald Set', 'Pink Diamond Set', 'Void Set', 'God Set'},
                    Default = 1, -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Set',
                    Tooltip = 'Set to choose to craft', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sets = Value
                    end
                })
                CraftBox:AddButton({
                    Text = 'Craft Set',
                    DoubleClick = false,
                    Tooltip = 'Crafts a full set of armor',
                    Func = function()
                if sets == "Leaf Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Leaf Shirt")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Leaf Pants")
                elseif sets == "Hide Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Hide Pants")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Hide Shirt")
                elseif sets == "Iron Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Iron Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Iron Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Iron Chestplate")
                elseif sets == "Steel Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Steel Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Steel Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Steel Helmet")
                elseif sets == "Adurite Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Adurite Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Adurite Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Adurite Greaves")
                elseif sets == "Crystal Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Crystal Crown")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Crystal Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Crystal Greaves")
                elseif sets == "Magnetite Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Magnetite Mask")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Magnetite Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Magnetite Greaves")
                elseif sets == "Emerald Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Emerald Helmet")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Emerald Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Emerald Chestplate")
                elseif sets == "Pink Diamond Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Pink Diamond Hood")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Pink Diamond Greaves")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Pink Diamond Chestplate")
                elseif sets == "Void Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Void Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Void Shroud")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("Void Greaves")
                elseif sets == "God Set" then
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("God Halo")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("God Chestplate")
                    game:GetService("ReplicatedStorage").Events.CraftItem:FireServer("God Legs")
                end
            end})
            

            -- teleport stuff
            TeleportBox:AddButton({
                Text = "Teleport to OverWorld",
                DoubleClick = false,
                Tooltip = "teleports u to the OverWorld",
                Func = function() 
                    TeleportService:Teleport(11729688377, Player)
                end
            })
                TeleportBox:AddButton({
                    Text = "Void Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "teleports to a lower player void server",
                    Func = function() 
                        -- Lower Player Server Void
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Void Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player void server",
                    Func = function() 
                    -- Higher Player Void 
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Overworld Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player overworld server",
                    Func = function() 
                    -- highest server script overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, game.Players.LocalPlayer)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Overworld Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a lower player overworld server",
                    Func = function() 
                    -- Lower Player Server Overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,game.Players.LocalPlayer)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Server Hop",
                    DoubleClick = false,
                    Tooltip = "Server hops to another server",
                    Func = function() 
                        local Player = game.Players.LocalPlayer    
                        local Http = game:GetService("HttpService")
                        local TPS = game:GetService("TeleportService")
                        local Api = "https://games.roblox.com/v1/games/"
                        
                        local _place,_id = game.PlaceId, game.JobId
                        local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
                        function ListServers(cursor)
                        local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                        return Http:JSONDecode(Raw)
                        end
                        
                        local Next; repeat
                        local Servers = ListServers(Next)
                        for i,v in next, Servers.data do
                            if v.playing < v.maxPlayers and v.id ~= _id then
                                local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
                                if s then break end
                            end
                        end
                        
                        Next = Servers.nextPageCursor
                        until not Next
                    end
                })
            
            -- library shit
            Library.KeybindFrame.Visible = false; -- todo: add a function for this
            
            Library:OnUnload(function()
                for i,v in pairs(Connections) do v:Disconnect() end
                for i2,v2 in pairs(Ores) do if v2.Drawing then v2.Drawing:Remove() table.remove(Ores, i2) end end
                for i3,v3 in pairs(PlayerESP) do if v3.Drawing then v3.Drawing:Remove() table.remove(PlayerESP, i3) end end
                for i4,v4 in pairs(ArmorESP) do if v4.Drawing then v4.Drawing:Remove() table.remove(ArmorESP, i4) end end
                BreakPoint = true
                Library.Unloaded = true
            end)
            
            local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
            
            MenuGroup:AddButton('Unload', function() Library:Unload() end)
            MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
            
            Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
            
            ThemeManager:SetLibrary(Library)
            SaveManager:SetLibrary(Library)
            SaveManager:IgnoreThemeSettings()
            SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
            ThemeManager:SetFolder('Exceros Hub')
            SaveManager:SetFolder('Exceros Hub/Booga Booga Reborn')
            SaveManager:BuildConfigSection(Tabs['UI Settings'])
            ThemeManager:ApplyToTab(Tabs['UI Settings'])
            SaveManager:LoadAutoloadConfig()
        end
    else
        do -- overworld
            local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
            local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
            local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
            
            local Window = Library:CreateWindow({
                Title = "Exceros Hub || Booga Booga Reborn || discord.gg/exceros",
                Center = true,
                AutoShow = true,
                TabPadding = 4,
                MenuFadeTime = 0.2
            })
            
            local Tabs = {
                Main = Window:AddTab('Main'),
                ESP = Window:AddTab("ESP"),
                Crafting = Window:AddTab("Craft/Struct"),
                AutoFarming = Window:AddTab("Auto Farm"),
                Misc = Window:AddTab("Misc"),
                --Valentines = Window:AddTab("❤️Valentines"),
                ['UI Settings'] = Window:AddTab('UI Sets'),
            }
            
            -- Services
            local VirtualUser = game:GetService("VirtualUser")
            local Player = game:GetService("Players").LocalPlayer
            local Players = game:GetService('Players')
            local RunService = game:GetService("RunService")
            local ReplicatedStorage = game:GetService('ReplicatedStorage')
            local Lighting = game:GetService("Lighting")
            local UserInputService = game:GetService("UserInputService")
            local TweenService = game:GetService("TweenService")
            local TeleportService = game:GetService('TeleportService')
            local HttpService = game:GetService("HttpService")
            local Stats = game:GetService("Stats")
            local DataPing = Stats.Network.ServerStatsItem["Data Ping"]
            local GC = getconnections or get_signal_cons or function() end
        
            -- Connections
            local Connections = {}
            local Hooks = {}
            
            -- groupboxes
            
            local AutoPlantBox = Tabs.AutoFarming:AddRightGroupbox('Auto Plant')
            local AutoHarvestBox = Tabs.AutoFarming:AddRightGroupbox('Auto Harvest')
            local tweenfarmbox = Tabs.AutoFarming:AddRightGroupbox('Auto Harvest')
            local EzBox = Tabs.Crafting:AddRightGroupbox("Ez Structure")
            local CraftBox = Tabs.Crafting:AddLeftGroupbox('Crafting Armor')
            local CraftBox2 = Tabs.Crafting:AddRightGroupbox('Crafting Tools')
            local CraftBox3 = Tabs.Crafting:AddLeftGroupbox('Crafting Weapons')
            local CraftBox4 = Tabs.Crafting:AddRightGroupbox('Crafting Bags')
            local AutoHealBox = Tabs.Main:AddLeftGroupbox('Auto Heal')
            local AutoEatBox = Tabs.Main:AddLeftGroupbox('Auto Eat')
            local WasteBox = Tabs.Main:AddLeftGroupbox('Auto Eat at Fruit #')
            local LocalGroupBox = Tabs.Main:AddLeftGroupbox('Local')
            local KillAuraBox = Tabs.Main:AddRightGroupbox('Kill Aura')
            local CombatBox = Tabs.Main:AddRightGroupbox("Combat")
            local BowAimbotBox = Tabs.Main:AddRightGroupbox("Aimbot")
            local FarmingBox = Tabs.Main:AddRightGroupbox("Auto")
            local TeleportBox = Tabs.Misc:AddLeftGroupbox("Teleports")
            local ModBox = Tabs.Misc:AddLeftGroupbox('Mod Notifier')
            local AntiBan = Tabs.Misc:AddLeftGroupbox("Script Ban Protection")
            local PickupBox = Tabs.Misc:AddLeftGroupbox('Pickup Specific Item')
            local SphereBox = Tabs.Crafting:AddLeftGroupbox('15x15 Structure')
            local StraightBox = Tabs.Crafting:AddLeftGroupbox('Look Straight')
            local LBox = Tabs.Crafting:AddLeftGroupbox('L Structure')
            local PenisBox = Tabs.Crafting:AddRightGroupbox('Penis Structure')
            local HutBox = Tabs.Misc:AddLeftGroupbox('Hut Trap Nearest Player')
            local CampFireBox = Tabs.Misc:AddRightGroupbox("Campfire")
            local CoinPressBox = Tabs.Misc:AddRightGroupbox("Coin Press Aura")
            local PerformanceBox = Tabs.Misc:AddRightGroupbox("Script Settings")
            local consumeBox = Tabs.Misc:AddRightGroupbox("Eat Dropped Fruit")
            local viewPlayerBox = Tabs.Misc:AddRightGroupbox("Spectate Player")
            local IslandAutoFarm = Tabs.AutoFarming:AddLeftGroupbox("Sun Island XP")
            local xrayBox = Tabs.Misc:AddRightGroupbox("X-Ray")
            local equipBox = Tabs.Misc:AddRightGroupbox("Equip Armor")
            local goldAutofarmBox = Tabs.AutoFarming:AddLeftGroupbox("Gold/Coin Farm")
            local crystalAutofarmBox = Tabs.AutoFarming:AddLeftGroupbox("Crystal Farm")
            local autofarmLevelBox = Tabs.AutoFarming:AddRightGroupbox("Auto Level Farm")
            local MacrosBox = Tabs.AutoFarming:AddLeftGroupbox("Macros")
            local BoatModifier = Tabs.Misc:AddRightGroupbox("Boats")
            local WebhookHandler = Tabs.AutoFarming:AddRightGroupbox("Webhooks")
            local LightingBox = Tabs.Misc:AddLeftGroupbox("Lighting")
            --local HeartsGB = Tabs.Valentines:AddLeftGroupbox("Valentine's Update")
            -- local AutoCollectPumpkins = Tabs.Halloween:AddLeftGroupbox("Auto Pumpkin Collect")
            local TreasureESP = Tabs.ESP:AddLeftGroupbox("Treasure Chest ESP")
            -- esp groubpxoes
            local OreESPBox = Tabs.ESP:AddLeftGroupbox("Ore ESP")
            local PlayerESPBox = Tabs.ESP:AddRightGroupbox("Player ESP")
            
            -- variables
            AllFruits = {
                "Cloud Berry",
                "Bloodfruit",
                "Bluefruit",
                "Orange",
                "Apple",
                "Berry",
                "Sun Fruit",
                "Odd Berry",
                "Strawberry",
                "Lemon"
            }
        
            SunIslandFarm = false
            xpfarmtween = 8
            wastefruit = "Bloodfruit"
            WasteEat = false
            wastefruitnumber = 1000
            scriptbanprotection = true
            autoeatfood = "Bloodfruit"
            autoeatpercentage = 0.7
            autoeat = false
            sets1 = "Leaf Set"
            transparent = false
            lookstraight = false
            specificpickup = false
            pickupitem = {}
            coinpress = false
            lockplayerallowed = false
            coinpressrange = 15
            lockrange = 10
            AntiDock = false
            Big_Ol_Hut = "Big Ol' Hut"
            hut = "Big Ol' Hut"
            ModNotify = true
            campfireradius = 15
            CampfireAura = false
            CampfireMaterial = "Wood"
            AutoDropItem = "Bloodfruit"
            AutoDrop = false
            sets = "Leaf Set"
            AutoHarvest = false
            AutoPlant = false
            WalkSpeedToggled = false
            WalkSpeedValue = 16
            JumpPowerToggled = false
            JumpPowerValue = 7.2
            AutoKillCritters = false
            AutoKillCrittersRange = 12
            KillAuraPlayers = false
            KillAuraPlayersRange = 12
            AutoMineResources = false 
            AutoMineResourcesRange = 20
            InfiniteJump = false
            AutoPickup = false
            AuotPickupRange = 25
            AutoFarm = false
            AutoHeal = false
            SelectedFruit = "Bloodfruit"
            OnlyFruit = "Bloodfruit"
            FruitToEat = {["Bloodfruit"]=true}
            AutoHealAt = 75
            PlantFruitRange = 75
            CollectFruitRange = 75
            OreESPToggle = false
            ShowOreESPDistance = false
            ShowOreHealth = false
            ShownOres = {}
            HitboxExpander = false
            HitboxExpanderShown = false
            HitboxExpanderRange = 12
            PlayerESPToggle = false
            ShowArmor = false
            ArmorColor = Color3.fromRGB(202, 131, 25)
            ArmorPosition = "Down"
            ArmorSize = 13 
            PlayerESPColor = Color3.fromRGB(148, 50, 205)
            ShowTribeColor = false
            HealthESP = false
            ItemToDrop = ""
            SpoofPart = "Head"
            SpoofPartToggle = false
            VoodooBoltNearby = false
            AutoVoodooShield = false
            AutoVoodooShieldHealth = 75
            ShowArmorColor = false
            TweenSpeed = 12
            SunIslandFarm = false
            KillAncientTree = false
            SpectatePlayerToggle = false
            CurrentPlayerFindString = ""
            ScriptMode = "Default"
            consume = false
            GoldFarm = false
            BreakIceInstead = false
            AutoCookGold = false
            AutoPressCoins = false
            AutoCollectCoins = false
            MovementMethod = "Tween"
            MacroSelected = ""
            Recording = false
            MacroName = ""
            ShowMacroFrames = false
            MacrosAvailable = {}
            LoopPlayMacro = false
            HeadSizeToggle = false
            HeadSizeVariable = 6
            UseAnimation = false
            IsAnimationPlaying = false
            mountainclimber = false
            HubNoClip = false
            PlayerNoClip = false
            BoatSpeedToggle = false
            BoatSpeed = 15
            FlyToggle = false
            FlySpeed = 1000
            PlantFarmWebhook = ""
            GoldFarmWebhook = ""
            MojoFarmWebhook = ""
            LastGoldFarm = tick()
            TotalGoldFarm = tick()
            LastPlantFarm = tick()
            TotalPlantFarm = tick()
            TotalRebirthFarm = tick()
            LastRebirthFarm = tick()
            CurrentGold = nil
            CurrentFruit = nil
            CurrentMojos = nil
            LogTimePlant = 1800
            LogTimeMojo = 1800
            LogTimeGold = 1800
            FullBright = false
            Ambience = false
            AmbienceColor = Color3.fromRGB(255,255,255)
            ColorShift = false
            ColorShiftColor = Color3.fromRGB(255,255,255)
            OutDoorAmbient = false
            OutDoorAmbienceColor = Color3.fromRGB(255,255,255)
            BowAimbot = false 
            ShowVisualizer = false
            Visualizer = Drawing.new("Circle")
            Visualizer.Visible = false
            VisualizerSides = 64
            VisualizerColor = Color3.fromRGB(255,255,255)
            VisualizerTransparency = 0.5
            VisualizerRadius = 80
            VisualizerFilled = false
            VisualizerThickness = 0
            FuncFoundForAimbot = nil
            YOFFSET = 2
            CrystalAutoFarm = false
            CrystalFarmDistance = 100
            CrystalTweenSpeed = 10
            HealLoop = 1
            NoFog = false
            MacroSpeed = 12
            TreasureChestESPToggle = false
            TreasureChestColor = Color3.fromRGB(245, 158, 66)
            AutoLevelFarm = false
            AutoRebirth = false
        
            -- PACKETS IMPORTANT
            local Packets = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Packets"))
            local ItemIDs = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("ItemIDS"))
        
            -- HALLOWEEN
            --autocollectpumpkins = false
            --autobreakpumpkinpatches = false
        
            -- VALENTINES
            heartesptoggle = false
        
            local getTableSize = LPH_NO_VIRTUALIZE(function(tbl)
                local c = 0
                for i,v in pairs(tbl) do c = c + 1 end
                return c
            end)
        
            local getTableIndexArrayValue = LPH_NO_VIRTUALIZE(function(tbl)
                local keys = {}
                for key in pairs(tbl) do table.insert(keys, key) end
                local randomIndex = math.random(1, getTableSize(keys))
                local randomKey = keys[randomIndex]
                return randomKey
            end)
        
            local tribeCheck = LPH_NO_VIRTUALIZE(function(p1, p2)
                if p1 and p2 then
                    local upperTorso1, upperTorso2 = p1:FindFirstChild("UpperTorso"), p2:FindFirstChild("UpperTorso")
                    if upperTorso1 and upperTorso2 then
                        if upperTorso1.Color == Color3.fromRGB(108, 88, 75) and upperTorso2.Color == Color3.fromRGB(108, 88, 75) then
                            return false
                        else
                            if upperTorso1.Color == upperTorso2.Color then
                                return true
                            end
                        end
                    end
                end
                return false
            end)
            
            local GetAliveBird = LPH_NO_VIRTUALIZE(function()
                local ClosestBird, MaxDistance = nil, math.huge
                for _,v in pairs(workspace.Critters:GetChildren()) do
                    if v.Name == "Bird" and v:FindFirstChild("Health") and v:FindFirstChild("Beak") then
                        local Distance = (Player.Character.HumanoidRootPart.Position - v.Beak.Position).Magnitude
                        if Distance <= MaxDistance then
                            ClosestBird = v
                            MaxDistance = Distance
                        end
                    end
                end
                return ClosestBird, MaxDistance
            end)
        
            local EquipToolByString = LPH_NO_VIRTUALIZE(function(ToolString)
                if Player.Character and not Player.Character:FindFirstChild(ToolString) then
                    local InventoryUI = Player.PlayerGui.MainGui.RightPanel.Inventory.List
                    local ToolbarUI = Player.PlayerGui.MainGui.Panels.Toolbar.List
                    if InventoryUI and ToolbarUI then
                        if InventoryUI:FindFirstChild(ToolString) then
                            -- print(ToolString, "Located in Inventory, Retooling, INDEX:",InventoryUI:FindFirstChild(ToolString):GetAttribute("Index"))
                            local ToolInInventory = InventoryUI:FindFirstChild(ToolString)
                            Packets["UseBagItem"]["send"](ToolInInventory:GetAttribute("Index"))
                            -- print(ToolString, "Located in Inventory, Retooling...")
                        end
                        for i,v in pairs(ToolbarUI:GetChildren()) do
                            if v:IsA("ImageButton") then
                                local Image = v.Image
                                if Image ~= "" then
                                    local imageId = string.split(Image, "id=")[2]
                                    if imageId == "1450140493" then
                                        Packets['EquipTool']['send'](tonumber(v.Name))
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        
            local getClosestPumpkin = LPH_NO_VIRTUALIZE(function()
                local Closest, Distance = nil, math.huge
                for i,v in pairs(workspace.pumpkins:GetChildren()) do
                    if string.find(v.Name, "Pumpkin") and v:FindFirstChild("Reference") then
                        local Magnitude = (Player.Character.HumanoidRootPart.Position - v.Reference.Position).Magnitude
                        if Magnitude <= Distance then
                            Closest = v.Reference
                            Distance = Magnitude
                        end
                    end        
                end
                return Closest, Distance
            end)
        
            local getClosestPumpkinPatch = LPH_NO_VIRTUALIZE(function()
                local Closest, Distance = nil, math.huge
                for i,v in pairs(workspace:GetChildren()) do
                    if v.Name == "Pumpkin Patch" and v:FindFirstChild("Reference") then
                        local Magnitude = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.Reference.Position).Magnitude
                        if Magnitude <= Distance then
                            Closest = v.Reference
                            Distance = Magnitude
                        end
                    end        
                end
                return Closest, Distance
            end)
        
            -- macro folder
            MacroPositionFolder = Instance.new("Folder")
            MacroPositionFolder.Parent = workspace
            MacroPositionFolder.Name = "\000"
        
            -- loop breaker
            BreakPoint = false
            
            -- stuff for auto farm levels
            LastSpawned = tick()
            LastBird = tick()
            SpawnDebounce = false
            MojoClaimDebounce = false
            -- anti afk
            task.spawn(function()
                for i,v in pairs(getconnections(Player.Idled)) do
                    v:Disable()
                end
                Player.Idled:Connect(function()
                    VirtualUser = game:GetService("VirtualUser")
                    VirtualUser:CaptureController()
                    VirtualUser:ClickButton2(Vector2.new())
                end)
            end)
        
            -- character tick thing
            task.spawn(function()
                if Player.Character then
                    LastSpawned = tick()
                    local Humanoid = Player.Character:WaitForChild("Humanoid")
                    local C; C = Humanoid.Died:Connect(function()
                        LastSpawned = tick()
                        C:Disconnect()
                    end)
                end
                Player.CharacterAdded:Connect(function(Char)
                    LastSpawned = tick()
                    local Humanoid = Char:WaitForChild("Humanoid")
                    local C; C = Humanoid.Died:Connect(function()
                        LastSpawned = tick()
                        C:Disconnect()
                    end)
                end)
            end)
        
            -- chat bar focused
            chatBarFocused = false
            UserInputService.TextBoxFocused:Connect(function(textBox)
                chatBarFocused = true
            end)
            UserInputService.TextBoxFocusReleased:Connect(function(textBox)
                chatBarFocused = false
            end)
        
            local function SendWebhook(Title, Description, Farm)
                local Data = {
                    ["content"] = "",
                    ["embeds"] = {{
                        ["title"] = tostring(Title),
                        ['description'] = tostring(Description),
                        ['color'] = 12134440,
                        ['author'] = {
                        ['name'] = tostring(Farm),
                        ['url'] = "https://discord.gg/exceros",
                        ['icon_url'] = "https://cdn.discordapp.com/attachments/1042591843923283968/1142989424955768913/charizard.png"
                        },
                        ['footer'] = {
                            ['text'] = "Exceros Hub"
                        },
                        ['timestamp'] = DateTime.now():ToIsoDate()
                    }},
            
                }
                local JsonEncode = HttpService:JSONEncode(Data)    
                return JsonEncode
            end
        
            -- auto mojo farm
            autofarmLevelBox:AddToggle("Auto Level Farm", {
                Text = 'Auto Level Farm',
                Default = false,
                Tooltip = 'Autofarms levels for u', 
                Callback = function(Value)
        
                    LastSpawned = tick()
                    LastBird = tick()
                    SpawnDebounce = false
                    MojoClaimDebounce = false
        
                    AutoLevelFarm = Value
                end
            })
            autofarmLevelBox:AddToggle('Auto Rebirth', {
                Text = 'Auto Rebirth',
                Default = false,
                Tooltip = 'rebirths when you are level 100 (RECOMMENDED TO HAVE ON)', 
                Callback = function(Value)
        
                    TotalRebirthFarm = tick()
                    LastRebirthFarm = tick()
                    LastSpawned = tick()
                    LastBird = tick()
                    SpawnDebounce = false
                    MojoClaimDebounce = false
                    CurrentMojos = tonumber(getrenv()._G.data.mojo)
        
                    AutoRebirth = Value
                end
            })
        
            -- crystal farm
            crystalAutofarmBox:AddToggle('Crystal Autofarm', {
                Text = 'Crystal Autofarm',
                Default = false,
                Tooltip = 'Crystal Autofarm', 
                Callback = function(Value)
                    CrystalAutoFarm = Value
                end
            })
        
            crystalAutofarmBox:AddSlider('Crystal Distance', {
                Text = 'Crystal Distance',
                Default = 100,
                Min = 0,
                Max = 250,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    CrystalFarmDistance = Value
                end
            })
        
            crystalAutofarmBox:AddSlider('Tween Speed', {
                Text = 'Tween Speed',
                Default = 10,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    CrystalTweenSpeed = Value
                end
            })
        
            --
            TreasureESP:AddToggle('Treasure ESP', {
                Text = 'Treasure ESP',
                Default = false,
                Tooltip = 'Treasure ESP', 
                Callback = function(Value)
                    TreasureChestESPToggle = Value
                end
            }):AddColorPicker('Treasure Color', {
                Default = Color3.fromRGB(245, 158, 66), 
                Title = 'Treasure Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    TreasureChestColor = Value
                end
            })
        
            -- aimbot
            BowAimbotBox:AddToggle('Bow Aimbot', {
                Text = 'Bow Aimbot',
                Default = false,
                Tooltip = 'Bow Aimbot', 
                Callback = function(Value)
                    BowAimbot = Value
                end
            })
        
            BowAimbotBox:AddSlider('y offset', {
                Text = 'y offset',
                Default = 2,
                Min = 0,
                Max = 10,
                Rounding = 2,
                Compact = false,
            
                Callback = function(Value)
                    YOFFSET = tonumber(Value)
                end
            })
        
            BowAimbotBox:AddDivider()
        
            BowAimbotBox:AddToggle('FOV Visualizer', {
                Text = 'FOV Visualizer',
                Default = false,
                Tooltip = 'FOV Visualizer', 
                Callback = function(Value)
                    ShowVisualizer = Value
                end
            }):AddColorPicker('FOV Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'FOV Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    VisualizerColor = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Radius', {
                Text = 'FOV Radius',
                Default = 80,
                Min = 0,
                Max = 500,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerRadius = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Transparency', {
                Text = 'FOV Transparency',
                Default = 1,
                Min = 0,
                Max = 1,
                Rounding = 2,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerTransparency = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Thickness', {
                Text = 'FOV Thickness',
                Default = 1,
                Min = 0,
                Max = 10,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerThickness = Value
                end
            })
        
            BowAimbotBox:AddSlider('FOV Sides', {
                Text = 'FOV Sides',
                Default = 64,
                Min = 0,
                Max = 256,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    VisualizerSides = Value
                end
            })
        
            BowAimbotBox:AddToggle('FOV Filled', {
                Text = 'FOV Filled',
                Default = false,
                Tooltip = 'FOV Filled', 
                Callback = function(Value)
                    VisualizerFilled = Value
                end
            })
        
            -- misc lighting
            LightingBox:AddToggle('Full Bright', {
                Text = 'Full Bright',
                Default = false,
                Tooltip = 'Full Bright for game', 
                Callback = function(Value)
                    FullBright = Value
                end
            })
        
            LightingBox:AddToggle('Ambience', {
                Text = 'Ambience',
                Default = false,
                Tooltip = 'Ambience', 
                Callback = function(Value)
                    Ambience = Value
                end
            }):AddColorPicker('Ambience Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'Ambience Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    AmbienceColor = Value
                end
            })
        
            
            LightingBox:AddToggle('Color Shift', {
                Text = 'Color Shift',
                Default = false,
                Tooltip = 'Ambience', 
                Callback = function(Value)
                    ColorShift = Value
                end
            }):AddColorPicker('Color Shift Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'Color Shift Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    ColorShiftColor = Value
                end
            })
        
            LightingBox:AddToggle('Outdoor Ambient', {
                Text = 'Outdoor Ambient',
                Default = false,
                Tooltip = 'Outdoor Ambient', 
                Callback = function(Value)
                    OutDoorAmbient = Value
                end
            }):AddColorPicker('Outdoor Ambient Color', {
                Default = Color3.fromRGB(255,255,255), 
                Title = 'Outdoor Ambient Color', 
                Transparency = nil,
        
                Callback = function(Value)
                    OutDoorAmbienceColor = Value
                end
            })
            
            LightingBox:AddToggle('No Fog', {
                Text = 'No Fog',
                Default = false,
                Tooltip = 'No Fog', 
                Callback = function(Value)
                    NoFog = Value
                end
            })
        
            -- webhooks
            WebhookHandler:AddInput('Farm Webhook', {
                Default = 'Farm Webhook',
                Numeric = false,
                Finished = false,
            
                Text = 'Farm Webhook',
                Tooltip = 'sets webhook for farm',
            
                Placeholder = 'Farm Webhook', 
        
                Callback = function(Value)
                    PlantFarmWebhook = tostring(Value)
                end
            })
        
            WebhookHandler:AddInput('Log Time', {
                Default = 'Log Plant (seconds)',
                Numeric = false,
                Finished = true,
            
                Text = 'Log Plant (seconds)',
                Tooltip = 'logs every x seconds for plant',
            
                Placeholder = 'Log Plant (seconds)', 
        
                Callback = function(Value)
                    if tonumber(Value) then
                        LogTimePlant = tonumber(Value)
                        Library:Notify("Set log time to " .. tostring(LogTimePlant))
                    else
                        Library:Notify("Please input a number instead of a string value for LogTimePlant")
                    end
                end
            })
        
            WebhookHandler:AddInput('Coin Webhook', {
                Default = 'Coin Webhook',
                Numeric = false,
                Finished = false,
            
                Text = 'Coin Webhook',
                Tooltip = 'sets webhook for coin',
            
                Placeholder = 'Coin Webhook', 
        
                Callback = function(Value)
                    GoldFarmWebhook = tostring(Value)
                end
            })
        
            WebhookHandler:AddInput('Log Time', {
                Default = 'Log Gold (seconds)',
                Numeric = false,
                Finished = true,
            
                Text = 'Log Gold (seconds)',
                Tooltip = 'logs every x seconds for Gold',
            
                Placeholder = 'Log Gold (seconds)', 
        
                Callback = function(Value)
                    if tonumber(Value) then
                        LogTimeGold = tonumber(Value)
                        Library:Notify("Set log time to " .. tostring(LogTimeGold))
                    else
                        Library:Notify("Please input a number instead of a string value for LogTimeGold")
                    end
                end
            })
        
            WebhookHandler:AddInput('Rebirth Webhook', {
                Default = 'Rebirth Webhook',
                Numeric = false,
                Finished = false,
            
                Text = 'Rebirth Webhook',
                Tooltip = 'sets webhook for rebirth/mojo farm',
            
                Placeholder = 'Rebirth Webhook', 
        
                Callback = function(Value)
                    MojoFarmWebhook = tostring(Value)
                end
            })
        
            WebhookHandler:AddInput('Log Time', {
                Default = 'Log Mojo (seconds)',
                Numeric = false,
                Finished = true,
            
                Text = 'Log Mojo (seconds)',
                Tooltip = 'logs every x seconds for Mojo/rebirth farm',
            
                Placeholder = 'Log Mojo (seconds)', 
        
                Callback = function(Value)
                    if tonumber(Value) then
                        LogTimeMojo = tonumber(Value)
                        Library:Notify("Set log time to " .. tostring(LogTimeMojo))
                    else
                        Library:Notify("Please input a number instead of a string value for LogTimeMojo")
                    end
                end
            })
        
            -- Fruit Selection
            AutoPlantBox:AddDropdown('fruit selector', {
                Values = {'Bloodfruit', 'Bluefruit', 'Jelly', 'Berry', 'Lemon', 'Pumpkin', 'Orange', 'Apple','Strangefruit','Oddberry','Prickly Pear','Strawberry','Banana','Coconut',"Corn"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Fruits',
                Tooltip = 'Fruits used for Auto Plant', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    SelectedFruit = Value
                    CurrentFruit = tostring(Value)
                    Library:Notify("One fruit selected " .. tostring(CurrentFruit))
                end
            })
            
            -- auto gold farm
            goldAutofarmBox:AddToggle('Gold Farm', {
                Text = 'Gold Farm',
                Default = false,
                Tooltip = 'Toggles Gold Farm', 
                Callback = function(Value)
                    GoldFarm = Value
                    LastGoldFarm = tick()
                    TotalGoldFarm = tick()
                end
            })
        
            goldAutofarmBox:AddDropdown('Movement Method', {
                Values = {"Tween", "WalkTo [BROKEN]"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Movement Method',
                Tooltip = 'how u move ', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    MovementMethod = Value
                end
            })
        
            goldAutofarmBox:AddDivider()
        
            goldAutofarmBox:AddToggle('Break Only Ice', {
                Text = 'Break Only Ice',
                Default = false,
                Tooltip = 'Only breaks the ice instead of the gold [Allows stacking]', 
                Callback = function(Value)
                    BreakIceInstead = Value
                end
            })
        
            goldAutofarmBox:AddToggle('Auto Cook Gold', {
                Text = 'Auto Cook Gold',
                Default = false,
                Tooltip = 'auto cooks gold for u', 
                Callback = function(Value)
                    AutoCookGold = Value
                end
            })
        
            goldAutofarmBox:AddToggle('Auto Press Coins', {
                Text = 'Auto Press Coins',
                Default = false,
                Tooltip = 'Toggles Gold Farm', 
                Callback = function(Value)
                    AutoPressCoins = Value
                end
            })
        
            goldAutofarmBox:AddToggle('Auto Collect Coins', {
                Text = 'Auto Collect Coins',
                Default = false,
                Tooltip = 'collects coins u pressed automatically', 
                Callback = function(Value)
                    AutoCollectCoins = Value
                end
            })
        
            -- Auto Plant
            
            AutoPlantBox:AddToggle('Auto Plant', {
                Text = 'Auto Plant',
                Default = false,
                Tooltip = 'Toggle on/off Auto Plant', 
                Callback = function(Value)
                    AutoPlant = Value
                end
            })
        
            AutoPlantBox:AddSlider('Plant Fruits Range', {
                Text = 'Plant Fruits Range',
                Default = 75,
                Min = 0,
                Max = 500,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    PlantFruitRange = Value
                end
            })
            
            AutoHarvestBox:AddToggle('Auto Harvest', {
                Text = 'Auto Harvest',
                Default = false,
                Tooltip = 'Toggle on/off Auto Harvest', 
                Callback = function(Value)
                    AutoHarvest = Value
                end
            })      
            AutoHarvestBox:AddToggle('Uni Auto Harvest', {
                Text = 'Universal Auto Harvest',
                Default = false,
                Tooltip = 'Harvests any fruit type', 
                Callback = function(Value)
                    UniversalAutoHarvest = Value
                end
            })
            AutoHarvestBox:AddSlider('Collect Fruit Range', {
                Text = 'Collect Fruit Range',
                Default = 75,
                Min = 0,
                Max = 500,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    CollectFruitRange = Value
                end
            })
            
            tweenfarmbox:AddToggle('Auto Farm', {
                Text = 'Auto Farm',
                Default = false,
                Tooltip = 'Toggle on/off Auto Farm', 
                Callback = function(Value)
                    AutoFarm = Value
                    LastPlantFarm = tick()
                    TotalPlantFarm = tick()
                end
            })
            
            tweenfarmbox:AddSlider('Tween Speed', {
                Text = 'Tween Speed',
                Default = 12,
                Min = 1,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    TweenSpeed = Value
                end
            })
        
            
        
            
            local IsTweening = false
            local T = nil
            local T2 = nil
            local TweeningToPlantBox = nil
            local TweeningToBush = nil
        
            
            local getPlantBoxesInRange2 = LPH_NO_VIRTUALIZE(function(d, FRUIT_NAME)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Deployables") then
                    for i,v in pairs(workspace.Deployables:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil and tostring(v) == "Plant Box" and not v:FindFirstChild(FRUIT_NAME) then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance <= maxDistance then
                                Closest = v
                                maxDistance = Distance
                            end
                        end
                    end
                end
                return Closest,maxDistance
            end)
            
            local getPlantBoxesInRange = LPH_NO_VIRTUALIZE(function(d, FRUIT_NAME)
                local Closest, maxDistance = nil, d
                local In_Dist = {}
                if workspace:FindFirstChild("Critters") then
                    for i,v in pairs(workspace.Deployables:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil and tostring(v) == "Plant Box" and not v:FindFirstChild(FRUIT_NAME) then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance < maxDistance then
                                local faketbl = {}
                                faketbl.model = v
                                faketbl.distance = Distance
                                table.insert(In_Dist, faketbl)
                            end
                        end
                    end
                end
                return In_Dist
            end)
            
            local getClosestBerryBushes = LPH_NO_VIRTUALIZE(function(distance, berry)
                local closest = nil
                local maxdistance = distance
                for i,v in pairs(workspace:GetChildren()) do
                    if v:IsA("Model") and v.PrimaryPart then
                        if v.Name == SelectedFruit .. " Bush" or v.Name == SelectedFruit .. " Tree" or v.Name == SelectedFruit .. " Crop" or v.Name == SelectedFruit .. " Bushel" or (SelectedFruit == "Prickly Pear" and v.Name == "Pear Cacti") or v.Name == SelectedFruit .. " Patch Crop" then
                            local mag = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if mag < maxdistance then
                                closest = v
                                maxdistance = mag
                            end
                        end
                    end
                end
                return closest, maxdistance
            end)
        
            tweenfarmbox:AddButton({
                Text = 'Create Farm',
                Func = function()
                    local vvv = game:GetService("Players").LocalPlayer 
                    local RootPart = vvv.Character.HumanoidRootPart
                    local cframe = RootPart.CFrame
                    
                    local Remote = Packets['PlaceStructure']['send']
                    
                    local coordinates = {
                        Vector3.new(7, -3, -7),
                        Vector3.new(0, -3, -14),
                        Vector3.new(0, -3, -21),
                        Vector3.new(0, -3, -28),
                        Vector3.new(0, -3, -35),
                        Vector3.new(0, -3, -42),
                        Vector3.new(0, -3, -49),
                        Vector3.new(0, -3, 7),
                        Vector3.new(0, -3, 14),
                        Vector3.new(0, -3, 21),
                        Vector3.new(0, -3, 28),
                        Vector3.new(0, -3, 35),
                        Vector3.new(0, -3, 42),
                        Vector3.new(0, -3, 49),
                        -- Missing plant box here
                        Vector3.new(7, -3, -7),
                        Vector3.new(7, -3, -14),
                        Vector3.new(7, -3, -21),
                        Vector3.new(7, -3, -28),
                        Vector3.new(7, -3, -35),
                        Vector3.new(7, -3, -42),
                        Vector3.new(7, -3, -49),
                        Vector3.new(7, -3, 7),
                        Vector3.new(7, -3, 14),
                        Vector3.new(7, -3, 21),
                        Vector3.new(7, -3, 28),
                        Vector3.new(7, -3, 35),
                        Vector3.new(7, -3, 42),
                        Vector3.new(7, -3, 49),
                        Vector3.new(7, -3, 0),
                        Vector3.new(0, -3, -7),
                        Vector3.new(-7, -3, -7),
                        Vector3.new(-7, -3, -14),
                        Vector3.new(-7, -3, -21),
                        Vector3.new(-7, -3, -28),
                        Vector3.new(-7, -3, -35),
                        Vector3.new(-7, -3, -42),
                        Vector3.new(-7, -3, -49),
                        Vector3.new(-7, -3, 7),
                        Vector3.new(-7, -3, 14),
                        Vector3.new(-7, -3, 21),
                        Vector3.new(-7, -3, 28),
                        Vector3.new(-7, -3, 35),
                        Vector3.new(-7, -3, 42),
                        Vector3.new(-7, -3, 49),
                        Vector3.new(-7, -3, 0),
                        Vector3.new(14, -3, -7),
                        Vector3.new(14, -3, -14),
                        Vector3.new(14, -3, -21),
                        Vector3.new(14, -3, -28),
                        Vector3.new(14, -3, -35),
                        Vector3.new(14, -3, -42),
                        Vector3.new(14, -3, -49),
                        Vector3.new(14, -3, 7),
                        Vector3.new(14, -3, 14),
                        Vector3.new(14, -3, 21),
                        Vector3.new(14, -3, 28),
                        Vector3.new(14, -3, 35),
                        Vector3.new(14, -3, 42),
                        Vector3.new(14, -3, 49),
                        Vector3.new(14, -3, 0),
                        Vector3.new(-14, -3, -7),
                        Vector3.new(-14, -3, -14),
                        Vector3.new(-14, -3, -21),
                        Vector3.new(-14, -3, -28),
                        Vector3.new(-14, -3, -35),
                        Vector3.new(-14, -3, -42),
                        Vector3.new(-14, -3, -49),
                        Vector3.new(-14, -3, 7),
                        Vector3.new(-14, -3, 14),
                        Vector3.new(-14, -3, 21),
                        Vector3.new(-14, -3, 28),
                        Vector3.new(-14, -3, 35),
                        Vector3.new(-14, -3, 42),
                        Vector3.new(-14, -3, 49),
                        Vector3.new(-14, -3, 0),
                        Vector3.new(21, -3, -7),
                        Vector3.new(21, -3, -14),
                        Vector3.new(21, -3, -21),
                        Vector3.new(21, -3, -28),
                        Vector3.new(21, -3, -35),
                        Vector3.new(21, -3, -42),
                        Vector3.new(21, -3, -49),
                        Vector3.new(21, -3, 7),
                        Vector3.new(21, -3, 14),
                        Vector3.new(21, -3, 21),
                        Vector3.new(21, -3, 28),
                        Vector3.new(21, -3, 35),
                        Vector3.new(21, -3, 42),
                        Vector3.new(21, -3, 49),
                        Vector3.new(21, -3, 0),
                        Vector3.new(-21, -3, -7),
                        Vector3.new(-21, -3, -14),
                        Vector3.new(-21, -3, -21),
                        Vector3.new(-21, -3, -28),
                        Vector3.new(-21, -3, -35),
                        Vector3.new(-21, -3, -42),
                        Vector3.new(-21, -3, -49),
                        Vector3.new(-21, -3, 7),
                        Vector3.new(-21, -3, 14),
                        Vector3.new(-21, -3, 21),
                        Vector3.new(-21, -3, 28),
                        Vector3.new(-21, -3, 35),
                        Vector3.new(-21, -3, 42),
                        Vector3.new(-21, -3, 49),
                        Vector3.new(-21, -3, 0),
                        Vector3.new(28, -3, -7),
                        Vector3.new(28, -3, -14),
                        Vector3.new(28, -3, -21),
                        Vector3.new(28, -3, -28),
                        Vector3.new(28, -3, -35),
                        Vector3.new(28, -3, -42),
                        Vector3.new(28, -3, -49),
                        Vector3.new(28, -3, 7),
                        Vector3.new(28, -3, 14),
                        Vector3.new(28, -3, 21),
                        Vector3.new(28, -3, 28),
                        Vector3.new(28, -3, 35),
                        Vector3.new(28, -3, 42),
                        Vector3.new(28, -3, 49),
                        Vector3.new(28, -3, 0),
                        Vector3.new(-28, -3, -7),
                        Vector3.new(-28, -3, -14),
                        Vector3.new(-28, -3, -21),
                        Vector3.new(-28, -3, -28),
                        Vector3.new(-28, -3, -35),
                        Vector3.new(-28, -3, -42),
                        Vector3.new(-28, -3, -49),
                        Vector3.new(-28, -3, 7),
                        Vector3.new(-28, -3, 14),
                        Vector3.new(-28, -3, 21),
                        Vector3.new(-28, -3, 28),
                        Vector3.new(-28, -3, 35),
                        Vector3.new(-28, -3, 42),
                        Vector3.new(-28, -3, 49),
                        Vector3.new(-28, -3, 0),
                        Vector3.new(35, -3, -7),
                        Vector3.new(35, -3, -14),
                        Vector3.new(35, -3, -21),
                        Vector3.new(35, -3, -28),
                        Vector3.new(35, -3, -35),
                        Vector3.new(35, -3, -42),
                        Vector3.new(35, -3, -49),
                        Vector3.new(35, -3, 7),
                        Vector3.new(35, -3, 14),
                        Vector3.new(35, -3, 21),
                        Vector3.new(35, -3, 28),
                        Vector3.new(35, -3, 35),
                        Vector3.new(35, -3, 42),
                        Vector3.new(35, -3, 49),
                        Vector3.new(35, -3, 0),
                        Vector3.new(-35, -3, -7),
                        Vector3.new(-35, -3, -14),
                        Vector3.new(-35, -3, -21),
                        Vector3.new(-35, -3, -28),
                        Vector3.new(-35, -3, -35),
                        Vector3.new(-35, -3, -42),
                        Vector3.new(-35, -3, -49),
                        Vector3.new(-35, -3, 7),
                        Vector3.new(-35, -3, 14),
                        Vector3.new(-35, -3, 21),
                        Vector3.new(-35, -3, 28),
                        Vector3.new(-35, -3, 35),
                        Vector3.new(-35, -3, 42),
                        Vector3.new(-35, -3, 49),
                        Vector3.new(-35, -3, 0),
                        Vector3.new(42, -3, -7),
                        Vector3.new(42, -3, -14),
                        Vector3.new(42, -3, -21),
                        Vector3.new(42, -3, -28),
                        Vector3.new(42, -3, -35),
                        Vector3.new(42, -3, -42),
                        Vector3.new(42, -3, -49),
                        Vector3.new(42, -3, 7),
                        Vector3.new(42, -3, 14),
                        Vector3.new(42, -3, 21),
                        Vector3.new(42, -3, 28),
                        Vector3.new(42, -3, 35),
                        Vector3.new(42, -3, 42),
                        Vector3.new(42, -3, 49),
                        Vector3.new(42, -3, 0),
                        Vector3.new(-42, -3, -7),
                        Vector3.new(-42, -3, -14),
                        Vector3.new(-42, -3, -21),
                        Vector3.new(-42, -3, -28),
                        Vector3.new(-42, -3, -35),
                        Vector3.new(-42, -3, -42),
                        Vector3.new(-42, -3, -49),
                        Vector3.new(-42, -3, 7),
                        Vector3.new(-42, -3, 14),
                        Vector3.new(-42, -3, 21),
                        Vector3.new(-42, -3, 28),
                        Vector3.new(-42, -3, 35),
                        Vector3.new(-42, -3, 42),
                        Vector3.new(-42, -3, 49),
                        Vector3.new(-42, -3, 0),
                    }
                    
                    for _, position in ipairs(coordinates) do
                        Remote(
                            cframe*position,
                            "Plant Box",
                            0,
                            false
                        )
                        task.wait(0.3)
                    end
                end,
                DoubleClick = false,
                Tooltip = 'Creates a farm'
            })
            -- Auto heal
            AutoHealBox:AddDropdown('Auto Heal Fruits', {
                Values = {'Bloodfruit', 'Bluefruit', 'Jelly', 'Berry', 'Lemon', 'Pumpkin', 'Orange', 'Apple','Strangefruit','Oddberry','Prickly Pear','Strawberry','Banana','Coconut'},
                Default = 1, -- number index of the value / string
                Multi = true, -- true / false, allows multiple choices to be selected
            
                Text = 'Fruits',
                Tooltip = 'fruits used to heal', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    FruitToEat = Value
                end
            })
        
            -- performance
            PerformanceBox:AddDropdown('Script Performance', {
                Values = {"Default", "Performant"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Script Performance',
                Tooltip = 'Default = faster but laggy, Performance = slower but no lag', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    ScriptMode = tostring(Value)
                end
            })
            
            AutoHealBox:AddToggle('Auto Heal', {
                Text = 'Auto Heal',
                Default = false,
                Tooltip = 'Toggle on/off Auto Heal', 
                Callback = function(Value)
                    AutoHeal = Value
                end
            })
            
            AutoHealBox:AddSlider('Heal at health%', {
                Text = 'Heal at health%',
                Default = 75,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoHealAt = Value
                end
            })
        
            AutoHealBox:AddSlider('Heal Multiplier', {
                Text = 'Heal Multiplier',
                Default = 1,
                Min = 1,
                Max = 5,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HealLoop = Value
                end
            })
            AutoEatBox:AddDropdown('Auto Eat Fruit', {
                Values = {  'Bloodfruit', 'Bluefruit', 'Berry', 'Strangefruit', 'Orange', 'Lemon', 'Cooked Meat', 'Cooked Fish','Jelly', 'Sunfruit', 'Apple', 'Grain Mush','Oddberry','Strawberry','Banana','Prickly Pear'},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Eat Fruit',
                Tooltip = 'Fruit to auto eat', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    autoeatfood = Value
                end
            })
            AutoEatBox:AddSlider('Eat at Food%', {
                Text = 'Eat at Food%',
                Default = 0.7,
                Min = 0,
                Max = 1,
                Rounding = 1,
                Compact = false,
            
                Callback = function(Value)
                    autoeatpercentage = Value
                end
            })
            
            AutoEatBox:AddToggle('Auto Eat', {
                Text = 'Auto Eat',
                Default = false,
                Tooltip = 'Toggle on/off Auto Eat', 
                Callback = function(Value)
                    autoeat = Value
                end
            })
            -- waste eat
            WasteBox:AddDropdown('Drain Fruit', {
                Values = { 'Bloodfruit', 'Bluefruit', 'Berry', 'Strangefruit', 'Lemon', 'Cooked Meat', 'Cooked Fish','Jelly', 'Sunfruit', 'Apple', 'Grain Mush'},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Drain Fruit',
                Tooltip = 'Fruit to drain', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    wastefruit = Value
                end
            })
            WasteBox:AddSlider('Eat at Fruit%', {
                Text = 'Fruit # to drain at',
                Default = 1000,
                Min = 0,
                Max = 5000,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    wastefruitnumber = Value
                end
            })
            
            WasteBox:AddToggle('Auto Eat2', {
                Text = 'Drain Fruit',
                Default = false,
                Tooltip = 'Toggle on/off Drain Fruit', 
                Callback = function(Value)
                    WasteEat = Value
                end
            })
            -- walkspeed / local player shit
            LocalGroupBox:AddToggle('Walk Speed', {
                Text = 'Walk Speed',
                Default = false,
                Tooltip = 'Modifies your walkspeed', 
                Callback = function(Value)
                    WalkSpeedToggled = Value
                end
            })
            
            LocalGroupBox:AddSlider('Walk Speed Value', {
                Text = 'Walk Speed Value',
                Default = 16,
                Min = 16,
                Max = 25,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    WalkSpeedValue = Value
                end
            })
        
            LocalGroupBox:AddToggle('Jump Power', {
                Text = 'Jump Power',
                Default = false,
                Tooltip = 'Jump Power', 
                Callback = function(Value)
                    JumpPowerToggled = Value
                end
            })
            
            LocalGroupBox:AddSlider('Jump Power Value', {
                Text = 'Jump Power Value',
                Default = 7,
                Min = 1,
                Max = 150,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    JumpPowerValue = Value
                end
            })
        
            LocalGroupBox:AddToggle('Mountain Climber', {
                Text = 'Mountain Climber',
                Default = false,
                Tooltip = 'climbs mountains easily', 
                Callback = function(Value)
                    mountainclimber = Value
                end
            })
        
            LocalGroupBox:AddToggle('Infinite Jump', {
                Text = 'Infinite Jump',
                Default = false,
                Tooltip = 'infinite jump', 
                Callback = function(Value)
                    InfiniteJump = Value
                end
            })
        
            LocalGroupBox:AddToggle('Character Noclip', {
                Text = 'Character Noclip',
                Default = false,
                Tooltip = 'makes u noclip so u can walk through certain objects (ANTICHEAT)', 
                Callback = function(Value)
                    PlayerNoClip = Value
                end
            })
        
            LocalGroupBox:AddDivider()
            
            LocalGroupBox:AddToggle('Flight', {
                Text = 'Flight',
                Default = false,
                Tooltip = 'Hold space with noclip on and hopefully you get lucky and clip through', 
                Callback = function(Value)
                    FlyToggle = Value
                end
            })
        
            LocalGroupBox:AddSlider('Flight Speed', {
                Text = 'Flight Speed',
                Default = 1000,
                Min = 0,
                Max = 2500,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    FlySpeed = Value
                end
            })
            
            -- view player
            viewPlayerBox:AddToggle('Enable Spectate', {
                Text = 'Enable Spectate',
                Default = false,
                Tooltip = 'Enables Spectating Players', 
                Callback = function(Value)
                    SpectatePlayerToggle = Value
                end
            })
        
            viewPlayerBox:AddInput('Player Name', {
                Default = 'Player Name',
                Numeric = false,
                Finished = false,
            
                Text = 'Player Name',
                Tooltip = 'Player Name to Spectate',
            
                Placeholder = 'Player Name', 
        
                Callback = function(Value)
                    CurrentPlayerFindString = tostring(Value)
                end
            })
        
        
            -- kill auras
            KillAuraBox:AddToggle('Auto-Kill Critters', {
                Text = 'Auto-Kill Critters',
                Default = false,
                Tooltip = 'kills critters around u', 
                Callback = function(Value)
                    AutoKillCritters = Value
                end
            })
            
            KillAuraBox:AddSlider('Critters Range', {
                Text = 'Critters Range',
                Default = 12,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoKillCrittersRange = Value
                end
            })
            
            -- combat
            CombatBox:AddToggle('Kill Aura Players', {
                Text = 'Kill Aura Players',
                Default = false,
                Tooltip = 'kill auras', 
                Callback = function(Value)
                    KillAuraPlayers = Value
                end
            })
            
            CombatBox:AddSlider('Kill Aura Range', {
                Text = 'Kill Aura Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    KillAuraPlayersRange = Value
                end
            })
            
            CombatBox:AddToggle('Use Slash Animation', {
                Text = 'Use Slash Animation',
                Default = false,
                Tooltip = 'uses slash animation', 
                Callback = function(Value)
                    UseAnimation = Value
                end
            })
        
            CombatBox:AddDivider()
            
            CombatBox:AddToggle('Hitbox Expander', {
                Text = 'Hitbox Expander',
                Default = false,
                Tooltip = 'extends htiboxes', 
                Callback = function(Value)
                    HitboxExpander = Value
                end
            })
            
            
            CombatBox:AddSlider('Hitbox Range', {
                Text = 'Kill Aura Range',
                Default = 12,
                Min = 0,
                Max = 12,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HitboxExpanderRange = Value
                end
            })
            
            CombatBox:AddToggle('Hitbox Expander Visible', {
                Text = 'Hitbox Expander Visible',
                Default = false,
                Tooltip = 'extends htiboxes Visible', 
                Callback = function(Value)
                    HitboxExpanderShown = Value
                end
            })
        
            CombatBox:AddToggle('Head Size', {
                Text = 'Head Size',
                Default = false,
                Tooltip = 'headsize', 
                Callback = function(Value)
                    HeadSizeToggle = Value
                end
            })
            
            
            CombatBox:AddSlider('Head Size Range', {
                Text = 'Head Size Range',
                Default = 6,
                Min = 0,
                Max = 6,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    HeadSizeVariable = Value
                end
            })
            
        
            CombatBox:AddDivider()
        
            CombatBox:AddToggle('Spoof Projectile Hit', {
                Text = 'Spoof Projectile Hit',
                Default = false,
                Tooltip = 'spoofs the object u hit', 
                Callback = function(Value)
                    SpoofPartToggle = Value
                end
            })
            CombatBox:AddDropdown('Spoof Part', {
                Values = {"Head", "HumanoidRootPart"},
                Default = 1, -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Spoof Part',
                Tooltip = 'spoofed part for spoofer', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    SpoofPart = Value
                end
            })
            CombatBox:AddDivider()
        
        
            
            CombatBox:AddToggle('Lock Player Toggle', {
                Text = 'Lock Player Toggle',
                Default = false,
                Tooltip = 'makes it so lock player works', 
                Callback = function(Value)
                    lockplayerallowed = Value
                end
            })
        
            CombatBox:AddSlider('Lock Range', {
                Text = 'Lock Range',
                Default = 10,
                Min = 10,
                Max = 30,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    lockrange = Value
                end
            })
        
            CombatBox:AddLabel('Auto Lock Nearest Player'):AddKeyPicker('KeyPicker', {
                Default = 'R', 
                SyncToggleState = false,
                Mode = 'Toggle',
                Text = 'Auto lockpick safes',
                NoUI = true, 
            
                -- Occurs when the keybind is clicked, Value is `true`/`false`
                Callback = function(Value)
                    lockplayer = Value
                end,
            
                -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
                ChangedCallback = function(New)
                    print('auto lock keybind changed to ', New)
                end
            })
        
        
        
            
            local findNearestPlayer = LPH_JIT_MAX(function()
                local nearestPlayer
                local nearestDistance = lockrange
                for _, otherPlayer in ipairs(Players:GetPlayers()) do
                    if otherPlayer ~= Player and otherPlayer.Character then
                        local distance = (otherPlayer.Character:FindFirstChild("HumanoidRootPart") and (otherPlayer.Character.HumanoidRootPart.Position - Player.Character.HumanoidRootPart.Position).Magnitude) or math.huge
                        if distance < nearestDistance then
                            nearestPlayer = otherPlayer
                            nearestDistance = distance
                        end
                    end
                end
                return nearestPlayer
            end)
            
            local faceNearestPlayer = LPH_JIT_MAX(function()
                local nearestPlayer = findNearestPlayer()
                if nearestPlayer then
                    local direction = (nearestPlayer.Character.HumanoidRootPart.Position - Player.Character.HumanoidRootPart.Position).unit
                    local horizontalDirection = Vector3.new(direction.X, 0, direction.Z).Unit
                    Player.Character.HumanoidRootPart.CFrame = CFrame.lookAt(Player.Character.HumanoidRootPart.Position,Player.Character.HumanoidRootPart.Position + horizontalDirection,Vector3.new(0, 1, 0))
                end
            end)
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait() do
                        if lockplayer and lockplayerallowed then
                            if not chatBarFocused then
                                faceNearestPlayer()
                            end
                        end
                        if Library.Unloaded then break end
                    end
                end)
            end)()
        
            CombatBox:AddDivider()
        
            CombatBox:AddToggle('Auto-Bolt Nearby Player', {
                Text = 'Auto-Bolt Nearby Player',
                Default = false,
                Tooltip = 'if (voodoo bolt) it shoots nearest player', 
                Callback = function(Value)
                    VoodooBoltNearby = Value
                end
            })
        
            CombatBox:AddToggle('Auto Voodoo Shield', {
                Text = 'Auto Voodoo Shield',
                Default = false,
                Tooltip = 'if (hp <= shield_hp) then use voodoo shield.', 
                Callback = function(Value)
                    AutoVoodooShield = Value
                end
            })
        
            CombatBox:AddSlider('Shield At % Health', {
                Text = 'Shield At % Health',
                Default = 75,
                Min = 0,
                Max = 100,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoVoodooShieldHealth = Value
                end
            })
        
            CombatBox:AddDivider()
        
            CombatBox:AddToggle('Hut No-Clip', {
                Text = 'Hut No-Clip',
                Default = false,
                Tooltip = 'makes it so u can walk through huts', 
                Callback = function(Value)
                    HubNoClip = Value
                end
            })
        
            CombatBox:AddToggle('Anti Dock', {
                Text = 'Anti Dock',
                Default = false,
                Tooltip = 'Anti Dock', 
                Callback = function(Value)
                    AntiDock = Value
                end
            })
            
            -- boats
            BoatModifier:AddToggle('Boat Speed', {
                Text = 'Boat Speed',
                Default = false,
                Tooltip = 'modifies the (raft/sail/boat) speed the user is on', 
                Callback = function(Value)
                    BoatSpeedToggle = Value
                end
            })
        
            BoatModifier:AddSlider('Boat Speed Strength', {
                Text = 'Boat Speed Strength',
                Default = 15,
                Min = 0,
                Max = 50,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    BoatSpeed = Value
                end
            })
        
            -- farming
            FarmingBox:AddToggle('Auto-Mine Resource', {
                Text = 'Auto Mine',
                Default = false,
                Tooltip = 'auto mine resources', 
                Callback = function(Value)
                    AutoMineResources = Value
                end
            })
            
            FarmingBox:AddSlider('Mine Range', {
                Text = 'Mine Range',
                Default = 20,
                Min = 0,
                Max = 20,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AutoMineResourcesRange = Value
                end
            })
            
            FarmingBox:AddToggle('Auto Pickup', {
                Text = 'Auto Pickup',
                Default = false,
                Tooltip = 'auto pickup resources', 
                Callback = function(Value)
                    AutoPickup = Value
                end
            })
            
            FarmingBox:AddSlider('Auto-Collect Range', {
                Text = 'Auto Pickup Range',
                Default = 25,
                Min = 0,
                Max = 25,
                Rounding = 0,
                Compact = false,
            
                Callback = function(Value)
                    AuotPickupRange = Value
                end
            })
            FarmingBox:AddToggle('Auto Drop Items', {
                Text = 'Auto Drop Items',
                Default = false,
                Tooltip = 'Automatically drop items', 
                Callback = function(Value)
                    AutoDrop = Value
                end
            })
            FarmingBox:AddInput('Item Name', {
                Default = 'Item Name',
                Numeric = false, -- true / false, only allows numbers
                Finished = false, -- true / false, only calls callback when you press enter
            
                Text = 'Item Name',
                Tooltip = 'Item to automatically drop', -- Information shown when you hover over the textbox
            
                Placeholder = 'Type item name', -- placeholder text when the box is empty
                -- MaxLength is also an option which is the max length of the text
            
                Callback = function(AutoDropItem)
                    ItemToDrop = AutoDropItem
                end
            })
            
            
            -- esp
            OreESPBox:AddToggle('Ore ESP', {
                Text = 'Ore ESP',
                Default = false,
                Tooltip = 'ore esp for ores', 
                Callback = function(Value)
                    OreESPToggle = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Distance', {
                Text = 'Show Ore Distance',
                Default = false,
                Tooltip = 'show distance ore esp for ores', 
                Callback = function(Value)
                    ShowOreESPDistance = Value
                end
            })
            
            OreESPBox:AddToggle('Show Ore Health', {
                Text = 'Show Ore Health',
                Default = false,
                Tooltip = 'shows health', 
                Callback = function(Value)
                    ShowOreHealth = Value
                end
            })
            
            OreESPBox:AddDropdown('Shown Ores', {
                Values = {
                    "Coal Node",
                    "Iron Node",
                    "Gold Node",
                    "Adurite Rich Rock",
                    "Adurite Rock",
                    "Crystal Lode",
                    "Meteor Rock",
                    "Emerald Lode",
                    "Ancient Tree",
                    "Hateful God",
                    "Miserable God",
                    "Lonely God",
                    "Old God",
                    "Sleeping God",
                    "Furious God",
                },
                Default = 1,
                Multi = true,
            
                Text = 'Shown Ores',
                Tooltip = 'shows selected ores on esp', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    ShownOres = Value
                end
            })
            
            -- player esp
            PlayerESPBox:AddToggle('Player ESP', {
                Text = 'Player ESP',
                Default = false,
                Tooltip = 'shows player esp', 
                Callback = function(Value)
                    PlayerESPToggle = Value
                end
                }):AddColorPicker('Player ESP Color', {
                    Default = Color3.fromRGB(148, 50, 205), 
                    Title = 'Choose Player ESP Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        PlayerESPColor = Value
                    end
                })
            
                PlayerESPBox:AddToggle('Show Health', {
                    Text = 'Show Health',
                    Default = false,
                    Tooltip = 'show health fr', 
                    Callback = function(Value)
                        HealthESP = Value
                    end
                })
                
                PlayerESPBox:AddToggle('Use Tribe Color', {
                    Text = 'Use Tribe Color',
                    Default = false,
                    Tooltip = 'showst ribe color instead', 
                    Callback = function(Value)
                        ShowTribeColor = Value
                    end
                })
            
                PlayerESPBox:AddDivider()
            
                PlayerESPBox:AddToggle('Show Armor', {
                    Text = 'Show Armor',
                    Default = false,
                    Tooltip = 'shows player esp', 
                    Callback = function(Value)
                        ShowArmor = Value
                    end
                }):AddColorPicker('Armor Color', {
                    Default = ArmorColor, 
                    Title = 'Armor Color', 
                    Transparency = nil,
            
                    Callback = function(Value)
                        ArmorColor = Value
                    end
                })
                
                PlayerESPBox:AddSlider('Armor ESP Size', {
                    Text = 'Armor ESP Size',
                    Default = 12,
                    Min = 0,
                    Max = 20,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        ArmorSize = Value
                    end
                })
            
                PlayerESPBox:AddDropdown('Armor Position', {
                    Values = {
                        "Left",
                        "Right",
                        "Down"
                    },
                    Default = 3,
                    Multi = false,
                
                    Text = 'Armor Position',
                    Tooltip = 'changes esp location', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        ArmorPosition = Value
                    end
                })
            
                -- sun autofarm thingy
                IslandAutoFarm:AddToggle('Sun AutoFarm', {
                    Text = 'Sun AutoFarm',
                    Default = false,
                    Tooltip = 'autofarms sun for u', 
                    Callback = function(Value)
                        SunIslandFarm = Value
                    end
                })
        
                IslandAutoFarm:AddToggle('Kill Ancient Tree', {
                    Text = 'Kill Ancient Tree',
                    Default = false,
                    Tooltip = 'adds ancient tree into the auto farm', 
                    Callback = function(Value)
                        KillAncientTree = Value
                    end
                })
                IslandAutoFarm:AddSlider('XP Tween Speed', {
                    Text = 'XP Farm Tween Speed',
                    Default = 8,
                    Min = 0,
                    Max = 12,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        xpfarmtween = Value
                    end
                })
            
            -- functions
            local getClosestCritter = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Critters") then
                    for i,v in pairs(workspace.Critters:GetChildren()) do
                        if v:IsA("Model") and v.PrimaryPart ~= nil then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
        
            local AllowedForXP = {
                "Sun Tree",
                "Sun Shrub",
            }
        
            local Vector = {
                [1] = Vector3.new(-552, 310.2, -1204.6),
                [2] = Vector3.new(-565.07, 308.58, -1200.3),
                [3] = Vector3.new(-561.2, 309.09, -1188.4),
                [4] = Vector3.new(-548.5, 308.6, -1192.7),
            }
        
            local GetClosestCrystalLode = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, CrystalFarmDistance
                for _,v in pairs(workspace.Resources:GetChildren()) do
                    if tostring(v) == "Crystal Lode" and v.PrimaryPart ~= nil then
                        local Dist = (Player.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                        if Dist <= MaxDistance then
                            Closest = v
                            MaxDistance = Dist
                        end
                    end
                end
                return Closest, MaxDistance
            end)
        
            local GetClosestVectors = LPH_NO_VIRTUALIZE(function(Vectors)
                local Closest, MaxDistance = nil, 1000
                for i,v in pairs(Vectors) do
                    local Dist = (Player.Character.HumanoidRootPart.Position-v).Magnitude
                    if Dist <= MaxDistance then
                        MaxDistance = Dist
                        Closest = v
                    end
                end
                return Closest, MaxDistance
            end)
        
            local encodeData = LPH_NO_VIRTUALIZE(function(data)
                local success, errorcode = pcall(HttpService.JSONEncode, HttpService, data)
                if not success then
                    return false, "failed"
                end
                return errorcode
            end)
            
            local decodeData = LPH_NO_VIRTUALIZE(function(data)
                local success, errorcode = pcall(HttpService.JSONDecode, HttpService, data)
                if not success then
                    return false, "failed"
                end
                return errorcode
            end)
            
            local sortKeysAscending = LPH_NO_VIRTUALIZE(function(a, b)
                return tonumber(a) < tonumber(b)
            end)
        
            local GetClosestSunXP = LPH_NO_VIRTUALIZE(function()
                if KillAncientTree then
                    if not table.find(AllowedForXP, "Ancient Tree") then
                        table.insert(AllowedForXP, "Ancient Tree")
                    end
                else
                    if table.find(AllowedForXP, "Ancient Tree") then
                        table.remove(AllowedForXP, table.find(AllowedForXP, "Ancient Tree"))
                    end
                end
        
                local Closest, MaxDistance = nil, 400
                for _,v in next, workspace.Resources:GetChildren() do
                    if table.find(AllowedForXP, v.Name) and v.PrimaryPart then
                        local Distance = (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position-v.PrimaryPart.Position).Magnitude
                        if Distance <= MaxDistance then
                            MaxDistance = Distance
                            Closest = v
                        end
                    end
                end
                if Closest.Name == "Ancient Tree" then
                    Closest, MaxDistance = GetClosestVectors(Vector)
                end
                return Closest, MaxDistance
            end)
            
            local getClosestPlayer = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if Player and Player.Character then
                    for i,v in pairs(Players:GetPlayers()) do
                        if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and tribeCheck(Player.Character, v.Character) == false then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Character.HumanoidRootPart.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
        
            local getClosestPlayerWithCircle = LPH_NO_VIRTUALIZE(function()
                local Closest, maxDistance = nil, VisualizerRadius
                if Player and Player.Character then
                    for i,v in pairs(Players:GetPlayers()) do
                        if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                            local ScreenPoint = workspace.CurrentCamera:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
                            local vectorDistance = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y)-Vector2.new(ScreenPoint.X,ScreenPoint.Y)).Magnitude
                            if vectorDistance < maxDistance then
                                Closest = v.Character
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
            
            local getClosestResource = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Resources") and Player.Character then
                    for i,v in pairs(workspace.Resources:GetChildren()) do
                        if v:IsA("Model") and (v.PrimaryPart ~= nil or v:FindFirstChild("Totem")) then
                            local p
                            if v.PrimaryPart ~= nil and v.PrimaryPart then
                                p = v.PrimaryPart
                            elseif v:FindFirstChild("Totem") then
                                p = v.Totem
                            end
                            local Distance = (Player.Character.HumanoidRootPart.Position-p.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
            
            local getClosestDrop = LPH_NO_VIRTUALIZE(function(d)
                local Closest, maxDistance = nil, d
                if workspace:FindFirstChild("Items") then
                    for i,v in pairs(workspace.Items:GetChildren()) do
                        if v:IsA("BasePart") and v:FindFirstChild("Pickup") then
                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Position).Magnitude
                            if Distance < maxDistance then
                                maxDistance = Distance
                                Closest = v
                            end
                        end
                    end
                end
                return Closest, maxDistance
            end)
        
            --[[
        
                GOLD AUTO FARM
        
            ]]
        
            local CFrames = {
                [1] = CFrame.new(927, -3, -1384, -0.748627365, 1.24680333e-12, 0.662991047, -5.95079921e-13, 1, -2.55251788e-12, -0.662991047, -2.30541736e-12, -0.748627365),
                [2] = CFrame.new(919.671631, -1.07742345, -1414.90417, 0.444287002, 4.17252225e-13, 0.895884514, -8.76578703e-13, 1, -3.10304422e-14, -0.895884514, -7.71526885e-13, 0.444287002),
                [3] = CFrame.new(941.970032, -2.2911973, -1426.06665, 0.886066914, 2.99214158e-13, -0.463557392, -8.6511312e-15, 1, 6.28937603e-13, 0.463557392, -5.53270483e-13, 0.886066914),
                [4] = CFrame.new(957.867004, -3.00000024, -1394.82922, -0.503059089, 1.51972524e-13, -0.864252031, 3.19310957e-13, 1, -1.00199483e-14, 0.864252031, -2.81005769e-13, -0.503059089),
            }
        
            local ToCook = {
                "Leaves",
                "Wood",
                "Log",
                "Coal",
            }
            
            local Cons = {}
            local Dropping = false
            local CurrentChest = nil
            local Float = nil
        
            
            local GetClosestIceChunk = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 100
                for i,v in pairs(workspace.Resources:GetChildren()) do
                    if tostring(v) == "Ice Chunk" and v:FindFirstChild("Health") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetClosestGoldNode = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 100
                for i,v in pairs(workspace:GetChildren()) do
                    if tostring(v) == "Gold Node" and v:FindFirstChild("Health") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetAllGoldNodes = LPH_NO_VIRTUALIZE(function()
                local Closest = {}
                for i,v in pairs(workspace:GetChildren()) do
                    if tostring(v) == "Gold Node" and v:FindFirstChild("Health") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < 15 then
                            table.insert(Closest, v.PrimaryPart)
                        end
                    end
                end
                return Closest
            end)
            
            local GetClosestCampFire = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 50
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if tostring(v) == "Campfire" and v:FindFirstChild("Interactable") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetClosestChest = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 100
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if tostring(v) == "Chest" and v:FindFirstChild("Contents") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            
            local GetClosestCoinPress = LPH_NO_VIRTUALIZE(function()
                local Closest, MaxDistance = nil, 50
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if tostring(v) == "Coin Press" and v:FindFirstChild("press") then
                        local Mag = (Player.Character.PrimaryPart.Position-v.PrimaryPart.Position).Magnitude
                        if Mag < MaxDistance then
                            Closest = v
                            MaxDistance = Mag
                        end
                    end
                end
                return Closest, MaxDistance
            end)
            
            local GetCoins = LPH_NO_VIRTUALIZE(function()
                return workspace.Items:FindFirstChild("Coin2")
            end)
            
            local GetFullBag = LPH_NO_VIRTUALIZE(function(slider)
                if slider.Size.X.Scale >= 0.9 then
                    return true
                else
                    return false
                end
            end)
            
            local LookAtPart = LPH_NO_VIRTUALIZE(function(part)
                local humanoidRootPart = Player.Character.HumanoidRootPart
                local direction = (part.Position - humanoidRootPart.Position).Unit
                local lookVector = Vector3.new(direction.X, 0, direction.Z)
                humanoidRootPart.CFrame = CFrame.lookAt(humanoidRootPart.Position, humanoidRootPart.Position + lookVector)
            end)
            
            local IceToCFrame = LPH_NO_VIRTUALIZE(function(IcePosition)
                local closestCFrame = nil
                local closestDistance = math.huge
            
                for index, cframe in pairs(CFrames) do
                    local distance = (cframe.Position - IcePosition).Magnitude
                    if distance < closestDistance then
                        closestCFrame = cframe
                        closestDistance = distance
                    end
                end
                return closestCFrame, closestDistance
            end)
            
            --[[
        
                GOLD AUTO FARM MAIN SECTOR
        
            ]]
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.5) do
                        if BreakPoint then break end
                        local s,e = pcall(function()
                            if GoldFarm and Player.Character then
                                local playerGui = Player.PlayerGui
                                local mainGui = playerGui:FindFirstChild("MainGui")
                                local rightPanel = mainGui:FindFirstChild("RightPanel")
                                local inventoryList = rightPanel:FindFirstChild("Inventory"):FindFirstChild("List")
                                local statss = mainGui:FindFirstChild("Panels"):FindFirstChild("Stats")
                                local bag = statss:FindFirstChild("Bag"):FindFirstChild("Slider")
                        
                                local ClosestIce, Distance = GetClosestIceChunk()
                                local BrokenGoldNode, BrokenGoldPosition = GetClosestGoldNode()
                                if ClosestIce and BreakIceInstead --[[and (bag and GetFullBag(bag) == false)]] then
                                    local IceToCFrameMethod, closestDistance = IceToCFrame(ClosestIce.PrimaryPart.Position)
                                    if IceToCFrameMethod then
                                        if BreakIceInstead and ClosestIce:FindFirstChild("Ice") then
                                            if MovementMethod == "Tween" then
                                                TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Distance/10), {CFrame = CFrame.new(Vector3.new(IceToCFrameMethod.Position.X,1.5,IceToCFrameMethod.Position.Z))}):Play()
                                            elseif MovementMethod == "MoveTo" then
                                                Player.Character.Humanoid:MoveTo(ClosestIce:FindFirstChild("Ice").Position)
                                            end
                                            Packets['SwingTool']['send']({
                                                ClosestIce.Ice,
                                            })
                                        end
                                    end
                                end
                                if (bag and GetFullBag(bag) == false) then
                                    if BreakIceInstead == false then
                                        local GoldToCFrame, closestDistance = nil, nil
                                        if BrokenGoldNode then
                                            GoldToCFrame, closestDistance = IceToCFrame(BrokenGoldNode.PrimaryPart.Position)
                                        elseif ClosestIce then
                                            GoldToCFrame, closestDistance = IceToCFrame(ClosestIce.PrimaryPart.Position)
                                        end
                                        if GoldToCFrame then
                                            if MovementMethod == "Tween" then
                                                if BrokenGoldNode then
                                                    TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(BrokenGoldPosition/10), {CFrame = CFrame.new(GoldToCFrame.Position.X,1.5,GoldToCFrame.Position.Z)}):Play()
                                                elseif ClosestIce then
                                                    TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Distance/10), {CFrame = CFrame.new(GoldToCFrame.Position.X, 1.5, GoldToCFrame.Position.Z)}):Play()
                                                end
                                            elseif MovementMethod == "MoveTo" then
                                                if BrokenGoldNode then
                                                    Player.Character.Humanoid:MoveTo(BrokenGoldNode:FindFirstChild("Reference").Position)
                                                elseif ClosestIce then
                                                    Player.Character.Humanoid:MoveTo(ClosestIce:FindFirstChild("Reference").Position)
                                                end
                                            end
                                        end
                                        if ClosestIce then
                                            local AllGold = GetAllGoldNodes()
                                            table.insert(AllGold, ClosestIce.Ice)
                                            Packets['SwingTool']['send'](AllGold)
                                        else
                                            local AllGold = GetAllGoldNodes()
                                            Packets['SwingTool']['send'](AllGold)
                                        end
                                    end
                                else
                                    Library:Notify("You have a full bag, attempting to drop and smelt gold!")
                                end
                                if AutoCookGold and ((bag and GetFullBag(bag) == true) or (not ClosestIce and not BrokenGoldNode)) then
                                    local ClosestCampFire, CampfirePosition = GetClosestCampFire()
                                    if ClosestCampFire and inventoryList:FindFirstChild('Raw Gold') then
                                        if ClosestCampFire:FindFirstChild("Board"):FindFirstChild("Billboard"):FindFirstChild("Backdrop"):FindFirstChild("TextLabel").Text == "0" and inventoryList then
                                            local hasItem = ""
                                            for _,item in pairs(inventoryList:GetChildren()) do
                                                if hasItem == "" and table.find(ToCook, tostring(item)) then
                                                    hasItem = tostring(item)
                                                end
                                            end
                                            if hasItem ~= "" then
                                                Packets['InteractStructure']['send']({
                                                    structure = ClosestCampFire, 
                                                    itemID = ItemIDs["Leaves"],
                                                })
                                                hasItem = ""
                                            end
                                        end
                                        if inventoryList:FindFirstChild('Raw Gold') then
                                            local Chest, Pos = GetClosestChest()
                                            if Chest then
                                                if MovementMethod == "Tween" and Pos > 10 then
                                                    TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Pos/10), {CFrame = CFrame.new(Vector3.new(Chest.PrimaryPart.CFrame.Position.X,1.5,Chest.PrimaryPart.CFrame.Position.Z),Vector3.new(0,0,0))+Vector3.new(4.5,0,4.5)}):Play()
                                                elseif MovementMethod == "MoveTo" then
                                                    Player.Character.Humanoid:MoveTo(Chest:FindFirstChild("Reference").Position)
                                                end
                                                CurrentChest = Chest
                                                Dropping = true 
                                                if Pos <= 10 then
                                                    Packets['DropBagItem']['send'](inventoryList:FindFirstChild('Raw Gold'):GetAttribute("Index"))
                                                end
                                                task.delay(2, function()
                                                    Dropping = false
                                                end)
                                            end
                                        end
                                    end
                                end
                                if AutoPressCoins and inventoryList:FindFirstChild("Gold") then
                                    local ClosestPress = GetClosestCoinPress()
                                    if ClosestPress then
                                        Packets['InteractStructure']['send']({
                                            structure = ClosestPress,
                                            itemID = ItemIDs["Gold"]
                                        })
                                    end
                                end
                                if AutoCollectCoins then
                                    local Coin = GetCoins()
                                    if Coin then
                                        Packets['Pickup']['send'](Coin)
                                    end
                                end
                            end
                        end)
                        if not s then warn(e) end
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                Cons[1] = game:GetService("RunService").Stepped:Connect(function()
                    if GoldFarm then
                        if CurrentChest ~= nil then
                            LookAtPart(CurrentChest.PrimaryPart)
                        end
                        if Float ~= nil then
                            Float.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.new(0, -2.7 ,0)
                        else
                            Float = Instance.new('Part')
                            Float.Name = "No."
                            Float.Parent = Player.Character
                            Float.Transparency = 0.8
                            Float.Size = Vector3.new(2,0.1,2)
                            Float.Anchored = true
                        end
                        Player.Character.HumanoidRootPart.CFrame = CFrame.new(Player.Character.HumanoidRootPart.CFrame.Position.X, 1.5, Player.Character.HumanoidRootPart.CFrame.Position.Z)
                    end
                    if ColorShift then
                        Lighting.ColorShift_Bottom = ColorShiftColor
                        Lighting.ColorShift_Top = ColorShiftColor
                    end
                    if OutDoorAmbient then
                        Lighting.OutdoorAmbient = OutDoorAmbienceColor
                    end
                    if Ambience then
                        Lighting.Ambient = AmbienceColor
                    end
                    if FullBright then
                        Lighting.GlobalShadows = false
                    elseif not FullBright and Lighting.GlobalShadows == false then
                        Lighting.GlobalShadows = true
                    end
                    if NoFog then
                        Lighting.FogEnd = 9e9
                    else
                        Lighting.FogEnd = 2000
                    end
                    if SpectatePlayerToggle then
                        local playerToSpectate = nil
                        for i,v in pairs(Players:GetPlayers()) do
                            if string.find(tostring(v), CurrentPlayerFindString) or string.find(tostring(v.DisplayName), CurrentPlayerFindString) then
                                if v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChild("UpperTorso") and v.Character:FindFirstChild("HumanoidRootPart") then
                                    playerToSpectate = v.Character:FindFirstChildOfClass("Humanoid")
                                    break
                                end
                            end
                        end
                        workspace.CurrentCamera.CameraSubject = playerToSpectate
                    else
                        if workspace.CurrentCamera.CameraSubject ~= Player.Character.Humanoid then
                            workspace.CurrentCamera.CameraSubject = Player.Character.Humanoid
                        end
                    end
                end)
            end)()
                
            LPH_NO_VIRTUALIZE(function()
                Cons[2] = workspace.Items.ChildAdded:Connect(function(Child)
                    if tostring(Child) == "Raw Gold" and not Dropping and GoldFarm then
                        Packets['Pickup']['send'](Child)
                    end
                end)
                
                Cons[3] = workspace.Items.ChildAdded:Connect(function(Child)
                    if tostring(Child) == "Gold" and GoldFarm then
                        Packets['Pickup']['send'](Child)
                    end
                end)
                
                Cons[4] = workspace.Deployables.DescendantAdded:Connect(function(Child)
                    if tostring(Child) == "Gold" and GoldFarm then
                        Packets['Pickup']['send'](Child)
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                for i,v in pairs(workspace.Deployables:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end
                workspace.Deployables.ChildAdded:Connect(function(v)
                    if v:IsA("Model") and v:FindFirstChild("Door") then
                        if HubNoClip then
                            v.Door.CanCollide = false
                            v.Door.Transparency = 0.7
                        end
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while true do
                        local s,e = pcall(function()
                            if CrystalAutoFarm then
                                local ClosestLode, Dist = GetClosestCrystalLode()
                                if ClosestLode and Dist and Player.Character and Player.Character.HumanoidRootPart then
                                    local Tween = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Dist/CrystalTweenSpeed, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {CFrame = ClosestLode.PrimaryPart.CFrame})
                                    Tween:Play()
                                    Tween.Completed:Wait()
                                end
                            end
                        end)
                        if not s then warn(e) end
                        task.wait(1)
                    end
                end)
            end)()
        
            -- inf jump
            local infJumpDebounce = false
            Connections.infjump = UserInputService.JumpRequest:Connect(function()
                if not infJumpDebounce and InfiniteJump then
                    infJumpDebounce = true
                    Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                    task.wait()
                    infJumpDebounce = false
                end
            end)
        
            local food1 = {
                "Bloodfruit",
                "Bluefruit",
                "Berry",
                "Strangefruit",
                "Lemon",
                "Cooked Meat",
                "Jelly",
                "Cooked Fish",
                "Cloudberry",
                "Apple",
                "Sunfruit",
                "Grain Mush"
            }
            
            -- hooks
            LPH_NO_VIRTUALIZE(function()
                local SpoofProjectileHit; SpoofProjectileHit = hookmetamethod(game, "__namecall", function(Self, ...)
                    if not checkcaller() and typeof(Self) == "Instance" and SpoofPartToggle then
                        if (tostring(Self) == "ProjectileImpact" and getnamecallmethod() == "FireServer") then
                            local Args = {...}
                            if (Args[1] and Args[1].Parent and Args[1].Parent[SpoofPart]) then
                                Args[1] = Args[1].Parent[SpoofPart]
                                return Self.FireServer(Self, table.unpack(Args))
                            end
                        end
                    end
                    return SpoofProjectileHit(Self, ...)
                end)
                local antiBanName; antiBanName = hookmetamethod(game, "__namecall", function(Self, ...)
                    if checkcaller() and typeof(Self) == "Instance" and scriptbanprotection then
                        if tostring(Self) == "AdminPanel" then
                            if (getnamecallmethod() == "fireServer" or getnamecallmethod() == "FireServer") then
                                Library.Notify(Library, "⚠️ A script tried to ban your account! [SCRIPT BAN PROTECTION]")
                                return 
                            end
                        end
                    end
                    return antiBanName(Self, ...)
                end)
                local antiBanIndex; antiBanIndex = hookmetamethod(game, "__index", function(Self,Key)
                    if checkcaller() and typeof(Self) == "Instance" and scriptbanprotection then
                        if tostring(Self) == "AdminPanel" then
                            if tostring(string.split(Key, "\0")[1]) == "FireServer" or tostring(string.split(Key, "\0")[1]) == "fireServer" then
                                Library:Notify("⚠️ A script tried to ban your account! [SCRIPT BAN PROTECTION]")
                                return
                            end
                        end
                    end
                    return antiBanIndex(Self,Key)
                end)
            end)()
        
            local FlyVelocity = nil
            LPH_NO_VIRTUALIZE(function()
                Connections.FlightLoop = RunService.RenderStepped:Connect(function()
                    if FlyToggle then
                        if FlyVelocity == nil then
                            FlyVelocity = Instance.new("BodyVelocity")
                            FlyVelocity.Velocity = Vector3.new(0,0,0)
                            FlyVelocity.P = math.huge
                            FlyVelocity.MaxForce = Vector3.new(math.huge,math.huge,math.huge)
                        end
                        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                            setfflag("S2PhysicsSenderRate", "0.01")
                            sethiddenproperty(Player.Character.HumanoidRootPart, "NetworkIsSleeping", true)           
                            Player.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
                            FlyVelocity.Parent = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
                            FlyVelocity.Velocity = Vector3.new(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector*100,FlySpeed,game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector*100)
                            Player.Character.HumanoidRootPart.Velocity = Vector3.new(0,0,0)
                            sethiddenproperty(Player.Character.HumanoidRootPart, "NetworkIsSleeping", false)  
                        else
                            setfflag("S2PhysicsSenderRate", "15")
                            FlyVelocity:Destroy()
                            FlyVelocity = nil
                        end
                    else
                        if FlyVelocity then
                            setfflag("S2PhysicsSenderRate", "15")
                            FlyVelocity:Destroy()
                            FlyVelocity = nil
                        end
                    end
                end)
            end)()
            
            local HarvestDebounce = false
            local PlantDebounce = false
            local MineDebounce = false
            local CollectDebounce = false
            local VoodooDebounce = false
            local Harvested = {}
            
            local ConnectedToWalkSpeed = nil
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.1) do
                        if BreakPoint then break end
                        pcall(function()
        
                        
                        if Player and Player.Character then
                            if WalkSpeedToggled then
                                Player.Character.Humanoid.WalkSpeed = WalkSpeedValue
                                if ConnectedToWalkSpeed == nil then
                                    ConnectedToWalkSpeed = Player.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
                                        Player.Character.Humanoid.WalkSpeed = WalkSpeedValue
                                    end)
                                end
                            else
                                if ConnectedToWalkSpeed ~= nil then
                                    ConnectedToWalkSpeed:Disconnect()
                                    ConnectedToWalkSpeed = nil
                                end
                            end
        
                            if AntiDock then
                                local RayParams = RaycastParams.new()
                                RayParams.FilterDescendantsInstances = {Player.Character}
                                RayParams.FilterType = Enum.RaycastFilterType.Exclude
                                local Ray = workspace:Raycast(Player.Character.HumanoidRootPart.Position, Vector3.new(0, 4, 0), RayParams)
                                if Ray and Ray.Instance and tostring(Ray.Instance) == "StructureWood" then
                                    Player.Character.HumanoidRootPart.CFrame *= CFrame.new(0, 2, 0)
                                end
                            end
        
                            if HubNoClip then
                                for i,v in pairs(workspace.Deployables:GetChildren()) do
                                    if v:IsA("Model") and v:FindFirstChild("Door") and v.Door.CanCollide == true then
                                        if HubNoClip then
                                            v.Door.CanCollide = false
                                            v.Door.Transparency = 0.7
                                        end
                                    end
                                end
                            end
                
                            local Inventory = Player.PlayerGui:FindFirstChild("MainGui"):FindFirstChild("RightPanel"):FindFirstChild("Inventory"):FindFirstChild("List")
                
                            -- kill aura
                            if AutoKillCritters then
                                local crit = getClosestCritter(AutoKillCrittersRange)
                                if crit and crit.PrimaryPart then
                                    Packets['SwingTool']['send']({
                                        crit.PrimaryPart,
                                    })
                                end
                            end
                            -- coin press
                            if coinpress then
                                for _, v in pairs(workspace.Deployables:GetChildren()) do
                                if v.Name == "Coin Press" and (Player.Character.Head.Position - v.PrimaryPart.Position).magnitude < coinpressrange then
                                        Packets['InteractStructure']['send']({
                                            structure = v, 
                                            itemID = ItemIDs["Gold"]
                                        })
                                    end
                                end
                            end
                            -- essence pickup
                            if SunIslandFarm then
                                for i,v in pairs(workspace.Resources:GetChildren()) do
                                    if tostring(v) == "Essence" and (Player.Character.HumanoidRootPart.Position-v.Position).Magnitude < 25 then
                                        Packets['Pickup']['send'](v)
                                    end
                                end
                            end
                            -- mountain climber
                            if mountainclimber then
                                Player.Character.Humanoid.MaxSlopeAngle = 300
                            else
                                Player.Character.Humanoid.MaxSlopeAngle = 46
                            end
        
                            if Inventory then
                                if WasteEat then 
                                    local drain = Inventory[wastefruit].QuantityImage.QuantityText.Text   
                                    if drain and tonumber(drain) >= tonumber(wastefruitnumber) then
                                        Packets['UseBagItem']['send'](Inventory:FindFirstChild(wastefruit):GetAttribute("Index"))
                                        Packets['UseBagItem']['send'](Inventory:FindFirstChild(wastefruit):GetAttribute("Index"))
                                    end
                                end
                            end
        
                            -- combat
                            if KillAuraPlayers then
                                local closest_plr = getClosestPlayer(KillAuraPlayersRange)
                                if closest_plr and closest_plr.Character and closest_plr.Character.PrimaryPart then
                                    if UseAnimation then
                                        local a = ReplicatedStorage.Animations.Slash
                                        if a then 
                                            if not IsAnimationPlaying then
                                                IsAnimationPlaying = true
                                                local anim = Player.Character.Humanoid:LoadAnimation(a)
                                                anim:Play()
                                                local c; c = anim.Ended:Connect(function() IsAnimationPlaying = false c:Disconnect() end)
                                                local c2; c2 = anim.Stopped:Connect(function() IsAnimationPlaying = false c2:Disconnect() end)
                                            end
                                        end
                                    end
                                    Packets['SwingTool']['send']({
                                        closest_plr.Character.PrimaryPart,
                                    })
                                end
                            end
            
                            if HitboxExpander then
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChildOfClass("Humanoid") then
                                        if HitboxExpanderShown then
                                            v.Character:FindFirstChild("HumanoidRootPart").Transparency = 0.7
                                        else
                                            if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                                v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                            end
                                        end
                                        if v.Character.Humanoid.SeatPart == nil then
                                            v.Character:FindFirstChild("HumanoidRootPart").CanCollide = false
                                            v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(HitboxExpanderRange,HitboxExpanderRange,HitboxExpanderRange)
                                        else
                                            if v.Character:FindFirstChild("HumanoidRootPart").Size ~= Vector3.new(2, 2, 1) then
                                                v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(2, 2, 1)
                                            end
                                        end
                                    end
                                end
                            else
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                                        if v.Character:FindFirstChild("HumanoidRootPart").Transparency ~= 1 then
                                            v.Character:FindFirstChild("HumanoidRootPart").Transparency = 1
                                        end
                                        if v.Character:FindFirstChild("HumanoidRootPart").Size ~= Vector3.new(2, 2, 1) then
                                            v.Character:FindFirstChild("HumanoidRootPart").Size = Vector3.new(2, 2, 1)
                                        end
                                    end
                                end
                            end
        
                            if HeadSizeToggle then
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("Head") then
                                        v.Character:FindFirstChild("Head").Size = Vector3.new(HeadSizeVariable,HeadSizeVariable,HeadSizeVariable)
                                    end
                                end
                            else
                                for _,v in pairs(Players:GetPlayers()) do
                                    if v ~= Player and v.Character and v.Character:FindFirstChild("Head") and v.Character.Head.Size ~= Vector3.new(2, 1, 1) then
                                        v.Character:FindFirstChild("Head").Size = Vector3.new(2, 1, 1)
                                    end
                                end
                            end
                
                            if VoodooBoltNearby then
                                local ClosestPlayer = getClosestPlayer(100)
                                if ClosestPlayer then
                                    if not VoodooDebounce then
                                        VoodooDebounce = true
                                        Packets['VoodooSpell']['send'](ClosestPlayer.Character.PrimaryPart.Position)
                                    end
                                end
                            end
                            if AutoVoodooShield then
                                if (Player.Character.Humanoid.Health/Player.Character.Humanoid.MaxHealth*100) <= AutoVoodooShieldHealth and not Player.Character:FindFirstChild("Shield") then
                                    Packets['VoodooSpell']['send'](Player.Character.PrimaryPart.Position)
                                end
                            end
                        else
                            HarvestDebounce = false
                            PlantDebounce = false
                            MineDebounce = false
                            VoodooDebounce = false
                            CollectDebounce = false
                        end -- end of char check
                    end)
                    end
                end)
            end)()
        
            
            LPH_NO_VIRTUALIZE(function()
                Connections.HealLoop = RunService.RenderStepped:Connect(function()
                    pcall(function()
                        local Inventory = Player.PlayerGui.MainGui.RightPanel.Inventory.List
                        if Inventory then
                            if AutoHeal then
                                if (Player.Character.Humanoid.Health/Player.Character.Humanoid.MaxHealth*100) <= AutoHealAt then 
                                    for i = 1, HealLoop do
                                        if type(FruitToEat) == "table" and getTableSize(FruitToEat) > 0 then
                                            for name,val in pairs(FruitToEat) do
                                                if val == true then
                                                    if Inventory:FindFirstChild(name) then
                                                        Packets['UseBagItem']['send'](Inventory:FindFirstChild(name):GetAttribute("Index"))
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        if AutoDrop then
                            Packets['DropBagItem']['send'](Inventory:FindFirstChild(ItemToDrop):GetAttribute("Index"))
                        end
                    end)
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                Connections.NoClipLoopForCharacter = RunService.Stepped:Connect(function()
                    if PlayerNoClip then
                        if Player.Character then
                            for _,child in pairs(Player.Character:GetDescendants()) do
                                if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= Float then
                                    child.CanCollide = false
                                end
                            end
                        end
                    end
                    if BoatSpeedToggle then
                        if Player.Character and Player.Character.Humanoid and Player.Character.Humanoid.SeatPart then
                            if Player.Character.Humanoid.SeatPart:FindFirstChild("BodyVelocity") then
                                Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity = Vector3.new(Player.Character.HumanoidRootPart.CFrame.LookVector.X*BoatSpeed, Player.Character.Humanoid.SeatPart.BodyVelocity.Velocity.Y, Player.Character.HumanoidRootPart.CFrame.LookVector.Z*BoatSpeed)
                            end
                        end
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.5) do
                        if BreakPoint then break end
                        local s,e = pcall(function()
                            if AutoMineResources then
                                local Params = OverlapParams.new()
                                Params.FilterDescendantsInstances = {Player.Character}
                                Params.FilterType = Enum.RaycastFilterType.Exclude
                                if ScriptMode == "Performant" then
                                     for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(AutoMineResourcesRange,AutoMineResourcesRange,AutoMineResourcesRange), Params)) do
                                        if v.Parent and v.Parent:IsA("Model") and v.Parent:FindFirstChild("Health") and not v.Parent:FindFirstChildOfClass("Humanoid") then
                                            local ToHit = {}
                                            for i2,v2 in pairs(v.Parent:GetChildren()) do
                                                if v2:IsA("BasePart") or v2:IsA("MeshPart") then
                                                    table.insert(ToHit, v2)
                                                end
                                            end
                                            Packets['SwingTool']['send'](ToHit)
                                        end
                                    end
                                else
                                    local closest_resource = getClosestResource(AutoMineResourcesRange)
                                    if closest_resource then
                                        Packets['SwingTool']['send']({
                                            closest_resource.PrimaryPart or closest_resource.Totem or closest_resource:FindFirstChildOfClass("BasePart"),
                                        })
                                    end
                                end
                            end
                            if specificpickup then
                                for i,v in pairs(workspace.Items:GetChildren()) do
                                    for i2,v2 in pairs(pickupitem) do
                                        if tostring(v) == tostring(i2) and (Player.Character.HumanoidRootPart.Position-v.Position).Magnitude < 25 then
                                            Packets['Pickup']['send'](v)
                                        end
                                    end
                                end
                                for i,v in pairs(workspace.Deployables:GetChildren()) do
                                    if tostring(v) == "Chest" and v:FindFirstChild("Contents") then
                                        for i2,v2 in pairs(pickupitem) do
                                            if v.Contents:FindFirstChild(i2) and (Player.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude < 25 then
                                                Packets['Pickup']['send'](v.Contents:FindFirstChild(i2))
                                            end
                                        end
                                    end
                                end
                            end
                            if consume then
                                for _, v in pairs(workspace.Items:GetChildren()) do
                                    if table.find(food1, v.Name) and (Player.Character.HumanoidRootPart.Position - v.Position).Magnitude < 50 then
                                        Packets['Consume']['send'](v)
                                    end
                                end
                            end
                            if AutoPickup then 
                                for i,v in pairs(workspace.Items:GetChildren()) do
                                    if v:FindFirstChild("Pickup") and (Player.Character.HumanoidRootPart.Position - v.Position).Magnitude < 25 then
                                        Packets['Pickup']['send'](v)
                                    end
                                end
                                --[[
                                    local Params = OverlapParams.new()
                                Params.FilterDescendantsInstances = {Player.Character}
                                Params.FilterType = Enum.RaycastFilterType.Exclude
                                for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(AuotPickupRange,AuotPickupRange,AuotPickupRange), Params)) do
                                    if v:IsA("BasePart") and v:FindFirstChild("Pickup") and tostring(v.Parent) == "Items" then
                                        Packets['Pickup']['send'](v)
                                    end
                                end
                                ]]
                            end
                        end)
                        if not s then warn("y", s, e) end
                    end
                end)
            end)()
            
            local C
            local C2
            local CurrentBush = nil
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.08) do
                        if BreakPoint then break end
                        if AutoFarm == true then
                            local s,e = pcall(function()
                                local BerryBush, Distance = getClosestBerryBushes(CollectFruitRange, SelectedFruit)
                                local closest_PlantBoxes = getPlantBoxesInRange(PlantFruitRange, SelectedFruit)
                                if not IsTweening then
                                    IsTweening = true
                                    if BerryBush ~= nil then
                                        CurrentBush = BerryBush
                                        T = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Distance/TweenSpeed), {CFrame = CFrame.new(BerryBush.PrimaryPart.CFrame.Position.X, BerryBush.PrimaryPart.CFrame.Position.Y+4, BerryBush.PrimaryPart.CFrame.Position.Z)})
                                        T:Play()
                                        local C; C = T.Completed:Connect(function() 
                                            IsTweening = false
                                            T = nil
                                            C:Disconnect() 
                                        end)
                                    else
                                        if getTableSize(closest_PlantBoxes) > 0 then
                                            local Closest = closest_PlantBoxes[1]
                                            if Closest and Closest.model ~= nil and Closest.distance ~= nil and Closest.model.PrimaryPart ~= nil then
                                                if Closest.model then
                                                    TweeningToPlantBox = Closest.model
                                                    T2 = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Closest.distance/TweenSpeed), {CFrame = CFrame.new(Closest.model.PrimaryPart.CFrame.Position.X, Closest.model.PrimaryPart.CFrame.Position.Y+4, Closest.model.PrimaryPart.CFrame.Position.Z)})
                                                    T2:Play()
                                                    local C; C = T2.Completed:Connect(function() 
                                                        IsTweening = false
                                                        T2 = nil
                                                        C:Disconnect() 
                                                    end)
                                                end
                                            end
                                        end
                                    end
                                end
                                if IsTweening and getTableSize(closest_PlantBoxes) == 0 and BerryBush == nil then
                                    IsTweening = false
                                end
                                if TweeningToPlantBox ~= nil then
                                    if TweeningToPlantBox:FindFirstChild(SelectedFruit) then
                                        if T2 then 
                                            T2:Cancel()
                                            T2 = nil
                                        end
                                        TweeningToPlantBox = nil
                                    end
                                end
                                if CurrentBush ~= nil then
                                    if CurrentBush.Parent ~= workspace then
                                        if T then
                                            T:Cancel()
                                            T = nil
                                        end
                                        CurrentBush = nil
                                    end
                                end
                            end)
                            if not s then warn("AUTOFARMING",s,e) end
                        else
                            if T then
                                T:Cancel()
                                T = nil
                            end
                            if T2 then
                                T2:Cancel()
                                T2 = nil
                            end
                            if IsTweening then
                                IsTweening = false
                            end
                        end
                    end
                end)
            end)()
        
            local TweeningForSun = false
            local FirstTween = nil
        
            function convert_time(seconds)
                local hours = math.floor(seconds / 3600)
                local minutes = math.floor((seconds % 3600) / 60)
                local remaining_seconds = seconds % 60
                return hours, minutes, remaining_seconds
            end
            
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(1) do
                        if BreakPoint then break end
                        if SunIslandFarm then
                            local s,e = pcall(function()
                            local ClosestSunFarm, ClosestDistance = GetClosestSunXP()
                            if ClosestSunFarm and Player.Character and Player.Character.HumanoidRootPart and not TweeningForSun then
                                TweeningForSun = true
        
                                local TweenToPart = nil
                                if typeof(ClosestSunFarm) == "Vector3" then
                                    TweenToPart = CFrame.new(ClosestSunFarm)
                                else
                                    TweenToPart = ClosestSunFarm.PrimaryPart.CFrame
                                end
                                FirstTween = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(ClosestDistance/xpfarmtween), {CFrame = TweenToPart + Vector3.new(1.5,3,-1.5)})
                           FirstTween:Play()
                                local C; C = FirstTween.Completed:Connect(function()
                                    C:Disconnect()
                                    TweeningForSun = false
                                end)
                            end
                        end)
                        if not s then warn(e) end
                        elseif TweeningForSun then
                            TweeningForSun = false
                            if FirstTween then FirstTween:Cancel() end
                            FirstTween = nil
                        end
                        local x,y = pcall(function()
                            local Inventory = Player.PlayerGui:FindFirstChild("MainGui"):FindFirstChild("RightPanel"):FindFirstChild("Inventory"):FindFirstChild("List")
                            if autoeat then
                                local food = Player.PlayerGui.MainGui.Panels.Stats.Food.Slider.Size.X.Scale
                                if food <= autoeatpercentage then
                                    Packets['UseBagItem']['send'](Inventory:FindFirstChild(autoeatfood):GetAttribute("Index"))
                                end
                            end
                            if CurrentGold == nil and GoldFarm then
                                if Player.PlayerGui.MainGui.Panels.Topbar.CoinsText then
                                    CurrentGold = tonumber(Player.PlayerGui.MainGui.Panels.Topbar.CoinsText.Text)
                                end
                            end
                            
                            if CurrentFruit == nil and AutoPlant then
                                if Inventory and Inventory:FindFirstChild(CurrentFruit) then
                                    CurrentFruit = tonumber(Inventory:FindFirstChild(CurrentFruit).QuantityImage.QuantityText.Text)
                                end
                            end
                            if (tick()-LastPlantFarm) >= LogTimePlant and PlantFarmWebhook ~= "" and CurrentFruit ~= nil and AutoPlant then
                                LastPlantFarm = tick()
                                local hours,minutes,seconds = convert_time(math.floor(tick()-TotalPlantFarm))
                                data = SendWebhook(
                                    "You gained " .. tostring(tonumber(Inventory:FindFirstChild(CurrentFruit).QuantityImage.QuantityText.Text)-tonumber(CurrentFruit)) .. " " .. tostring(CurrentFruit),
                                    "Farm Duration: " .. tostring(hours) .."h".." "..tostring(minutes).."m".." "..tostring(seconds).."s",
                                    "Fruit Farm"
                                )
                                request({Url=PlantFarmWebhook,Body=data,Method="POST",Headers={["content-type"]="application/json"}})
                            end
                            if (tick()-LastGoldFarm) >= LogTimeGold and GoldFarmWebhook ~= "" and CurrentGold ~= nil and GoldFarm then
                                LastGoldFarm = tick()
                                local hours,minutes,seconds = convert_time(math.floor(tick()-TotalGoldFarm))
                                data = SendWebhook(
                                    "You gained " .. tostring(tonumber(Player.PlayerGui.MainGui.Panels.Topbar.CoinsText.Text)-tonumber(CurrentGold)) .. " Coins",
                                    "Farm Duration: " .. tostring(hours) .."h".." "..tostring(minutes).."m".." "..tostring(seconds).."s",
                                    "Coin/Gold Farm"
                                )
                                request({Url=GoldFarmWebhook,Body=data,Method="POST",Headers={["content-type"]="application/json"}})
                            end
                            if (tick()-LastRebirthFarm) >= LogTimeMojo and MojoFarmWebhook ~= "" and CurrentMojos ~= nil and AutoRebirth then
                                LastRebirthFarm = tick()
                                local hours,minutes,seconds = convert_time(math.floor(tick()-TotalRebirthFarm))
                                data = SendWebhook(
                                    "You gained " .. tostring(tonumber(getrenv()._G.data.mojo)-tonumber(CurrentMojos)) .. " Mojos",
                                    "Farm Duration: " .. tostring(hours) .."h".." "..tostring(minutes).."m".." "..tostring(seconds).."s",
                                    "Rebirth/Mojo Farm"
                                )
                                request({Url=MojoFarmWebhook,Body=data,Method="POST",Headers={["content-type"]="application/json"}})
                            end
                        end)
                        if not x then warn(y) end
                    end
                end)
            end)()
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(1) do
                        if BreakPoint then break end
                        pcall(function()
                            if CampfireAura then 
                                for _, v in pairs(workspace.Deployables:GetChildren()) do
                                    if v.Name == "Campfire" and (Player.Character.Head.Position - v.PrimaryPart.Position).magnitude < campfireradius then
                                        --if v:FindFirstChild("Board") and v.Board:FindFirstChildOfClass("BillboardGui") then
                                            --if v.Board:FindFirstChildOfClass("BillboardGui").Backdrop.TextLabel.Text == "0" then
                                                for i2,v2 in pairs(CampfireMaterial) do
                                                    Packets['InteractStructure']['send']({
                                                        structure = v, 
                                                        itemID = ItemIDs[tostring(i2)]
                                                    })
                                                --end
                                            --end
                                        end
                                    end
                                end
                            end
                        end)
                    end
                end)
            end)()
        
                local hookAimbotfunc = function()
                --[[task.spawn(function()
                    repeat task.wait(1) until FuncFoundForAimbot ~= nil
                    Library:Notify("✅ Hooked Aimbot function...")
                    local checkcaller = checkcaller
                    local hookAimbot
                    hookAimbot = hookfunction(FuncFoundForAimbot, function(...)
                        if not checkcaller() and BowAimbot then
                            local Args = {...}
                            if Args[3] and typeof(Args[3]) == "Vector3" then
                                local ClosestCharacterToVisualizer = getClosestPlayerWithCircle()
                                if ClosestCharacterToVisualizer and ClosestCharacterToVisualizer.HumanoidRootPart then
                                    Args[3] = ClosestCharacterToVisualizer.HumanoidRootPart.Position + Vector3.new(0,YOFFSET,0)
                                    return hookAimbot(table.unpack(Args))
                                end
                            end
                        end
                        return hookAimbot(...)
                    end)
                end)]]
            end
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while task.wait(0.1) do
                    if BreakPoint then break end
                    local s,e = pcall(function()
                            
                            if AutoMineResources then
                                MineDebounce = true
                                local Params = OverlapParams.new()
                                Params.FilterDescendantsInstances = {Player.Character}
                                Params.FilterType = Enum.RaycastFilterType.Exclude
        
                                if ScriptMode == "Performant" then
                                    for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(AutoMineResourcesRange,AutoMineResourcesRange,AutoMineResourcesRange), Params)) do
                                        if v.Parent and v.Parent:IsA("Model") and v.Parent:FindFirstChild("Health") and not v.Parent:FindFirstChildOfClass("Humanoid") then
                                            local ToHit = {}
                                            for i2,v2 in pairs(v.Parent:GetChildren()) do
                                                if v2:IsA("BasePart") or v2:IsA("MeshPart") then
                                                    table.insert(ToHit, v2)
                                                end
                                            end
                                            Packets['SwingTool']['send'](ToHit)
                                        end
                                    end
                                else
                                    local closest_resource = getClosestResource(AutoMineResourcesRange)
                                    if closest_resource then
                                        Packets['SwingTool']['send']({
                                            closest_resource.PrimaryPart or closest_resource.Totem or closest_resource:FindFirstChildOfClass("BasePart"),
                                        })
                                    end
                                end
                            end
        
                            -- auto plant
                            --[[if AutoPlant then
                                    local Params = OverlapParams.new()
                                    Params.FilterDescendantsInstances = {Player.Character}
                                    Params.FilterType = Enum.RaycastFilterType.Exclude
                                    local RayParams = RaycastParams.new()
                                    RayParams.FilterType = Enum.RaycastFilterType.Exclude
                                    RayParams.FilterDescendantsInstances = {Player.Character}
                                    if ScriptMode == "Performant" then
                                        local Ray = workspace:Raycast(Player.Character.HumanoidRootPart.Position, Vector3.new(0, -10, 0), RayParams)
                                        if Ray and Ray.Instance and Ray.Instance.Parent then
                                            if tostring(Ray.Instance.Parent) == "Plant Box" and not Ray.Instance.Parent:FindFirstChild(SelectedFruit) then
                                                Packets['InteractStructure']['send'](Ray.Instance.Parent, SelectedFruit)
                                            end
                                        end
                                        for i,v in pairs(workspace:GetPartBoundsInBox(Player.Character.HumanoidRootPart.CFrame, Vector3.new(50,15,50), Params)) do
                                            if v.Parent then
                                                if (tostring(v.Parent) == "Plant Box" and not v.Parent:FindFirstChild(SelectedFruit)) then
                                                    Packets['InteractStructure']['send'](v.Parent, SelectedFruit)
                                                end
                                            end
                                        end
                                    else
                                        local plant_box = getPlantBoxesInRange2(15, SelectedFruit)
                                        if plant_box then
                                            Packets['InteractStructure']['send'](plant_box, SelectedFruit)
                                        end
                                    end
                                end--]]
                                if UniversalAutoHarvest then
                                    for _, v in pairs(workspace:GetChildren()) do
                                        if string.match(v.Name:lower(), "bush") or string.match(v.Name:lower(), "tree") or string.match(v.Name:lower(), "crop") then
                                            if (Player.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude < 35 then
                                                game.Packets['Pickup']['send'](v)
                                            end
                                        end
                                    end
                                end
                        end)
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while true do
                        if BreakPoint then
                            break
                        end
                        if AutoLevelFarm then
                            if Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") and Player.Character:FindFirstChildOfClass("Humanoid").Health ~= 0 and (tick() - LastSpawned) >= 5 then
                                local success,errOccured = pcall(function()
                                    local currentLevel = ""
                                    local Level = Player.PlayerGui:FindFirstChild("MainGui"):FindFirstChild("Panels"):FindFirstChild("Topbar"):FindFirstChild("EssenceBar"):FindFirstChild("TextLabel").Text
                                    local MojoUI = Player.PlayerGui:FindFirstChild("MainGui"):FindFirstChild("Panels"):FindFirstChild("MojoConfirm"):FindFirstChild("LevelUpFrame"):FindFirstChild("ConfirmButton")
                                    local PlayButton = Player.PlayerGui:FindFirstChild("SpawnGui"):FindFirstChild("Customization"):FindFirstChild("PlayButton")
                                    local hasSpawned = getrenv()._G.data.hasSpawned
                    
                                    if (tick() - LastBird) > 10 then
                                        Library:Notify("No bird's found within 10s, respawning...")
                                        Player.Character.Humanoid.Health = 0
                                        LastBird = tick()
                                    end
                    
                                    if Level and MojoUI and PlayButton then
                                    -- [[ If user has not spawned yet (after rebirth) we force spawn them ]]
                                        if hasSpawned == false then
                                            if not SpawnDebounce then
                                                SpawnDebounce = true
                                                for i,v in pairs(getconnections(PlayButton.Activated)) do
                                                    if v.Function then
                                                        v.Function()
                                                    end
                                                end
                                                task.delay(2, function()
                                                    SpawnDebounce = false
                                                end)
                                            end
                                        else
                                            if Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") and Player.Character:FindFirstChildOfClass("Humanoid").Health ~= 0 then
                                                -- [[ We split the level string into a seperate string eg Level 100 -> 100 ]]
                                                if Level then
                                                    for i = 1, #Level do
                                                        if tonumber( Level:sub(i,i) ) then
                                                            currentLevel=currentLevel..Level:sub(i,i)
                                                        end
                                                    end
                                                end
                    
                                                -- [[ Main Autofarm Section ]]
                                                if tonumber(currentLevel) >= 100 and AutoRebirth then
                                                    if not MojoClaimDebounce then
                                                        MojoClaimDebounce = true
                                                        for _,v in pairs(getconnections(MojoUI.Activated)) do
                                                            if v.Function then
                                                                v.Function()
                                                            end
                                                        end
                                                        task.delay(2, function()
                                                            MojoClaimDebounce = false
                                                        end)
                                                    end
                                                    Library:Notify('Rebirthing...')
                                                end
        
                                                if tonumber(currentLevel) <= 100 then
                                                    local closestBird, birdDistance = GetAliveBird()
                                                    if closestBird ~= nil then
                                                        LastBird = tick()
                                                        EquipToolByString("Rock")
                                                        Player.Character.HumanoidRootPart.CFrame = closestBird.HumanoidRootPart.CFrame
                                                        if birdDistance <= 10 then
                                                            Packets['SwingTool']['send']({
                                                                closestBird.Hitbox,
                                                                closestBird.HumanoidRootPart,
                                                                closestBird.Beak
                                                            })
                                                        end
                                                    end
                                                end
        
                                            elseif Player.Character:FindFirstChildOfClass("Humanoid").Health <= 0.5 then
                                                Library:Notify("Re-fixing Level Farm")
                                                LastSpawned = tick()
                                            end
                                        end
                                    end
                                end)
                            end
                        end
                        task.wait()
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                task.spawn(function()
                    while true do
                        if BreakPoint then break end
                        pcall(function()
                            if AutoHarvest then
                                for _, v in pairs(workspace:GetChildren()) do
                                    if v.Name == SelectedFruit .. " Bush" or v.Name == SelectedFruit .. " Tree" or v.Name == SelectedFruit .. " Crop" or v.Name == SelectedFruit .. " Bushel" or (SelectedFruit == "Prickly Pear" and v.Name == "Pear Cacti") or v.Name == SelectedFruit .. " Patch Crop" then
                                        if v.PrimaryPart and (Player.Character.HumanoidRootPart.Position - v.PrimaryPart.Position).Magnitude <= 25 then
                                            Packets['Pickup']['send'](v)
                                        elseif v:FindFirstChild("Leaves") then
                                            if (Player.Character.HumanoidRootPart.Position - v.Leaves.Position).Magnitude <= 25 then
                                                Packets['Pickup']['send'](v)
                                            end
                                        end
                                    end
                                end
                            end
                            if AutoPlant then
                                -- local rand = getTableIndexArrayValue(SelectedFruit)
                                local plant_box,dist = getPlantBoxesInRange2(25, SelectedFruit)
                                --print(plant_box,rand)
                                if plant_box then
                                    --Library:Notify("planting " .. tostring(plant_box) .. " " .. tostring(dist) .. " " .. tostring(rand), 1)
                                    Packets['InteractStructure']['send']({
                                        structure = plant_box, 
                                        itemID = ItemIDs[SelectedFruit]
                                    })
                                end
                            end
                        end)
                        task.wait(0.08)
                    end
                end)
            end)()
        
            LPH_NO_VIRTUALIZE(function()
                workspace.Items.ChildAdded:Connect(function(child)
                    if child.Name == "Essence" and SunIslandFarm then
                        Packets['Pickup']['send'](child)
                    end
                end)
            end)()
        
        
            LPH_NO_VIRTUALIZE(function()
                pcall(function()
                    if Player.Character then
                        PlantDebounce = false
                        HarvestDebounce = false
                        MineDebounce = false
                        CollectDebounce = false
                        VoodooDebounce = false 
                        for _,v in pairs(getgc()) do
                            if type(v) == "function" and debug.getinfo(v).name == "CreateProjectile" and islclosure(v) then
                                FuncFoundForAimbot = v
                                --Library:Notify("Found function for aimbot " .. tostring(v))
                                break
                            end
                        end
                        hookAimbotfunc()
                        local con; con = Player.Character.HumanoidRootPart.Touched:Connect(function(t)
                            if t and t.Parent then
                                if AutoHarvest then
                                    if (tostring(t.Parent):find("Bush") and tostring(t.Parent):find("Tree") and tostring(t.Parent):find("Crop")) then
                                        Packets['Pickup']['send'](t.Parent)
                                    end
                                end
                            end
                        end)
                        local _; _ = Player.Character.Humanoid.Died:Connect(function() _:Disconnect() PlantDebounce = false HarvestDebounce = false con:Disconnect() end)
                    end
                    Player.CharacterAdded:Connect(function(char)
                        PlantDebounce = false
                        HarvestDebounce = false
                        MineDebounce = false
                        CollectDebounce = false
                        VoodooDebounce = false 
                        for _,v in pairs(getgc()) do
                            if type(v) == "function" and debug.getinfo(v).name == "CreateProjectile" and islclosure(v) then
                                FuncFoundForAimbot = v
                                --Library:Notify("Found function for aimbot " .. tostring(v))
                                break
                            end
                        end
                        hookAimbotfunc()
                        task.delay(3, function()
                            PlantDebounce = false
                            HarvestDebounce = false
                            MineDebounce = false
                            CollectDebounce = false
                            VoodooDebounce = false
                        end)
                        local con; con = char:WaitForChild("HumanoidRootPart").Touched:Connect(function(t)
                            if t and t.Parent then
                                if AutoHarvest then
                                    if (tostring(t.Parent):find("Bush") and tostring(t.Parent):find("Tree") and tostring(t.Parent):find("Crop")) then
                                        Packets['Pickup']['send'](t.Parent)
                                    end
                                end
                            end
                        end)
                        local _; _ = char:WaitForChild("Humanoid").Died:Connect(function() _:Disconnect() PlantDebounce = false HarvestDebounce = false con:Disconnect() end)
                    end)
                end)
            end)()
            
                local Ores = {}
            
                local function AddOreToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
            
                    table.insert(Ores, totalModelData)
                    
                    Con1 = model.AncestryChanged:Connect(function(old,new)
                        if old == nil or new == nil then
                            Con1:Disconnect()
                        end
                    end)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.MapComponents = RunService.Stepped:Connect(function()
                        for i,v in pairs(Ores) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if OreESPToggle and ShownOres[tostring(v.Model)] == true then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                    if OnScreen then
                                        if ShowOreESPDistance then
                                            local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
                
                                            if ShowOreHealth then
                                                v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m] " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                            else
                                                v.Drawing.Text = v.Name .. " [" .. tostring(math.floor(Distance)) .. "m]"
                                            end
                                        else
                                            if ShowOreHealth then
                                                v.Drawing.Text = v.Name .. " " .. tostring(v.Model:FindFirstChild("Health").Value) .. " HP"
                                            else
                                                v.Drawing.Text = v.Name
                                            end
                                        end
                                        v.Drawing.Visible = true
                                        if v.Model:FindFirstChild("Small Rock") then
                                            v.Drawing.Color = v.Model["Small Rock"].BrickColor.Color
                                        elseif v.Model:FindFirstChild("Totem") then
                                            v.Drawing.Color = v.Model.Totem.BrickColor.Color
                                        elseif v.Model:FindFirstChild("Feather Stone") then
                                            v.Drawing.Color = v.Model["Feather Stone"].BrickColor.Color
                                        else
                                            v.Drawing.Color = Color3.fromRGB(0, 162, 255)
                                        end
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(Ores, i)
                            end
                        end
                    end)
                end)()
        
                LPH_NO_VIRTUALIZE(function()
                    if workspace:WaitForChild("Resources", 5) then
                        for i,v in pairs(workspace.Resources:GetChildren()) do
                            if v:IsA("Model") then
                                AddOreToTable(v)
                            end
                        end
                        workspace.Resources.ChildAdded:Connect(function(child)
                            if child:IsA("Model") then
                                AddOreToTable(child)
                            end
                        end)
                        workspace.Resources.ChildRemoved:Connect(function(child)
                            for i,v in pairs(Ores) do
                                if v.Model == child then
                                    v.Model = nil
                                end
                            end
                        end)
                    end
                end)()
        
                -- treasure esp
                local TreasureESPTable = {}
            
                local function AddTreasureToESP(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
            
                    table.insert(TreasureESPTable, totalModelData)
                    
                    Con1 = model.AncestryChanged:Connect(function(old,new)
                        if old == nil or new == nil then
                            Con1:Disconnect()
                        end
                    end)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.TreasureLoop = RunService.Stepped:Connect(function()
                        for i,v in pairs(TreasureESPTable) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if TreasureChestESPToggle then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                    if OnScreen then
                                        local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
        
                                        v.Drawing.Visible = true
                                        v.Drawing.Color = TreasureChestColor
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                        v.Drawing.Text = tostring(v.Model) .. " " .. tostring(math.floor(Distance)) .. "m"
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(TreasureESPTable, i)
                            end
                        end
                    end)
                end)()
        
                -- heart esp
        
                --[[HeartsGB:AddToggle('Heart ESP', {
                    Text = 'Heart ESP',
                    Default = false,
                    Tooltip = 'puts esp on hearts', 
                    Callback = function(Value)
                        heartesptoggle = Value
                    end
                })
        
                local HeartESPTable = {}
            
                local function AddHeartToESP(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = Color3.fromRGB(23, 174, 212)
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
            
                    table.insert(HeartESPTable, totalModelData)
                    
                    Con1 = model.AncestryChanged:Connect(function(old,new)
                        if old == nil or new == nil then
                            Con1:Disconnect()
                        end
                    end)
                end
        
                LPH_NO_VIRTUALIZE(function()
                    Connections.ValentinesLoop = RunService.Stepped:Connect(function()
                        for i,v in pairs(HeartESPTable) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if heartesptoggle then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:GetModelCFrame().Position + Vector3.new(0, 2, 0))
                                    if OnScreen then
                                        local Distance = (Player.Character.HumanoidRootPart.Position-v.Model:GetModelCFrame().Position).Magnitude
        
                                        v.Drawing.Visible = true
                                        v.Drawing.Color = Color3.fromRGB(252, 3, 69)
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                        v.Drawing.Text = tostring(v.Model) .. " " .. tostring(math.floor(Distance)) .. "m"
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(HeartESPTable, i)
                            end
                        end
                    end)
                end)()
        
                -- VALENTINE INIT
                LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(workspace.Hearts:GetChildren()) do
                        if v:IsA("Model") and tostring(v):find("Heart") then
                            AddHeartToESP(v)
                        end
                    end
                    workspace.Hearts.ChildAdded:Connect(function(child)
                        if child:IsA("Model") and tostring(child):find("Heart") then
                            AddHeartToESP(child)
                        end
                    end)
                    workspace.Hearts.ChildRemoved:Connect(function(child)
                        for i,v in pairs(HeartESPTable) do
                            if v.Model == child then
                                v.Model = nil
                            end
                        end
                    end)
                end)()]]
        
                --- HALLOWEEN INIT
                LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(workspace:GetChildren()) do
                        if v:IsA("Model") and tostring(v):find("Treasure") then
                            AddTreasureToESP(v)
                        end
                    end
                    workspace.ChildAdded:Connect(function(child)
                        if child:IsA("Model") and tostring(child):find("Treasure") then
                            AddTreasureToESP(child)
                        end
                    end)
                    workspace.ChildRemoved:Connect(function(child)
                        for i,v in pairs(TreasureESPTable) do
                            if v.Model == child then
                                v.Model = nil
                            end
                        end
                    end)
                end)()
            
                local PlayerESP = {}
            
                local function AddPlayerToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 16
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = tostring(model)
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(PlayerESP, totalModelData)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.mainloopforpalyeresp = RunService.Stepped:Connect(function()
                        for i,v in pairs(PlayerESP) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                                    if OnScreen and PlayerESPToggle then
                                        if HealthESP and v.Model:FindFirstChildOfClass("Humanoid") then
                                            local healthString = tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").Health)) .. "/" .. tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").MaxHealth))
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]" .. " [" .. healthString .. "]"                         
                                        else
                                            v.Drawing.Text = v.Name .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)) .. "m]"                         
                                        end
                                        if ShowTribeColor then
                                            v.Drawing.Color = v.Model:FindFirstChild("UpperTorso").Color
                                        else
                                            v.Drawing.Color = PlayerESPColor
                                        end
                                        v.Drawing.Visible = true
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(PlayerESP, i)
                            end
                        end
                    end)
                end)()
            
                for i,v in pairs(Players:GetPlayers()) do
                    if v ~= Player then
                        if v.Character then
                            AddPlayerToTable(v.Character)
                        end
                        v.CharacterAdded:Connect(function(char)
                            AddPlayerToTable(char)
                        end)
                    end
                end
                Players.PlayerAdded:Connect(function(p)
                    p.CharacterAdded:Connect(function(char)
                        AddPlayerToTable(char)
                    end)
                end)
            
                Players.PlayerRemoving:Connect(function(p)
                    for i,v in pairs(PlayerESP) do
                        if tostring(v.Name) == tostring(p) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(PlayerESP, i)
                        end
                    end
                end)
            
                -- armor esp fuck u
                local ArmorESP = {}
            
                local function AddPlayerArmorToTable(model)
                    local Con1
                    
                    local totalModelData = {}
                    
                    for i,v in pairs(ArmorESP) do
                        if tostring(v.Name) == tostring(model) then
                            v.Drawing.Visible = false
                            v.Drawing:Remove()
                            table.remove(ArmorESP, i)
                        end
                    end
                    
                    local TextDrawing = Drawing.new("Text")
                    TextDrawing.Size = 12
                    TextDrawing.Visible = false
                    TextDrawing.Outline = true
                    TextDrawing.Center = true
                    TextDrawing.Text = "null"
                    TextDrawing.Color = PlayerESPColor
                    
                    totalModelData.Drawing = TextDrawing
                    totalModelData.Model = model
                    totalModelData.Name = tostring(model)
                    
                    table.insert(ArmorESP, totalModelData)
                end
            
                LPH_NO_VIRTUALIZE(function()
                    Connections.mainloopforarmoresp = RunService.Stepped:Connect(function()
                        for i,v in pairs(ArmorESP) do
                            if v.Model ~= nil and v.Drawing ~= nil then
                                if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                    local Offset = Vector3.new(0,0,0)
                                    if ArmorPosition == "Left" then
                                        Offset = Vector3.new(0,0,5)
                                    elseif ArmorPosition == "Right" then
                                        Offset = Vector3.new(0,0,-5)
                                    elseif ArmorPosition == "Down" then
                                        Offset = Vector3.new(0,-3.5,0)
                                    end
                                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Offset)
                                    if OnScreen and ShowArmor then
                                        local equipped = "\n"
                                        for i2,v2 in pairs(v.Model:GetChildren()) do
                                            if v2:IsA("Accessory") and table.find({"torso", "head", "leg", "legs"}, tostring(v2:FindFirstChildOfClass("BoolValue"))) then
                                                equipped = equipped .. tostring(v2) .. "\n"
                                            end
                                        end
                                        v.Drawing.Text = tostring(equipped) or ""
                                        v.Drawing.Color = ArmorColor
                                        v.Drawing.Size = ArmorSize
                                        v.Drawing.Visible = true
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(ArmorESP, i)
                            end
                        end
                    end)
                end)()
        
                LPH_NO_VIRTUALIZE(function()
                    for i,v in pairs(Players:GetPlayers()) do
                        if v ~= Player then
                            if v.Character then
                                AddPlayerArmorToTable(v.Character)
                            end
                            v.CharacterAdded:Connect(function(char)
                                AddPlayerArmorToTable(char)
                            end)
                        end
                    end
                    Players.PlayerAdded:Connect(function(p)
                        p.CharacterAdded:Connect(function(char)
                            AddPlayerArmorToTable(char)
                        end)
                    end)
                
                    Players.PlayerRemoving:Connect(function(p)
                        for i,v in pairs(ArmorESP) do
                            if tostring(v.Name) == tostring(p) then
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                                table.remove(ArmorESP, i)
                            end
                        end
                    end)
                end)()
        
                CraftBox:AddDropdown('Craft Armor Set', {
                    Values = { 'Leaf Set', 'Hide Set', 'Iron Set', 'Steel Set', 'Adurite Set', 'Crystal Set', 'Magnetite Set','Emerald Set', 'Pink Diamond Set', 'Void Set', 'God Set'},
                    Default = "Armor Set", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Set',
                    Tooltip = 'Set to choose to craft', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sets = Value
                    end
                })
                CraftBox:AddButton({
                    Text = 'Craft Set',
                    DoubleClick = false,
                    Tooltip = 'Crafts a full set of armor',
                    Func = function()
                if sets == "Leaf Set" then
                    Packets['CraftItem']['send']("Leaf Shirt")
                    Packets['CraftItem']['send']("Leaf Pants")
                elseif sets == "Hide Set" then
                    Packets['CraftItem']['send']("Hide Pants")
                    Packets['CraftItem']['send']("Hide Shirt")
                elseif sets == "Iron Set" then
                    Packets['CraftItem']['send']("Iron Helmet")
                    Packets['CraftItem']['send']("Iron Greaves")
                    Packets['CraftItem']['send']("Iron Chestplate")
                elseif sets == "Steel Set" then
                    Packets['CraftItem']['send']("Steel Helmet")
                    Packets['CraftItem']['send']("Steel Greaves")
                    Packets['CraftItem']['send']("Steel Chestplate")
                elseif sets == "Adurite Set" then
                    Packets['CraftItem']['send']("Adurite Chestplate")
                    Packets['CraftItem']['send']("Adurite Helmet")
                    Packets['CraftItem']['send']("Adurite Greaves")
                elseif sets == "Crystal Set" then
                    Packets['CraftItem']['send']("Crystal Crown")
                    Packets['CraftItem']['send']("Crystal Chestplate")
                    Packets['CraftItem']['send']("Crystal Greaves")
                elseif sets == "Magnetite Set" then
                    Packets['CraftItem']['send']("Magnetite Mask")
                    Packets['CraftItem']['send']("Magnetite Chestplate")
                    Packets['CraftItem']['send']("Magnetite Greaves")
                elseif sets == "Emerald Set" then
                    Packets['CraftItem']['send']("Emerald Helmet")
                    Packets['CraftItem']['send']("Emerald Greaves")
                    Packets['CraftItem']['send']("Emerald Chestplate")
                elseif sets == "Pink Diamond Set" then
                    Packets['CraftItem']['send']("Pink Diamond Hood")
                    Packets['CraftItem']['send']("Pink Diamond Greaves")
                    Packets['CraftItem']['send']("Pink Diamond Chestplate")
                elseif sets == "Void Set" then
                    Packets['CraftItem']['send']("Void Chestplate")
                    Packets['CraftItem']['send']("Void Shroud")
                    Packets['CraftItem']['send']("Void Greaves")
                elseif sets == "God Set" then
                    Packets['CraftItem']['send']("God Halo")
                    Packets['CraftItem']['send']("God Chestplate")
                    Packets['CraftItem']['send']("God Legs")
                end
            end})
            CraftBox2:AddDropdown('Craft Tools (Pick and Axe)', {
                Values = { 'Wood Tools', 'Stone Tools', 'Iron Tools', 'Steel Tools', 'Adurite Tools', 'Crystal Tools', 'Magnetite Tools','Emerald Tools', 'Pink Diamond Tools', 'Void Tools', 'God Tools'},
                Default = "Tools", -- number index of the value / string
                Multi = false, -- true / false, allows multiple choices to be selected
            
                Text = 'Tools',
                Tooltip = 'Tools to choose to craft', -- Information shown when you hover over the dropdown
            
                Callback = function(Value)
                    Tools = Value
                end
            })
            CraftBox2:AddButton({
                Text = 'Craft Tools',
                DoubleClick = false,
                Tooltip = 'Crafts a full set of tools',
                Func = function()
            if Tools == "Wood Tools" then
                Packets['CraftItem']['send']("Wood Axe")
                Packets['CraftItem']['send']("Wood Pick")
            elseif Tools == "Stone Tools" then
                Packets['CraftItem']['send']("Stone Pick")
                Packets['CraftItem']['send']("Stone Axe")
            elseif Tools == "Iron Tools" then
                Packets['CraftItem']['send']("Iron Axe")
                Packets['CraftItem']['send']("Iron Pick")
            elseif Tools == "Steel Tools" then
                Packets['CraftItem']['send']("Steel Pick")
                Packets['CraftItem']['send']("Steel Axe")
            elseif Tools == "Adurite Tools" then
                Packets['CraftItem']['send']("Adurite Pick")
                Packets['CraftItem']['send']("Adurite Axe")
            elseif Tools == "Crystal Tools" then
                Packets['CraftItem']['send']("Crystal Pick")
                Packets['CraftItem']['send']("Crystal Axe")
            elseif Tools == "Magnetite Tools" then
                Packets['CraftItem']['send']("Magnetite Pick")
                Packets['CraftItem']['send']("Magnetite Axe")
            elseif Tools == "Emerald Tools" then
                Packets['CraftItem']['send']("Emerald Pick")
                Packets['CraftItem']['send']("Emerald Axe")
            elseif Tools == "Pink Diamond Tools" then
                Packets['CraftItem']['send']("Pink Diamond Pick")
                Packets['CraftItem']['send']("Pink Diamond Axe")
            elseif Tools == "Void Tools" then
                Packets['CraftItem']['send']("Void Pick")
                Packets['CraftItem']['send']("Void Axe")
            elseif Tools == "God Tools" then
                Packets['CraftItem']['send']("God Pick")
                Packets['CraftItem']['send']("God Axe")
            end
        end})
        CraftBox3:AddDropdown('Craft Weapons', {
            Values = { 'Club', 'Mace', 'Battle Axe', 'War Hammer', 'Crystal Stick', 'Emerald Blade', 'Peeper Pob Hammer','God Rock'},
            Default = "Tool Here", -- number index of the value / string
            Multi = false, -- true / false, allows multiple choices to be selected
        
            Text = 'Weapon',
            Tooltip = 'Weapons to choose to craft', -- Information shown when you hover over the dropdown
        
            Callback = function(Value)
                Weapon = Value
            end
        })
        CraftBox3:AddButton({
            Text = 'Craft Weapon',
            DoubleClick = false,
            Tooltip = 'Crafts Weapon',
            Func = function()
            Packets['CraftItem']['send'](Weapon)
        end})
        CraftBox4:AddDropdown('Craft Bags', {
        Values = { 'Leaf Bag', 'Hide Bag', 'Iron Bag', 'Steel Bag', 'Adurite Bag', 'Crystal Bag', 'Magnetite Bag','Emerald Bag','Pink Diamond Bag','Void Bag','Candy Bag','Easter Bag','God Bag'},
        Default = "Bag Here", -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
        
        Text = 'Bags',
        Tooltip = 'Bags to choose to craft', -- Information shown when you hover over the dropdown
        
        Callback = function(Value)
            Bag = Value
        end
        })
        CraftBox4:AddButton({
        Text = 'Craft Bag',
        DoubleClick = false,
        Tooltip = 'Crafts Bag',
        Func = function()
        Packets['CraftItem']['send'](Bag)
        end})
        
            -- teleport stuff
                TeleportBox:AddButton({
                    Text = "Teleport to Void",
                    DoubleClick = false,
                    Tooltip = "teleports u to the void",
                    Func = function() 
                        TeleportService:Teleport(11879754496, Player)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Void Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "teleports to a lower player void server",
                    Func = function() 
                        -- Lower Player Server Void
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,Player)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Void Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player void server",
                    Func = function() 
                    -- Higher Player Void 
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11879754496 
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, Player)
                    end
                })
            
                TeleportBox:AddButton({
                    Text = "Overworld Higher Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a higher player overworld server",
                    Func = function() 
                    -- highest server script overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
            
            function ListServers(cursor)
                local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                return Http:JSONDecode(Raw)
            end
            
            local Server, Next;
            repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place, Server.id, Player)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Overworld Lower Player Server",
                    DoubleClick = false,
                    Tooltip = "Teleports to a lower player overworld server",
                    Func = function() 
                    -- Lower Player Server Overworld
            local Http = game:GetService("HttpService")
            local TPS = game:GetService("TeleportService")
            local Api = "https://games.roblox.com/v1/games/"
            
            local _place = 11729688377
            local _servers = Api.._place.."/servers/Public?sortOrder=Asc&limit=100"
            function ListServers(cursor)
            local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
            return Http:JSONDecode(Raw)
            end
            
            local Server, Next; repeat
            local Servers = ListServers(Next)
            Server = Servers.data[1]
            Next = Servers.nextPageCursor
            until Server
            
            TPS:TeleportToPlaceInstance(_place,Server.id,Player)
                    end
                })
                TeleportBox:AddButton({
                    Text = "Server Hop",
                    DoubleClick = false,
                    Tooltip = "Server hops to another server",
                    Func = function() 
                        local Player = game.Players.LocalPlayer    
                        local Http = game:GetService("HttpService")
                        local TPS = game:GetService("TeleportService")
                        local Api = "https://games.roblox.com/v1/games/"
                        
                        local _place,_id = game.PlaceId, game.JobId
                        local _servers = Api.._place.."/servers/Public?sortOrder=Desc&limit=100"
                        function ListServers(cursor)
                        local Raw = game:HttpGet(_servers .. ((cursor and "&cursor="..cursor) or ""))
                        return Http:JSONDecode(Raw)
                        end
                        
                        local Next; repeat
                        local Servers = ListServers(Next)
                        for i,v in next, Servers.data do
                            if v.playing < v.maxPlayers and v.id ~= _id then
                                local s,r = pcall(TPS.TeleportToPlaceInstance,TPS,_place,v.id,Player)
                                if s then break end
                            end
                        end
                        
                        Next = Servers.nextPageCursor
                        until not Next
                    end
                })
        
                TeleportBox:AddDivider()
        
                TeleportBox:AddButton({
                    Text = "Teleport to Old God",
                    DoubleClick = false,
                    Tooltip = "teleports u to the old god island",
                    Func = function() 
                        for i = 1,40 do
                            wait(0.01)
                            Player.Character.HumanoidRootPart.CFrame = CFrame.new(223.0359344482422, -144.40762329101562, 1086.427978515625)
                        end
                    end
                })
                            TeleportBox:AddButton({
                    Text = "Teleport to Volcano",
                    DoubleClick = false,
                    Tooltip = "teleports u to volcano",
                    Func = function() 
                        for i = 1,40 do
                            wait(0.01)
                            Player.Character.HumanoidRootPart.CFrame = CFrame.new(-1067.1888427734375, -199.7120819091797, -420.5445556640625)
                            end
                    end
                })
                CampFireBox:AddDropdown('Campfire Options', {
                    Values = { 'Wood', 'Leaves', 'Log', 'Coal'},
                    Default = "Material", -- number index of the value / string
                    Multi = true, -- true / false, allows multiple choices to be selected
                
                    Text = 'Options',
                    Tooltip = 'Materials used to fuel campfire', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        CampfireMaterial = Value
                    end
                })
                CampFireBox:AddSlider('Campfire Range', {
                    Text = 'Range',
                    Default = 15,
                    Min = 0,
                    Max = 250,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        campfireradius = Value
                    end
                })
                CampFireBox:AddToggle('Campfire Aura', {
                    Text = 'Campfire Aura',
                    Default = false,
                    Tooltip = 'Toggle on/off Campfire Aura', 
                    Callback = function(Value)
                        CampfireAura = Value
                    end
                })
                ModBox:AddToggle('Mod Notifier', {
                    Text = 'Mod Notifier',
                    Default = true,
                    Tooltip = 'Toggle on/off Mod Notififer', 
                    Callback = function(Value)
                        ModNotify = Value
                    end
                })
                AntiBan:AddToggle('Script Ban Protection', {
                    Text = 'Script Ban Protection',
                    Default = true,
                    Tooltip = 'Protects your account from being banned from other script(s).', 
                    Callback = function(Value)
                        scriptbanprotection = Value
                    end
                })
                local Blacklisted_Roles = {"Admin", "Owner", "Owners", "Tester"}
                local GroupId = 9132225
                Players.PlayerAdded:Connect(function(Plr)
                    if ModNotify then
                        if table.find(Blacklisted_Roles, Plr:GetRoleInGroup(GroupId)) then
                            Library:Notify("An Admin has JOINED your game " .. tostring(Plr), 10)
                        end
                    end
                end)
                Players.PlayerRemoving:Connect(function(Plr)
                    if ModNotify then     
                        if table.find(Blacklisted_Roles, Plr:GetRoleInGroup(GroupId)) then
                            Library:Notify("An Admin has LEFT your game " .. tostring(Plr), 10)
                        end
                    end
                end)
                for i,v in pairs(Players:GetPlayers()) do
                    if ModNotify then
                        if table.find(Blacklisted_Roles, v:GetRoleInGroup(GroupId)) then
                            Library:Notify("An Admin is in your game " .. tostring(v), 10)
                        end
                    end
                end
                HutBox:AddDropdown('Type of Hut', {
                    Values = {"Big Ol' Hut", "God Hut", "Trade Hut"},
                    Default = "Big Ol' Hut", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Type of Hut',
                    Tooltip = 'Hut used to trap', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        hut = tostring(Value)
                    end
                })
                
                local findNearestPlayer = LPH_NO_VIRTUALIZE(function(radius)
                    if Player.Character.HumanoidRootPart then
                        local nearestPlayer, nearestDistance = nil, radius
                        
                        for _, player in ipairs(Players:GetPlayers()) do
                            if player ~= Player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                                local playerRootPart = player.Character.HumanoidRootPart
                                local distance = (Player.Character.HumanoidRootPart.Position - playerRootPart.Position).magnitude
                                if distance < nearestDistance then
                                    nearestPlayer = player
                                    nearestDistance = distance
                                end
                            end
                        end
                        
                        return nearestPlayer
                    end
                    
                    return nil
                end)
        
                HutBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
                    -- SyncToggleState only works with toggles.
                    -- It allows you to make a keybind which has its state synced with its parent toggle
                
                    -- Example: Keybind which you use to toggle flyhack, etc.
                    -- Changing the toggle disables the keybind state and toggling the keybind switches the toggle state
                
                    Default = 'H', -- String as the name of the keybind (MB1, MB2 for mouse buttons)
                    SyncToggleState = false,
                
                
                    -- You can define custom Modes but I have never had a use for it.
                    Mode = 'Toggle', -- Modes: Always, Toggle, Hold
                
                    Text = 'Auto Trap Player', -- Text to display in the keybind menu
                    NoUI = true, -- Set to true if you want to hide from the Keybind menu,
                
                    -- Occurs when the keybind is clicked, Value is `true`/`false`
                    Callback = function(Value)
                        if not chatBarFocused then
        
                        
                        local LocalPlayer = game:GetService("Players").LocalPlayer
                        local Remote = Packets['PlaceStructure']['send']
                        
                        local coordinates = {
                            Vector3.new(5,-3,-9),
                        }
                        
                        local radius = 55
                        local nearestPlayer = findNearestPlayer(radius)
                        if nearestPlayer then
                            for _, position in ipairs(coordinates) do
                                local playerRootPart = nearestPlayer.Character.HumanoidRootPart
                                Remote(
                                    playerRootPart.CFrame * position,
                                    hut,
                                    0,
                                    false
                                )
                                task.wait(0.1)
                            end
                        else
                            print("No players found within the radius")
                        end
                    end
                    end
                })
                SphereBox:AddDropdown('15x15 Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', Big_Ol_Hut, 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Structures',
                    Tooltip = 'Structures used to place', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sphere = Value
                    end
                })
                SphereBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player2 = game:GetService("Players").LocalPlayer
                        local RootPart = player2.Character.HumanoidRootPart
                        local cframe = RootPart.CFrame
                        
                        local Remote = Packets['PlaceStructure']['send']
                        
                        local coordinates = {
                                Vector3.new(7, -3, -7),
                            Vector3.new(0, -3, -14),
                            Vector3.new(0, -3, -21),
                            Vector3.new(0, -3, -28),
                            Vector3.new(0, -3, -35),
                            Vector3.new(0, -3, -42),
                            Vector3.new(0, -3, -49),
                            Vector3.new(0, -3, 7),
                            Vector3.new(0, -3, 14),
                            Vector3.new(0, -3, 21),
                            Vector3.new(0, -3, 28),
                            Vector3.new(0, -3, 35),
                            Vector3.new(0, -3, 42),
                            Vector3.new(0, -3, 49),
                            -- Missing plant box here
                            Vector3.new(7, -3, -7),
                            Vector3.new(7, -3, -14),
                            Vector3.new(7, -3, -21),
                            Vector3.new(7, -3, -28),
                            Vector3.new(7, -3, -35),
                            Vector3.new(7, -3, -42),
                            Vector3.new(7, -3, -49),
                            Vector3.new(7, -3, 7),
                            Vector3.new(7, -3, 14),
                            Vector3.new(7, -3, 21),
                            Vector3.new(7, -3, 28),
                            Vector3.new(7, -3, 35),
                            Vector3.new(7, -3, 42),
                            Vector3.new(7, -3, 49),
                            Vector3.new(7, -3, 0),
                            Vector3.new(0, -3, -7),
                            Vector3.new(-7, -3, -7),
                            Vector3.new(-7, -3, -14),
                            Vector3.new(-7, -3, -21),
                            Vector3.new(-7, -3, -28),
                            Vector3.new(-7, -3, -35),
                            Vector3.new(-7, -3, -42),
                            Vector3.new(-7, -3, -49),
                            Vector3.new(-7, -3, 7),
                            Vector3.new(-7, -3, 14),
                            Vector3.new(-7, -3, 21),
                            Vector3.new(-7, -3, 28),
                            Vector3.new(-7, -3, 35),
                            Vector3.new(-7, -3, 42),
                            Vector3.new(-7, -3, 49),
                            Vector3.new(-7, -3, 0),
                            Vector3.new(14, -3, -7),
                            Vector3.new(14, -3, -14),
                            Vector3.new(14, -3, -21),
                            Vector3.new(14, -3, -28),
                            Vector3.new(14, -3, -35),
                            Vector3.new(14, -3, -42),
                            Vector3.new(14, -3, -49),
                            Vector3.new(14, -3, 7),
                            Vector3.new(14, -3, 14),
                            Vector3.new(14, -3, 21),
                            Vector3.new(14, -3, 28),
                            Vector3.new(14, -3, 35),
                            Vector3.new(14, -3, 42),
                            Vector3.new(14, -3, 49),
                            Vector3.new(14, -3, 0),
                            Vector3.new(-14, -3, -7),
                            Vector3.new(-14, -3, -14),
                            Vector3.new(-14, -3, -21),
                            Vector3.new(-14, -3, -28),
                            Vector3.new(-14, -3, -35),
                            Vector3.new(-14, -3, -42),
                            Vector3.new(-14, -3, -49),
                            Vector3.new(-14, -3, 7),
                            Vector3.new(-14, -3, 14),
                            Vector3.new(-14, -3, 21),
                            Vector3.new(-14, -3, 28),
                            Vector3.new(-14, -3, 35),
                            Vector3.new(-14, -3, 42),
                            Vector3.new(-14, -3, 49),
                            Vector3.new(-14, -3, 0),
                            Vector3.new(21, -3, -7),
                            Vector3.new(21, -3, -14),
                            Vector3.new(21, -3, -21),
                            Vector3.new(21, -3, -28),
                            Vector3.new(21, -3, -35),
                            Vector3.new(21, -3, -42),
                            Vector3.new(21, -3, -49),
                            Vector3.new(21, -3, 7),
                            Vector3.new(21, -3, 14),
                            Vector3.new(21, -3, 21),
                            Vector3.new(21, -3, 28),
                            Vector3.new(21, -3, 35),
                            Vector3.new(21, -3, 42),
                            Vector3.new(21, -3, 49),
                            Vector3.new(21, -3, 0),
                            Vector3.new(-21, -3, -7),
                            Vector3.new(-21, -3, -14),
                            Vector3.new(-21, -3, -21),
                            Vector3.new(-21, -3, -28),
                            Vector3.new(-21, -3, -35),
                            Vector3.new(-21, -3, -42),
                            Vector3.new(-21, -3, -49),
                            Vector3.new(-21, -3, 7),
                            Vector3.new(-21, -3, 14),
                            Vector3.new(-21, -3, 21),
                            Vector3.new(-21, -3, 28),
                            Vector3.new(-21, -3, 35),
                            Vector3.new(-21, -3, 42),
                            Vector3.new(-21, -3, 49),
                            Vector3.new(-21, -3, 0),
                            Vector3.new(28, -3, -7),
                            Vector3.new(28, -3, -14),
                            Vector3.new(28, -3, -21),
                            Vector3.new(28, -3, -28),
                            Vector3.new(28, -3, -35),
                            Vector3.new(28, -3, -42),
                            Vector3.new(28, -3, -49),
                            Vector3.new(28, -3, 7),
                            Vector3.new(28, -3, 14),
                            Vector3.new(28, -3, 21),
                            Vector3.new(28, -3, 28),
                            Vector3.new(28, -3, 35),
                            Vector3.new(28, -3, 42),
                            Vector3.new(28, -3, 49),
                            Vector3.new(28, -3, 0),
                            Vector3.new(-28, -3, -7),
                            Vector3.new(-28, -3, -14),
                            Vector3.new(-28, -3, -21),
                            Vector3.new(-28, -3, -28),
                            Vector3.new(-28, -3, -35),
                            Vector3.new(-28, -3, -42),
                            Vector3.new(-28, -3, -49),
                            Vector3.new(-28, -3, 7),
                            Vector3.new(-28, -3, 14),
                            Vector3.new(-28, -3, 21),
                            Vector3.new(-28, -3, 28),
                            Vector3.new(-28, -3, 35),
                            Vector3.new(-28, -3, 42),
                            Vector3.new(-28, -3, 49),
                            Vector3.new(-28, -3, 0),
                            Vector3.new(35, -3, -7),
                            Vector3.new(35, -3, -14),
                            Vector3.new(35, -3, -21),
                            Vector3.new(35, -3, -28),
                            Vector3.new(35, -3, -35),
                            Vector3.new(35, -3, -42),
                            Vector3.new(35, -3, -49),
                            Vector3.new(35, -3, 7),
                            Vector3.new(35, -3, 14),
                            Vector3.new(35, -3, 21),
                            Vector3.new(35, -3, 28),
                            Vector3.new(35, -3, 35),
                            Vector3.new(35, -3, 42),
                            Vector3.new(35, -3, 49),
                            Vector3.new(35, -3, 0),
                            Vector3.new(-35, -3, -7),
                            Vector3.new(-35, -3, -14),
                            Vector3.new(-35, -3, -21),
                            Vector3.new(-35, -3, -28),
                            Vector3.new(-35, -3, -35),
                            Vector3.new(-35, -3, -42),
                            Vector3.new(-35, -3, -49),
                            Vector3.new(-35, -3, 7),
                            Vector3.new(-35, -3, 14),
                            Vector3.new(-35, -3, 21),
                            Vector3.new(-35, -3, 28),
                            Vector3.new(-35, -3, 35),
                            Vector3.new(-35, -3, 42),
                            Vector3.new(-35, -3, 49),
                            Vector3.new(-35, -3, 0),
                            Vector3.new(42, -3, -7),
                            Vector3.new(42, -3, -14),
                            Vector3.new(42, -3, -21),
                            Vector3.new(42, -3, -28),
                            Vector3.new(42, -3, -35),
                            Vector3.new(42, -3, -42),
                            Vector3.new(42, -3, -49),
                            Vector3.new(42, -3, 7),
                            Vector3.new(42, -3, 14),
                            Vector3.new(42, -3, 21),
                            Vector3.new(42, -3, 28),
                            Vector3.new(42, -3, 35),
                            Vector3.new(42, -3, 42),
                            Vector3.new(42, -3, 49),
                            Vector3.new(42, -3, 0),
                            Vector3.new(-42, -3, -7),
                            Vector3.new(-42, -3, -14),
                            Vector3.new(-42, -3, -21),
                            Vector3.new(-42, -3, -28),
                            Vector3.new(-42, -3, -35),
                            Vector3.new(-42, -3, -42),
                            Vector3.new(-42, -3, -49),
                            Vector3.new(-42, -3, 7),
                            Vector3.new(-42, -3, 14),
                            Vector3.new(-42, -3, 21),
                            Vector3.new(-42, -3, 28),
                            Vector3.new(-42, -3, 35),
                            Vector3.new(-42, -3, 42),
                            Vector3.new(-42, -3, 49),
                            Vector3.new(-42, -3, 0),
                        }
                        
                        for _, position in ipairs(coordinates) do
                            Remote(
                                cframe*position,
                                sphere,
                                0,
                                false
                            )
                            wait(0.3)
                        end
                    end
                })
                EzBox:AddDropdown('Ez Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', Big_Ol_Hut, 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Structures',
                    Tooltip = 'Structures used to type Ez', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        Ez = Value
                    end
                })
                EzBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player3 = game:GetService("Players").LocalPlayer
            local RootPart = player3.Character.HumanoidRootPart
            local cframe = RootPart.CFrame
            
            local Remote = Packets['PlaceStructure']['send']
            
            local coordinates = {
                Vector3.new(-35, -3, 0),
                Vector3.new(-35, -3, 7), 
                Vector3.new(-35, -3, -7), 
                Vector3.new(-35, -3, 14), 
                Vector3.new(-35, -3, -14), 
                Vector3.new(-35, -3, 21), 
                Vector3.new(-35, -3, -21), 
                Vector3.new(-35, -3, 28),
                Vector3.new(-35, -3, -28), 
                Vector3.new(-28, -3, -28), 
                Vector3.new(-21, -3, -28),
                Vector3.new(-14, -3, -28), 
                Vector3.new(-7, -3, -28), 
                Vector3.new(-28, -3, 0), 
                Vector3.new(-21, -3, 0), 
                Vector3.new(-14, -3, 0), 
                Vector3.new(-7, -3, 0), 
                Vector3.new(-28, -3, 28), 
                Vector3.new(-21, -3, 28), 
                Vector3.new(-14, -3, 28), 
                Vector3.new(-7, -3, 28), 
                Vector3.new(7, -3, -10), 
                Vector3.new(14, -3, -10), 
                Vector3.new(21, -3, -10), 
                Vector3.new(28, -3, -10), 
                Vector3.new(28, -3, -3), 
                Vector3.new(21, -3, 4), 
                Vector3.new(14, -3, 10), 
                Vector3.new(7, -3, 17), 
                Vector3.new(7, -3, 24), 
                Vector3.new(14, -3, 24), 
                Vector3.new(21, -3, 24), 
                Vector3.new(28, -3, 24), 
            }
            
            for _, position in ipairs(coordinates) do
                Remote(
                    cframe*position,
                    Ez,
                    0,
                    false
                )
                wait(0.3)
            end
                    end
                })
        
                PenisBox:AddDropdown('Penis Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', Big_Ol_Hut, 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Structures',
                    Tooltip = 'Structures used to make a penis', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        penis = Value
                    end
                })
                PenisBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player4 = game:GetService("Players").LocalPlayer
            local RootPart = player4.Character.HumanoidRootPart
            local cframe = RootPart.CFrame
            
            local Remote = Packets['PlaceStructure']['send']
            
            local coordinates = {
                Vector3.new(3, -3,  0), 
                Vector3.new(10, -3,  0),
                Vector3.new(17, -3,  0), 
                Vector3.new(24, -3,  0), 
                Vector3.new(31, -3,  0), 
                Vector3.new(3, -3,  7), 
                Vector3.new(3, -3,  14), 
                Vector3.new(3, -3,  21),
                Vector3.new(3, -3,  28), 
                Vector3.new(10, -3,  28), 
                Vector3.new(17, -3,  28), 
                Vector3.new(24, -3,  28), 
                Vector3.new(31, -3,  28), 
                Vector3.new(31, -3,  7), 
                Vector3.new(31, -3,  14), 
                Vector3.new(31, -3,  21), 
                Vector3.new(-3, -3,  0), 
                Vector3.new(-10, -3,  0), 
                Vector3.new(-17, -3,  0), 
                Vector3.new(-24, -3,  0), 
                Vector3.new(-31, -3,  0), 
                Vector3.new(-3, -3,  7), 
                Vector3.new(-3, -3,  14), 
                Vector3.new(-3, -3,  21), 
                Vector3.new(-3, -3,  28), 
                Vector3.new(-10, -3,  28), 
                Vector3.new(-17, -3,  28), 
                Vector3.new(-24, -3,  28), 
                Vector3.new(-31, -3,  28), 
                Vector3.new(-31, -3,  7), 
                Vector3.new(-31, -3,  14), 
                Vector3.new(-31, -3,  21), 
                Vector3.new(7, -3,  -7), 
                Vector3.new(7, -3,  -14), 
                Vector3.new(7, -3,  -21), 
                Vector3.new(7, -3,  -28), 
                Vector3.new(7, -3,  -35),
                Vector3.new(7, -3,  -42), 
                Vector3.new(7, -3,  -49), 
                Vector3.new(0, -3,  -49), 
                Vector3.new(-7, -3,  -49), 
                Vector3.new(-14, -3,  -49), 
                Vector3.new(-7, -3,  -7), 
                Vector3.new(-7, -3,  -14), 
                Vector3.new(-7, -3,  -21), 
                Vector3.new(-7, -3,  -28), 
                Vector3.new(-7, -3,  -35), 
                Vector3.new(-7, -3,  -42), 
                Vector3.new(-7, -3,  -49), 
                Vector3.new(0, -3,  -35), 
            }
            
            for _, position in ipairs(coordinates) do
                Remote(
                    cframe*position,
                    penis,
                    0,
                    false
                )
                wait(0.3)
            end
                    end
                })
                LBox:AddDropdown('L Structure', {
                    Values = { 'Campfire', 'Stable', 'Hut', 'Torch', 'Chest', 'Grinder','Lookout','Ice Gate','Wood Gate','Wood Wall','Sign','Wood Fence','Plant Box','Ladder', Big_Ol_Hut, 'Dock','Reinforced Chest','Table','Chair','Tower','Hovel','Coin Press','Trade Hut','Stone Gate','Stone Wall','Big Chair','Big Table','Bridge','Iron Turret','Iron Wall','Iron Gate','Void Torch','Void Gate','Crystal Gate','Crystal Wall','Magnetite Wall','Magnetite Gate','Emerald Gate','Emerald Wall','Infinity Chest','God Hut' },
                    Default = "", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Structures',
                    Tooltip = 'Structures used to make an L', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        L15 = Value
                    end
                })
                LBox:AddButton({
                    Text = "Place",
                    DoubleClick = false,
                    Tooltip = "Place Structures",
                    Func = function() 
                        local player4 = game:GetService("Players").LocalPlayer
            local RootPart = player4.Character.HumanoidRootPart
            local cframe = RootPart.CFrame
            
            local Remote = Packets['PlaceStructure']['send']
            
            local coordinates = {
                Vector3.new(-6, -3, -7), 
                Vector3.new(-6, -3, -14), 
                Vector3.new(-6, -3, -21), 
                Vector3.new(-6, -3, -28), 
                Vector3.new(-6, -3, -35), 
                Vector3.new(1, -3, -7), 
                Vector3.new(8, -3, -7), 
            }
            
            for _, position in ipairs(coordinates) do
                Remote(
                    cframe*position,
                    L15,
                    0,
                    false
                )
                wait(0.3)
            end
                    end
                })
                StraightBox:AddToggle('Place Straight', {
                    Text = 'Straight Placement',
                    Default = false,
                    Tooltip = 'Face the direction where the structures place straight', 
                    Callback = function(Value)
                        lookstraight = Value
                    end
                })
        
                local faceDirection = LPH_NO_VIRTUALIZE(function(directionVector)
                    local horizontalDirection = Vector3.new(directionVector.X, 0, directionVector.Z).Unit
                    Player.Character.HumanoidRootPart.CFrame = CFrame.lookAt(Player.Character.HumanoidRootPart.Position,
                    Player.Character.HumanoidRootPart.Position + horizontalDirection,
                                                                        Vector3.new(0, 1, 0))
                end)
                
                local isFacingWest = false
        
                UserInputService.InputBegan:Connect(function(input, isProcessed)
                    if isProcessed then
                        return
                    end
                
                    if lookstraight then
                        isFacingWest = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input, isProcessed)
                    if lookstraight then
                        isFacingWest = false
                    end
                end)
        
                local CSignal = nil
                LPH_NO_VIRTUALIZE(function()
                    Connections.awiuehfia =  RunService.RenderStepped:Connect(function()
                        if lookstraight then
                            faceDirection(Vector3.new(-1, 0, 0)) -- Face West (left)
                        end
                        if JumpPowerToggled then
                            Player.Character.Humanoid.UseJumpPower = false
                            Player.Character.Humanoid.JumpHeight = JumpPowerValue
                        else
                            if Player.Character.Humanoid.UseJumpPower == false then
                                Player.Character.Humanoid.UseJumpPower = true
                            end
                        end
                        if BowAimbot then
                            if not ShowVisualizer then
                                Visualizer.Visible = false
                            end
                            if Visualizer and ShowVisualizer then
                                Visualizer.Position = Vector2.new(UserInputService:GetMouseLocation().X,UserInputService:GetMouseLocation().Y)
                                Visualizer.Visible = true
                                Visualizer.NumSides = VisualizerSides
                                Visualizer.Color = VisualizerColor
                                Visualizer.Transparency = VisualizerTransparency
                                Visualizer.Radius = VisualizerRadius
                                Visualizer.Filled = VisualizerFilled
                                Visualizer.Thickness = VisualizerThickness
                            end
                        else
                            if Visualizer then
                                Visualizer.Visible = false
                            end
                        end
                    end)
                end)()
        
                -- VALENTINES 1
        
        
        
                -- HALLOWEEN 2
        
                --[[AutoCollectPumpkins:AddToggle('Auto Collect Pumpkins [QUEST]', {
                    Text = 'Auto Collect Pumpkins [QUEST]',
                    Default = false,
                    Tooltip = 'COLLECTS PUMPKINS [PLEASE USE A AXE]', 
                    Callback = function(Value)
                        Library:Notify("Please equip a axe to use collect pumpkin.")
                        autocollectpumpkins = Value
                    end
                })
        
                AutoCollectPumpkins:AddToggle('Auto Break Pumpkin Patch [QUEST]', {
                    Text = 'Auto Break Pumpkin Patch',
                    Default = false,
                    Tooltip = 'breaks pumpkin patches [QUEST]', 
                    Callback = function(Value)
                        Library:Notify("Please equip a axe to use collect pumpkin.")
                        autobreakpumpkinpatches = Value
                    end
                })
        
                task.spawn(function()
                    while true do
                        if BreakPoint then break end
                        pcall(function()
                            if autocollectpumpkins then
                                local closestPumpkin, dist = getClosestPumpkin()
                                if closestPumpkin and dist and Player.Character then
                                    Player.Character.HumanoidRootPart.CFrame = closestPumpkin.CFrame
                                    Packets['SwingTool']['send']({
                                        closestPumpkin
                                    })
                                end
                            end
                        end)
                        task.wait()
                    end
                end)
        
                task.spawn(function()
                    while true do
                        if BreakPoint then break end
                        pcall(function()
                            if autobreakpumpkinpatches then
                                local closestPumpkin, dist = getClosestPumpkinPatch()
                                if closestPumpkin and dist then
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = closestPumpkin.CFrame
                                    game.Packets['SwingTool']['send']({
                                        closestPumpkin
                                    })
                                end
                            end
                        end)
                        task.wait()
                    end
                end)]]
        
                CoinPressBox:AddSlider('Coin Press Range', {
                    Text = 'Range',
                    Default = 15,
                    Min = 0,
                    Max = 50,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        coinpressrange = Value
                    end
                })
                CoinPressBox:AddToggle('Coin Press Aura', {
                    Text = 'Coin Press Aura',
                    Default = false,
                    Tooltip = 'Toggle on/off Coin Press Aura', 
                    Callback = function(Value)
                        coinpress = Value
                    end
                })
                PickupBox:AddDropdown('Items', {
                    Values = { 'Gold','Raw Gold','Coin2','Magnetite','Raw Magnetite','Raw Iron', 'Crystal Chunk', 'Emerald', 'Pink Diamond', 'Void Shard', 'Essence', 'Log','Leaves','Wood','Iron','Berry','Bloodfruit','Stone','Egg'},
                    Default = 1, -- number index of the value / string
                    Multi = true, -- true / false, allows multiple choices to be selected
                
                    Text = 'Items',
                    Tooltip = 'Items to pickup', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        pickupitem = Value
                    end
                })
                PickupBox:AddToggle('Pick up items', {
                    Text = 'Pickup Items',
                    Default = false,
                    Tooltip = 'Toggle on/off item pickup', 
                    Callback = function(Value)
                        specificpickup = Value
                    end
                })
                -- xray function
                local x = LPH_NO_VIRTUALIZE(function(v)
                    if v then
                        for _, i in pairs(workspace:GetDescendants()) do
                            if i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass('Humanoid') and not i.Parent.Parent:FindFirstChildOfClass('Humanoid') then
                                i.LocalTransparencyModifier = 0.5
                            end
                        end
                    else
                        for _, i in pairs(workspace:GetDescendants()) do
                            if i:IsA("BasePart") and not i.Parent:FindFirstChildOfClass('Humanoid') and not i.Parent.Parent:FindFirstChildOfClass('Humanoid') then
                                i.LocalTransparencyModifier = 0
                            end
                        end
                    end
                end)
                
                xrayBox:AddToggle('X-Ray', {
                    Text = 'Toggle X-Ray',
                    Default = false,
                    Tooltip = 'See through structures', 
                    Callback = function(Value)
                        x(Value)
                    end
                })
                
                equipBox:AddDropdown('Equip Armor Set', {
                    Values = { 'God Set', 'Void Set', 'Pink Diamond Set', 'Emerald Set', 'Magnetite Set', 'Crystal Set', 'Adurite Set', 'Steel Set', 'Iron Set','Hide Set', 'Leaf Set'},
                    Default = "Armor Set", -- number index of the value / string
                    Multi = false, -- true / false, allows multiple choices to be selected
                
                    Text = 'Set',
                    Tooltip = 'Set to choose to equip', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        sets1 = Value
                    end
                })
                equipBox:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
                    Default = 'G', 
                    SyncToggleState = false,
                    Mode = 'Toggle',
                
                    Text = 'Equip Armor Keybind', 
                    NoUI = true, 
                
                    Callback = function(Value)
                        if not chatBarFocused then
                            if sets1 == "God Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["God Halo"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["God Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["God Legs"].LayoutOrder)
                            elseif sets1 == "Void Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Void Shroud"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Void Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Void Greaves"].LayoutOrder)
                            elseif sets1 == "Pink Diamond Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Pink Diamond Hood"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Pink Diamond Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Pink Diamond Greaves"].LayoutOrder)
                            elseif sets1 == "Emerald Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Emerald Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Emerald Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Emerald Greaves"].LayoutOrder)
                            elseif sets1 == "Magnetite Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Magnetite Mask"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Magnetite Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Magnetite Greaves"].LayoutOrder)
                            elseif sets1 == "Crystal Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Crystal Crown"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Crystal Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Crystal Greaves"].LayoutOrder)
                            elseif sets1 == "Adurite Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Adurite Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Adurite Chestplate"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Adurite Greaves"].LayoutOrder)
                            elseif sets1 == "Steel Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Steel Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Steel Greaves"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Steel Chestplate"].LayoutOrder)
                            elseif sets1 == "Iron Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Iron Helmet"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Iron Greaves"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Iron Chestplate"].LayoutOrder)
                            elseif sets1 == "Hide Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Hide Shirt"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Hide Pants"].LayoutOrder)
                            elseif sets1 == "Leaf Set" then
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Leaf Shirt"].LayoutOrder)
                                Packets['UseBagItem']['send'](game:GetService("Players").LocalPlayer.PlayerGui.MainGui.RightPanel.Inventory.List["Leaf Pants"].LayoutOrder)
                            end
                        end
                    end
                })
                consumeBox:AddToggle('Consume Dropped Food', {
                    Text = 'Eat',
                    Default = false,
                    Tooltip = 'Eat any dropped fruit/food on the ground', 
                    Callback = function(Value)
                        consume = Value
                    end
                })
        
                -- booga macros
                IsFixing = false
        
                local checkforfile = LPH_NO_VIRTUALIZE(function(MacroName)
                    if isfolder("Exceros Hub/Booga Macro") then
                        if isfile("Exceros Hub/Booga Macro/"..MacroName..".txt") then
                            return true
                        else
                            writefile("Exceros Hub/Booga Macro/"..MacroName..".txt", "{}")
                            return false
                        end
                    end
                end)
                
                local Macro_Folder_For_Encode = {}
        
                task.spawn(function()
                    if isfolder("Exceros Hub") then
                        if not isfolder("Exceros Hub/Booga Macro") then
                            makefolder("Exceros Hub/Booga Macro")
                        end
                    end
                end)
        
                -- booga macros stuff
                MacrosBox:AddInput('Macro Name', {
                    Default = 'Macro Name',
                    Numeric = false,
                    Finished = true,
                
                    Text = 'Macro Name',
                    Tooltip = 'Sets the macro you want it to become when you record it.',
                
                    Placeholder = 'Macro Name', 
        
                    Callback = function(Value)
                        MacroName = tostring(Value)
                    end
                })
                MacrosBox:AddButton({
                    Text = "Record Macro",
                    DoubleClick = false,
                    Tooltip = "record macro",
                    Func = function()
                        if #MacroName == 0 then
                            Library:Notify("❌ Please input a macro name that is not nil", 5)
                            return
                        end
                        if not Recording and not IsFixing then
                            Recording = true
                            checkforfile(MacroName)
                            if isfolder("Exceros Hub/Booga Macro") then
                                local RecordTime = tick()
                                task.spawn(function()
                                    while task.wait(1) do
                                        local Position = Player.Character.HumanoidRootPart.CFrame.Position
                                        Macro_Folder_For_Encode[tostring(getTableSize(Macro_Folder_For_Encode)+1)] = {Position.X,Position.Y,Position.Z,(tick()-RecordTime)}
                                        if (getTableSize(Macro_Folder_For_Encode)+1) == 2 and ShowMacroFrames then
                                            local trackerPart = Instance.new("Part")
                                            trackerPart.Color = Color3.fromRGB(0,255,0)
                                            trackerPart.Anchored = true
                                            trackerPart.CanCollide = false
                                            trackerPart.Size = Vector3.new(1,1,1)
                                            trackerPart.Position = Position
                                            trackerPart.Parent = MacroPositionFolder
                                        elseif (getTableSize(Macro_Folder_For_Encode)+1) ~= 2 and ShowMacroFrames then
                                            local trackerPart = Instance.new("Part")
                                            trackerPart.Color = Color3.fromRGB(255,0,0)
                                            trackerPart.Anchored = true
                                            trackerPart.CanCollide = false
                                            trackerPart.Size = Vector3.new(1,1,1)
                                            trackerPart.Position = Position
                                            trackerPart.Parent = MacroPositionFolder
                                        end
                                        Library:Notify("✅ Macro Frame Recorded " .. tostring(Position) .. " With a Index of " .. tostring(getTableSize(Macro_Folder_For_Encode)+1), 5)
                                        if Recording == false then 
                                            Library:Notify("✅ Macro " .. MacroName .. " Successfully Recorded!", 5) 
                                            writefile("Exceros Hub/Booga Macro/"..MacroName..".txt", encodeData(Macro_Folder_For_Encode))
                                            IsFixing = true
                                            task.delay(3, function()
                                                table.clear(Macro_Folder_For_Encode)
                                                IsFixing = false
                                                Library:Notify("✅[DEV] Table Fixed", 5)
                                            end)
                                            break 
                                        end
                                    end
                                end)
                            else
                                Library:Notify("❌ Failed to Locate Booga Macro Folder", 5)
                            end
                        else
                            Library:Notify("✅ Ended Recording Session", 5)
                            Recording = false
                        end
                    end,
                })
                MacrosBox:AddToggle('Show Macro Positions', {
                    Text = 'Show Macro Positions',
                    Default = false,
                    Tooltip = 'Shows Macro Positions', 
                    Callback = function(Value)
                        ShowMacroFrames = Value
                    end
                })
        
                MacrosBox:AddDivider()
                
                MacrosBox:AddDropdown('Macros Available', {
                    Values = {},
                    Default = 1,
                    Multi = false, 
                
                    Text = 'Macros Available',
                    Tooltip = 'macros you have in your workspace files', -- Information shown when you hover over the dropdown
                
                    Callback = function(Value)
                        MacroSelected = tostring(Value)
                    end
                })
        
                task.spawn(LPH_NO_VIRTUALIZE(function()
                    if isfolder("Exceros Hub/Booga Macro") then
                        local ListFiles = listfiles("Exceros Hub/Booga Macro")
                        local FilesFound = {}
                        local FinalFound = {}
                        for index,file in pairs(ListFiles) do
                            table.insert(FilesFound, tostring(file):split("\\")[2])
                        end
                        for i,v in pairs(FilesFound) do 
                            if isfile("Exceros Hub/Booga Macro/"..v) then 
                                Library:Notify("✅ Macro File " .. tostring(v) .. " was found successfully!", 5)
                                table.insert(FinalFound, v)
                            else
                                Library:Notify("❌ Macro File " .. tostring(v) .. " was returned isfile false.", 5)
                            end 
                        end
                        Options["Macros Available"]:SetValues(FinalFound)
                        Options["Macros Available"]:SetValues(nil)
                    else
                        Library:Notify("❌ Failed to get booga macro folder", 5)
                    end
                end))
        
                MacrosBox:AddButton({
                    Text = "Refresh Macros",
                    DoubleClick = false,
                    Tooltip = "Refresh Macros",
                    Func = function()
                        if isfolder("Exceros Hub/Booga Macro") then
                            local ListFiles = listfiles("Exceros Hub/Booga Macro")
                            local FilesFound = {}
                            local FinalFound = {}
                            for index,file in pairs(ListFiles) do
                                table.insert(FilesFound, tostring(file):split("\\")[2])
                            end
                            for i,v in pairs(FilesFound) do 
                                if isfile("Exceros Hub/Booga Macro/"..v) then 
                                    Library:Notify("✅ Macro File " .. tostring(v) .. " was found successfully!", 5)
                                    table.insert(FinalFound, v)
                                else
                                    Library:Notify("❌ Macro File " .. tostring(v) .. " was returned isfile false.", 5)
                                end 
                            end
                            Options["Macros Available"]:SetValues(FinalFound)
                            Options["Macros Available"]:SetValues(nil)
                        else
                            Library:Notify("❌ Refresh Failed | Couldn't find Booga Macro Folder", 5)
                        end
        
                    end,
                })
        
        
                    local function PlayMacroFunction() -- instead of using Func we hav eto use this so we can call it back
                        if MacroSelected ~= "" and MacroSelected ~= nil and #MacroSelected ~= 0 then
                            if not Recording then
                                if isfile("Exceros Hub/Booga Macro/"..MacroSelected) then
                                    local DecodedData = decodeData(readfile("Exceros Hub/Booga Macro/"..MacroSelected))
                                    if DecodedData then
                                        if getTableSize(DecodedData) == 0 then
                                            Library:Notify("❌ Macro " .. MacroSelected .. ".txt has no data in it!", 5)
                                            return
                                        end
                                        local sortedKeys = {}
                                        for k, _ in pairs(DecodedData) do
                                            table.insert(sortedKeys, k)
                                        end
                                        table.sort(sortedKeys, sortKeysAscending)
                                        local reorderedTable = {}
                                        for _, k in ipairs(sortedKeys) do
                                            reorderedTable[tonumber(k)] = DecodedData[k]
                                        end
                                        local PlayTime = os.time()
        
                                        for i,v in pairs(reorderedTable) do
                                            local X,Y,Z = 0,0,0
                                            local Time = 0
                                            for i2,v2 in pairs(v) do
                                                if (i2==1) then
                                                    X = v2
                                                elseif (i2==2) then
                                                    Y = v2
                                                elseif (i2==3) then
                                                    Z = v2
                                                elseif (i2==4) then
                                                    Time = v2
                                                end
                                            end
                                            local totalVector = Vector3.new(X,Y,Z)
                                            local vectorDistance = (Player.Character.HumanoidRootPart.Position-totalVector).Magnitude
                                            print(i,totalVector,vectorDistance,Time)
                            
                                            repeat task.wait() 
                                            until (os.time()-PlayTime) >= Time
                            
                                            local TweenMade = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(vectorDistance/MacroSpeed), {CFrame = CFrame.new(totalVector)})
                                            TweenMade:Play()
                                            TweenMade.Completed:Wait()
                                            if vectorDistance <= 3 then
                                                Library:Notify("✅ Completed Tween " .. tostring(i) .. " " .. tostring(os.time()-PlayTime) .. " " .. tostring(Time), 5)
                                            else
                                                PlayTime = Time - 1
                                            end
        
                                            if i >= getTableSize(reorderedTable) then
                                                if LoopPlayMacro then
                                                    Library:Notify("✅ Completed Macro, replaying...", 5)
                                                    PlayMacroFunction()
                                                end
                                            end
                                        end
        
                                    else
                                        Library:Notify("❌ Failed to decode" .. MacroSelected .. " data.", 5)
                                    end
                                else
                                    Library:Notify("❌ Couldn't find macro template " .. MacroSelected .. " in Booga Macro folder.", 5)
                                end
                            end
                        else
                            Library:Notify("❌ Please input a macro name to record.", 5)
                        end
                    end
        
                MacrosBox:AddButton({
                    Text = "Play Selected Macro",
                    DoubleClick = false,
                    Tooltip = "Play Macro Selected",
                    Func = function()
                        PlayMacroFunction()
                    end,
                })
        
                MacrosBox:AddSlider('Macro Tween Speed', {
                    Text = 'Macro Tween Speed',
                    Default = 12,
                    Min = 0,
                    Max = 15,
                    Rounding = 0,
                    Compact = false,
                
                    Callback = function(Value)
                        MacroSpeed = Value
                    end
                })
        
                MacrosBox:AddToggle('Loop Play Macro', {
                    Text = 'Loop Play Macro',
                    Default = false,
                    Tooltip = 'Plays the macro over and over', 
                    Callback = function(Value)
                        LoopPlayMacro = Value
                    end
                })
        
                MacrosBox:AddButton({
                    Text = "Destroy Macro Positions",
                    DoubleClick = false,
                    Tooltip = "Destroy Macro Positions ( the visualize parts )",
                    Func = function()
                        for _,part in pairs(MacroPositionFolder:GetChildren()) do
                            part:Destroy() 
                        end
                    end,
                })
        
            -- library shit
            Library.KeybindFrame.Visible = false; -- todo: add a function for this
            
            Library:OnUnload(function()
                pcall(function()
                    for i,v in pairs(Connections) do v:Disconnect() end
                    for i2,v2 in pairs(Ores) do if v2.Drawing then v2.Drawing:Remove() table.remove(Ores, i2) end end
                    for i3,v3 in pairs(PlayerESP) do if v3.Drawing then v3.Drawing:Remove() table.remove(PlayerESP, i3) end end
                    for i4,v4 in pairs(ArmorESP) do if v4.Drawing then v4.Drawing:Remove() table.remove(ArmorESP, i4) end end
                    for i5,v5 in pairs(Cons) do v5:Disconnect() end
                    for i6,v6 in pairs(HeartESPTables) do if v6.Drawing then v6.Drawing:Remove() table.remove(HeartESPTables, i6) end end
                    for i7,v7 in pairs(TreasureESPTable) do if v7.Drawing then v7.Drawing:Remove() table.remove(TreasureESPTable, i7) end end
                    if Float then Float:Destroy() end
                    if Visualizer then Visualizer:Remove() Visualizer = nil end
                    if MacroPositionFolder then MacroPositionFolder:Destroy() end
                end)
                BreakPoint = true
                Library.Unloaded = true
            end)
            
            local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
            
            MenuGroup:AddButton('Unload', function() Library:Unload() end)
            MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
            
            Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
            
            ThemeManager:SetLibrary(Library)
            SaveManager:SetLibrary(Library)
            SaveManager:IgnoreThemeSettings()
            SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
            ThemeManager:SetFolder('Exceros Hub')
            SaveManager:SetFolder('Exceros Hub/Booga Booga Reborn')
            SaveManager:BuildConfigSection(Tabs['UI Settings'])
            ThemeManager:ApplyToTab(Tabs['UI Settings'])
            SaveManager:LoadAutoloadConfig()
        
            
            local ExtraSettings = Tabs['UI Settings']:AddRightGroupbox('Keybind Menu')
            ExtraSettings:AddToggle('Keybind Menu', {
                Text = 'Keybind Menu',
                Default = false,
                Tooltip = 'Keybind Menu', 
                Callback = function(Value)
                    Library.KeybindFrame.Visible = Value
                end
            })
        
            -- Auto Toggle for Everything
            local TogglesTest = getgenv().Toggles
            for i,v in pairs(TogglesTest) do
                if type(v) == "table" then
                    if v.TextLabel and not string.find(v.TextLabel.Text, "Pumpkin") then
                        v:AddKeyPicker('KeyPicker', {
                            Default = '',
                            SyncToggleState = true,
                            Mode = 'Toggle',
                            Text = tostring(i),
                            NoUI = true, 
                        })
                    end
                end
            end
        end
    end
end
if GameToLoad == "Project Lazarus" then -- [[ Project Lazarus Loader ]]    
 -- Project Lazarus AC Bypass
LRM_INIT_SCRIPT(function()
    hookfunction(gcinfo, function(...)
        return math.random(100, 350)
    end)
    hookfunction(collectgarbage, function(...)
        return math.random(100, 350)
    end)
end)

local Blacklisted = {
    "MemCheck",
    "ESP",
    "W",
    "W1",
    "W2",
    "W3",
    "ZombieBox",
    "AC Tamper",
}

LPH_NO_VIRTUALIZE(function()
    local ClientBypass; ClientBypass = hookmetamethod(game, "__namecall", function(Self, ...)
        if not checkcaller() and typeof(Self) == "Instance" then
            if tostring(Self) == "SendData" and (getnamecallmethod() == "fireServer" or getnamecallmethod() == "FireServer") then
                local Args = {...}
                if (Args[1] and typeof(Args[1]) == "string") then
                    if table.find(Blacklisted, tostring(Args[1])) then
                        return
                    end
                end
            end
        end
        return ClientBypass(Self, ...)
    end)
end)()

-- IMPORTANT
local ClientKey = nil -- NEED KEY FOR AUTOFARM

-- lib

local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = "Exceros Hub || Project Lazarus",
    Center = true,
    AutoShow = true,
    TabPadding = 4,
    MenuFadeTime = 0.1
})

local Tabs = {
    Main = Window:AddTab('Main'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Services
local Players = game:GetService('Players')
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Lighting = game:GetService("Lighting")
local UserInputService = game:GetService("UserInputService")

local Player = Players.LocalPlayer

-- Connections
local Connections = {}
local Hooks = {}

-- Groupboxes

local WeaponModsBox = Tabs.Main:AddLeftGroupbox("Mods")
local CombatBox = Tabs.Main:AddLeftGroupbox("Combat")
local FarmingSection = Tabs.Main:AddRightGroupbox("Autofarm")
local ExploitsSection = Tabs.Main:AddRightGroupbox("Exploits")
local EspSection = Tabs.Main:AddRightGroupbox("ESP")

-- variables
local OneTapZombies = false
local KillAllZombies = false
local InfinitePoints = false
local KnifeAura = false
local KnifeAuraRange = 12
local CollectPowerups = false
local ZombieESP = false
local ZombieESPDistance = false
local ZombieColor = Color3.fromRGB(0, 255, 85)
local ShowZombieHealth = false
local HealthSetting = "Percent"

WeaponModsBox:AddToggle('Infinite Ammo', {
    Text = 'Infinite Ammo',
    Default = false,
    Tooltip = 'Infinite Ammo', 
    Callback = LPH_JIT_MAX(function(Value)
        if Value == true then
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "Ammo") then
                    rawset(v, "Ammo", math.huge)
                end
            end
        end
    end)
})

WeaponModsBox:AddToggle('No Recoil', {
    Text = 'No Recoil',
    Default = false,
    Tooltip = 'no recoil lol', 
    Callback = LPH_JIT_MAX(function(Value)
        if Value == true then
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "ViewKick") then
                    if typeof(rawget(v, "ViewKick")) == "table" then
                        for i2,v2 in pairs(rawget(v, "ViewKick")) do
                            rawset(v2, "Min", 0)
                            rawset(v2, "Max", 0)
                        end
                    end
                end
            end
        end
    end)
})

WeaponModsBox:AddToggle('No Spread', {
    Text = 'No Spread',
    Default = false,
    Tooltip = 'no Spread lol', 
    Callback = LPH_JIT_MAX(function(Value)
        if Value == true then
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "Spread") then
                    if typeof(rawget(v, "Spread")) == "number" then
                        rawset(v, "Spread", 0)
                    elseif typeof(rawget(v, "Spread")) == "table" then
                        rawset(rawget(v, "Spread"), "Min", 0)
                        rawset(rawget(v, "Spread"), "Max", 0)
                    end
                end
            end
        end
    end)
})

WeaponModsBox:AddSlider('Fire-Rate', {
    Text = 'Fire-Rate',
    Default = 0,
    Min = 0,
    Max = 1,
    Rounding = 5,
    Compact = false,

    Callback = LPH_JIT_MAX(function(Value)
        for i,v in next, getgc(true) do
            if type(v) == "table" and rawget(v, "FireTime") then
                rawset(v, "FireTime", tonumber(Value))
            end
        end
    end)
})

WeaponModsBox:AddSlider('Bullet Penetration', {
    Text = 'Bullet Penetration',
    Default = 1,
    Min = 0,
    Max = 10000,
    Rounding = 0,
    Compact = false,

    Callback = LPH_JIT_MAX(function(Value)
        for i,v in next, getgc(true) do
            if type(v) == "table" and rawget(v, "BulletPenetration") then
                rawset(v, "BulletPenetration", Value)
            end
        end
    end)
})

-- main combat
CombatBox:AddToggle('One Tap Zombies', {
    Text = 'One Tap Zombies',
    Default = false,
    Tooltip = 'one tap zombies', 
    Callback = function(Value)
        OneTapZombies = Value
    end
})

CombatBox:AddDivider()

CombatBox:AddToggle('Knife Aura', {
    Text = 'Knife Aura',
    Default = false,
    Tooltip = 'knifes zombies around u', 
    Callback = function(Value)
        KnifeAura = Value
    end
})

CombatBox:AddSlider('Aura Range', {
    Text = 'Aura Range',
    Default = 12,
    Min = 0,
    Max = 500,
    Rounding = 0,
    Compact = false,

    Callback = function(Value)
        KnifeAuraRange = Value
    end
})

-- autofarm
FarmingSection:AddToggle('Kill-All Zombies', {
    Text = 'Kill-All Zombies',
    Default = false,
    Tooltip = 'autofarm zombies', 
    Callback = function(Value)
        KillAllZombies = Value
    end
})

FarmingSection:AddToggle('Auto-Collect Powerups', {
    Text = 'Auto-Collect Powerups',
    Default = false,
    Tooltip = 'collects powerup for ue', 
    Callback = function(Value)
        CollectPowerups = Value
    end
})

-- exploits section
ExploitsSection:AddToggle('Infinite Points', {
    Text = 'Infinite Points',
    Default = false,
    Tooltip = 'infinite points', 
    Callback = function(Value)
        InfinitePoints = Value
    end
})

-- esp
EspSection:AddToggle('Zombie ESP', {
    Text = 'Zombie ESP',
    Default = false,
    Tooltip = 'Zombie ESP', 
    Callback = function(Value)
        ZombieESP = Value
    end
}):AddColorPicker('ESP Color', {
    Default = Color3.fromRGB(0, 255, 85), 
    Title = 'Zombie ESP Color', 
    Transparency = nil,

    Callback = function(Value)
        ZombieColor = Value
    end
})

EspSection:AddToggle('Show Distance', {
    Text = 'Show Distance',
    Default = false,
    Tooltip = 'show distance from zobie', 
    Callback = function(Value)
        ZombieESPDistance = Value
    end
})

EspSection:AddToggle('Show Health', {
    Text = 'Show Health',
    Default = false,
    Tooltip = 'show distance from zobie', 
    Callback = function(Value)
        ShowZombieHealth = Value
    end
})

EspSection:AddDropdown('Health Display Type', {
    Values = {
        "Percent",
        "MaxHealth",
    },
    Default = 1, -- number index of the value / string
    Multi = false, -- true / false, allows multiple choices to be selected

    Text = 'Health Display Type',
    Tooltip = 'shows maxhealth % of maxhealth/health', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        HealthSetting = tostring(Value)
    end
})

local Hook; Hook = hookmetamethod(game, "__namecall", LPH_NO_VIRTUALIZE(function(self, ...)
    if not checkcaller() and typeof(self) == "Instance" and OneTapZombies then
        if (getnamecallmethod() == "FireServer") and tostring(self) == "Damage" then
            local Args = {...}
            if (Args[1] and typeof(Args[1]) == "table" and Args[1]["Damage"]) then
                Args[1]["Damage"] = 100000
                return self.FireServer(self, table.unpack(Args))
            end
        end
    end
    return Hook(self, ...)
end))

-- esp for zombies
local Zombies_ESP = {}
local function AddToTable(model)
    local Con1
    local totalModelData = {}
    local TextDrawing = Drawing.new("Text")
    TextDrawing.Size = 16
    TextDrawing.Visible = false
    TextDrawing.Outline = true
    TextDrawing.Center = true
    TextDrawing.Text = tostring(model)
    TextDrawing.Color = Color3.fromRGB(19, 207, 60)
    totalModelData.Drawing = TextDrawing
    totalModelData.Model = model
    totalModelData.Name = tostring(model)
    table.insert(Zombies_ESP, totalModelData)
    Con1 = model.AncestryChanged:Connect(function(old,new)
        if old == nil or new == nil then
            Con1:Disconnect()
        end
    end)
end

Connections.Zombie_ESPLoop = RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
    pcall(function()
        for i,v in pairs(Zombies_ESP) do
            if v.Model ~= nil and v.Drawing ~= nil then
                if ZombieESP and v.Model:FindFirstChild("HumanoidRootPart") then
                    local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model.HumanoidRootPart.Position + Vector3.new(0, 2, 0))
                    if OnScreen then
                        local finalstring = tostring(v.Name)
                        if ZombieESPDistance then
                            finalstring = finalstring .. " [" .. tostring(math.floor((Player.Character.HumanoidRootPart.Position-v.Model.HumanoidRootPart.Position).Magnitude)) .. "m]"
                        end
                        if ShowZombieHealth then
                            if HealthSetting == "Percent" then
                                if ZombieESPDistance then
                                    finalstring = finalstring .. "\n" .. tostring(math.floor(v.Model.Humanoid.Health/v.Model.Humanoid.MaxHealth*100)) .. "%"
                                else
                                    finalstring = finalstring .. " " .. tostring(math.floor(v.Model.Humanoid.Health/v.Model.Humanoid.MaxHealth*100)) .. "%"
                                end
                            else
                                if ZombieESPDistance then
                                    finalstring = finalstring .. "\n" .. tostring(math.floor(v.Model.Humanoid.Health)) .. "/" .. tostring(math.floor(v.Model.Humanoid.MaxHealth)) .. " HP"
                                else
                                    finalstring = finalstring .. " " .. tostring(math.floor(v.Model.Humanoid.Health)) .. "/" .. tostring(math.floor(v.Model.Humanoid.MaxHealth)) .. " HP"
                                end
                            end
                        end
                        v.Drawing.Text = tostring(finalstring)
                        v.Drawing.Visible = true
                        v.Drawing.Color = ZombieColor
                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                    else
                        v.Drawing.Visible = false
                    end
                else
                    v.Drawing.Visible = false
                end
            else
                v.Drawing.Visible = false
                v.Drawing:Remove()
                table.remove(Zombies_ESP, i)
            end
        end
    end)
end))

for i,v in pairs(workspace.Baddies:GetChildren()) do
    AddToTable(v)
end
workspace.Baddies.ChildAdded:Connect(function(child)
    AddToTable(child)
end)
workspace.Baddies.ChildRemoved:Connect(function(child)
    for i,v in pairs(Zombies_ESP) do
        if v.Model == child then
            v.Model = nil
        end
    end
end)

-- main loop
Connections.MainLoop = RunService.RenderStepped:Connect(LPH_JIT_MAX(function(deltaTime)
    pcall(function()
        if ClientKey == nil and Player.Character and Player.Character:FindFirstChild("WeaponScript") and getsenv then
            local Environment = getsenv(Player.Character.WeaponScript)
            if Environment then
                for i,v in pairs(Environment) do
                    if tostring(i) == "Knife" then
                        for i2,v2 in pairs(debug.getupvalues(v)) do
                            if type(v2) == "number" and i2 == 24 then
                                ClientKey = v2
                            elseif type(v2) == "number" and v2 < 1 and i2 ~= 24 then
                                ClientKey = v2
                            end
                        end
                    end
                end
            end
        end
        if Player and Player.Character then
            
            if ClientKey ~= nil then
                if KillAllZombies then
                    for i,v in pairs(workspace.Baddies:GetChildren()) do
                        if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 and v.Humanoid:FindFirstChild('Damage') then
                            v.Humanoid.Damage:FireServer({["Knifed"] = true, ["Damage"] = 1000000, ["WeaponName"] = "Knife", ["BodyPart"] = v.HumanoidRootPart}, ClientKey)
                        end
                    end
                end
                if InfinitePoints then
                    for i,v in pairs(workspace.Baddies:GetChildren()) do
                        if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 and v.Humanoid:FindFirstChild('Damage') then
                            v.Humanoid.Damage:FireServer({["Knifed"] = true, ["Damage"] = 0, ["WeaponName"] = "Knife", ["BodyPart"] = v.HumanoidRootPart}, ClientKey)
                        end
                    end
                end
                if KnifeAura then
                    for i,v in pairs(workspace.Baddies:GetChildren()) do
                        if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health > 0 and v.Humanoid:FindFirstChild('Damage') then
                            if (Player.Character.HumanoidRootPart.Position-v.HumanoidRootPart.Position).Magnitude <= KnifeAuraRange then
                                v.Humanoid.Damage:FireServer({["Knifed"] = true, ["Damage"] = 1000000, ["WeaponName"] = "Knife", ["BodyPart"] = v.HumanoidRootPart}, ClientKey)
                            end
                        end
                    end
                end

            end -- end of key check
            if CollectPowerups then
                for i,v in pairs(workspace.Ignore:GetChildren()) do
                    if v:IsA('Model') and (v:FindFirstChild("PowerUpScript") or v:FindFirstChild("PowerUp")) then
                        if v:FindFirstChild("Sphere").Transparency ~= 1 then
                            if v.PrimaryPart then
                                Player.Character.HumanoidRootPart.CFrame = v.PrimaryPart.CFrame
                            else
                                Player.Character.HumanoidRootPart.CFrame = v:FindFirstChildOfClass("BasePart").CFrame
                            end
                        end
                    end
                end
            end
        end -- end of char check
    end)
end))
-- setup

Library.KeybindFrame.Visible = false; -- todo: add a function for this

Library:OnUnload(function()
    for i,v in pairs(Connections) do v:Disconnect() end
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('Exceros Hub')
SaveManager:SetFolder('Exceros Hub/Project Lazarus')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()
end
if GameToLoad == "Adventure Story" then -- [[ Adventure Story Loader ]]
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
    
    local Window = Library:CreateWindow({
        Title = "Exceros Hub || Adventure Story!",
        Center = true,
        AutoShow = true,
        TabPadding = 4,
        MenuFadeTime = 0.2
    })
    
    local Tabs = {
        Main = Window:AddTab('Main'),
        Functions = Window:AddTab("Functions"),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }
    
    -- Services
    local Players = game:GetService('Players')
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Lighting = game:GetService("Lighting")
    local UserInputService = game:GetService("UserInputService")
    
    local Player = Players.LocalPlayer
    
    local BasicFunctions = require(ReplicatedStorage:WaitForChild("RS", 5):WaitForChild("Modules",5):WaitForChild("BasicFunctions",5))
    local ClientSkills = require(ReplicatedStorage:WaitForChild("RS",5):WaitForChild("Modules",5):WaitForChild("Skills").Client)

    if not success then
        Library:Notify(tostring(error), 5)
    end
    -- Connections
    local Connections = {}
    local Hooks = {}
    local Functions = {}
    
    -- Groupbox
    local FarmGroupBox = Tabs.Main:AddRightGroupbox("Farming")
    local MobSector = Tabs.Main:AddRightGroupbox("Mobs")
    local LocalBox = Tabs.Main:AddLeftGroupbox("Local")
    local MiscBox = Tabs.Main:AddLeftGroupbox("Misc")
    local Exploits = Tabs.Main:AddRightGroupbox("Exploits")
    local ButtonsBox = Tabs.Functions:AddLeftGroupbox("Functions")
    local AutoFarmBox = Tabs.Main:AddRightGroupbox('Auto Farm')
    
    -- Local
    local AutoCollectCoins = false
    local MaxCountAmount = 50
    local WalkSpeedToggled = false
    local WalkSpeedValue = 30
    local JumpPowerToggled = false
    local JumpPowerValue = 50
    local InfiniteJump = false
    local UseNoClip = false
    local NoMobAttraction = false
    
    local AlwaysCrit = false
    local AutoHealAfterBattle = false
    
    local GodMode = false
    
    local AutoFarm = false
    local WhitelistedEnemies = {["Bandit"]=true}
    local IgnoreCorrupted = false
    local AutoUseBestMove = false
    
    local InBattle = false
    
    local BuyFoodDropdown = "Chicken Wing"
    
    local Enemies = {
        "Bandit",
        "Daiseye",
        "Lileye",
        "Burglar",
        "The Bandit King",
        "Tangler",
        "Druid",
        "Dweller",
        'Fungeye',
        "Golem",
        "Bedrock",
    }
    
    -- Toggles
    
    -- Farming
    FarmGroupBox:AddToggle('Auto Collect Coins', {
        Text = 'Auto Collect Coins',
        Default = false,
        Tooltip = 'If Coins < 100 then collect', 
        Callback = function(Value)
            AutoCollectCoins = Value
        end
    })
    
    FarmGroupBox:AddSlider('Max Coin Value', {
        Text = 'Max Coin Value',
        Default = 50,
        Min = 0,
        Max = 100,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            MaxCountAmount = Value
        end
    })
    
    -- autofarm
    AutoFarmBox:AddToggle('Auto Farm', {
        Text = 'Auto Farm',
        Default = false,
        Tooltip = 'Auto Fights Enemies For You', 
        Callback = function(Value)
            AutoFarm = Value
        end
    })
    
    AutoFarmBox:AddDropdown('Whitelisted Enemies', {
        Values = Enemies,
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected
    
        Text = 'Whitelisted Enemies',
        Tooltip = 'Will only initiate fights with whitelisted enemies', -- Information shown when you hover over the dropdown
    
        Callback = function(Value)
            WhitelistedEnemies = Value
        end
    })
    
    AutoFarmBox:AddToggle('Ignore Corrupted', {
        Text = 'Ignore Corrupted',
        Default = false,
        Tooltip = 'Ignore Corrupted', 
        Callback = function(Value)
            IgnoreCorrupted = Value
        end
    })
    
    AutoFarmBox:AddToggle('Auto-Use Best Move', {
        Text = 'Auto-Use Best Move',
        Default = false,
        Tooltip = 'uses best move (may use shields so-unequip those)', 
        Callback = function(Value)
            AutoUseBestMove = Value
        end
    })
    
    -- local
    LocalBox:AddToggle('Walk Speed', {
        Text = 'Walk Speed',
        Default = false,
        Tooltip = 'Modifies your walkspeed', 
        Callback = function(Value)
            WalkSpeedToggled = Value
        end
    })
    
    LocalBox:AddSlider('Walk Speed Value', {
        Text = 'Walk Speed Value',
        Default = 30,
        Min = 30,
        Max = 200,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            WalkSpeedValue = Value
        end
    })
    
    LocalBox:AddToggle('Jump Power', {
        Text = 'Jump Power',
        Default = false,
        Tooltip = 'Modifies your jump power', 
        Callback = function(Value)
            JumpPowerToggled = Value
        end
    })
    
    LocalBox:AddSlider('Jump Power Value', {
        Text = 'Jump Power Value',
        Default = 50,
        Min = 50,
        Max = 500,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            JumpPowerValue = Value
        end
    })
    
    LocalBox:AddToggle('Infinite Jump', {
        Text = 'Infinite Jump',
        Default = false,
        Tooltip = 'jump infinite times', 
        Callback = function(Value)
            InfiniteJump = Value
        end
    })
    
    LocalBox:AddToggle('No-Clip', {
        Text = 'No-Clip',
        Default = false,
        Tooltip = 'go through walls like a ghost', 
        Callback = function(Value)
            UseNoClip = Value
        end
    })
    
    -- mobs
    MobSector:AddToggle('Always Crit', {
        Text = 'Always Crit',
        Default = false,
        Tooltip = 'makes ur moves always crit', 
        Callback = function(Value)
            AlwaysCrit = Value
    
            task.spawn(LPH_JIT_MAX(function()
                for i,v in pairs(getgc()) do
                    if typeof(v) == "function" and debug.getinfo(v).name == "ActionCommandCheck" and not Functions[v] then
                        hookfunction(v, function(...)
                            local Args = {...}
                            if (Args[1] and tostring(Args[1]) == tostring(game.Players.LocalPlayer)) and AlwaysCrit then
                                BasicFunctions.ACQClient(Args[1].Head.Position + Vector3.new(0,2,0), "Critical!")
                                return true
                            end
                        end)
                        Functions[v] = true
                    end
                end 
            end))
    
        end
    })
    
    MobSector:AddToggle('Auto Heal After Battle', {
        Text = 'Auto Heal After Battle',
        Default = false,
        Tooltip = 'auto heal after battle', 
        Callback = function(Value)
            AutoHealAfterBattle = Value
        end
    })
    
    -- exploits
    Exploits:AddToggle('God Mode', {
        Text = 'God Mode',
        Default = false,
        Tooltip = 'makes it so u cant die or get attacked', 
        Callback = function(Value)
            GodMode = Value
        end
    })
    
    
    -- misc
    MiscBox:AddButton({
        Text = "Save Data",
        Func = function()
            game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("Save"):InvokeServer()
        end,
        DoubleClick = false,
        Tooltip = "Saves your ingame data for you.",
    })
    
    MiscBox:AddToggle('No Mob Attraction', {
        Text = 'No Mob Attraction',
        Default = false,
        Tooltip = 'makes it so mobs dont follow u', 
        Callback = function(Value)
            NoMobAttraction = Value
        end
    })
    
    -- functions for buttons etc
    ButtonsBox:AddButton({
        Text = "Buy Spell!",
        Func = function()
            game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("FTPU"):InvokeServer(workspace:WaitForChild("NPCs"):WaitForChild("Frogidi"))
        end,
        DoubleClick = false,
        Tooltip = "Buys a spell for you.",
    })
    
    ButtonsBox:AddDropdown('Food To Buy', {
        Values = {
            "Chicken Wing",
            "Cheeseburger",
            "Juice",
            "Milk",
            "Hot Sauce",
            "BBQ Sauce",
        },
        Default = 1, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected
    
        Text = 'Food To Buy',
        Tooltip = 'food to buy', -- Information shown when you hover over the dropdown
    
        Callback = function(Value)
            BuyFoodDropdown = tostring(Value)
        end
    })
    
    ButtonsBox:AddButton({
        Text = "Buy Selected Food",
        Func = function()
            game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("BuyItem"):InvokeServer(workspace:WaitForChild("NPCs"):WaitForChild("Flibbit"), BuyFoodDropdown, 1)        
        end,
        DoubleClick = false,
        Tooltip = "Buys the food you selected.",
    })
    
    -- hooks
    
    --[[
    
    local HookCrit; HookCrit = hookmetamethod(game, "__namecall", LPH_JIT_MAX(function(Self, ...)
        if not checkcaller() and typeof(Self) == "Instance" and AlwaysCrit then
            if (tostring(Self) == "AttackFX" and getnamecallmethod() == "FireServer") then
                local Args = {...}
                if (Args[2] and tostring(Args[2]) == tostring(Player)) then
                    for i,v in pairs(Args) do
                        if typeof(v) == "boolean" and v == false then
                            Args[i] = true
                        end
                    end
                    return Self.FireServer(Self, table.unpack(Args))
                end
            end
        end
        return HookCrit(Self, ...)
    end))
    --]]
    
    -- functions
    local function getStrongestMove()
        local strongestPower, strongestMove = 0, nil
        local UI = Player:WaitForChild("PlayerGui",10):WaitForChild("BattleGui",10):WaitForChild("Attacks",10):WaitForChild("Frame"):WaitForChild("Frame"):WaitForChild("Frame")
        if UI then
            for index, var in pairs(UI:GetChildren()) do
                if var:IsA("TextButton") and (var.BackgroundColor3 ~= Color3.fromRGB(127,127,127)) then
                    if tonumber(var.Pow.Amount.Text) >= strongestPower then
                        strongestPower = index
                        strongestMove = var
                    end
                end
            end
        end
        return strongestPower, strongestMove
    end
    
    -- hooks
    local Hook; Hook = hookmetamethod(game, "__namecall", LPH_JIT_MAX(function(Self, ...)
        if not checkcaller() and typeof(Self) == "Instance" and GodMode then
            if (getnamecallmethod() == "FireServer" or getnamecallmethod() == "fireServer") and tostring(Self) == "AttackFX" then
                local Args = {...}
                if (Args[2] and Args[2] ~= Player.Character) and (Args[3] and Args[3] == Player.Character) then
                    return
                end
            end
        end
        return Hook(Self, ...)
    end))
    
    local MobAttraction; MobAttraction = hookmetamethod(game, "__namecall", LPH_JIT_MAX(function(Self, ...)
        if not checkcaller() and typeof(Self) == "Instance" and NoMobAttraction then
            if (tostring(Self) == "MoveNPC" and getnamecallmethod() == "FireServer") then
                local Args = {...}
                if (Args[1] and Player.Character and Args[1] == Player.Character) then
                    return
                end
            end
        end
        return MobAttraction(Self, ...)
    end))
    
    -- inf jump thingy
    local infJumpDebounce = false
    Connections.infjump = UserInputService.JumpRequest:Connect(function()
        if not infJumpDebounce and InfiniteJump then
            infJumpDebounce = true
            Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            task.wait()
            infJumpDebounce = false
        end
    end)
    
    --[[
    
    AUTO HEAL
    local args = {
        [1] = workspace:WaitForChild("NPCs"):WaitForChild("Flibbit"),
        [2] = "Chicken Wing",
        [3] = 1
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("BuyItem"):InvokeServer(unpack(args))
    
    local args = {
        [1] = "Chicken Wing"
    }
    
    game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("UseItem"):FireServer(unpack(args))
    
    ]]
    
    -- ON BATTLE ENDED EVENT
    Connections.endbattle = game:GetService("ReplicatedStorage").RS.Remotes.EndBattle.OnClientEvent:Connect(function(...) -- 1 arg (cage)
        InBattle = false
    
        print("Battle Ended!")
        if Player.Character and Player.Character.Humanoid.Health < Player.Character.Humanoid.MaxHealth then
            if AutoHealAfterBattle then
                local Hopella = workspace:WaitForChild("NPCs"):WaitForChild("Hopella")
                local OldCFrame = Player.Character.HumanoidRootPart.CFrame 
                Player.Character.HumanoidRootPart.CFrame = Hopella.HumanoidRootPart.CFrame
                game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("CIQC"):FireServer(Hopella)
                game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("INC"):FireServer(Hopella)
                task.wait(1)
                Player.Character.HumanoidRootPart.CFrame = OldCFrame
            end
        end
    end)
    
    Connections.startbattle = game:GetService("ReplicatedStorage").RS.Remotes.StartBattle.OnClientEvent:Connect(function(...) -- 3 args (cage, player, table)
        InBattle = true 
    
        local Cage = nil
        local PlayerStarted = nil
        local EnemiesInBattle = {}
    
        local Args = {...}
        for i,v in pairs(Args) do 
            if tostring(v) == "BattleCage" then
                Cage = v
            elseif tostring(v) == tostring(Player) then
                PlayerStarted = v
            end
            if type(v) == "table" then 
                for i2,v2 in pairs(v) do 
                    print("TABLE:",i2,v2:GetFullName())
                    table.insert(EnemiesInBattle, v2)
                end 
            end 
        end
        print("Battle Started!")
        if AutoFarm then
            repeat task.wait(1)
                local s,e = pcall(function()
                if IgnoreCorrupted then
                    for i,enemy in pairs(EnemiesInBattle) do
                        if enemy:FindFirstChild("Corruption") then
                            game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("SBO"):FireServer(Cage,"Run")
                        end
                    end
                end
                local Target = EnemiesInBattle[math.random(1, #EnemiesInBattle)]
                if Target and Target.Humanoid.Health ~= 0 then
                    if Cage.Turn.Value == "Choose" and (Cage.Player1Choice.Value == "" or Cage.Player1Choice.Value == nil) then
                        if AutoUseBestMove then
                            local strongestNum, strongestMove = getStrongestMove()
                            if strongestNum ~= nil and strongestMove ~= nil then
                                local fixedName = ""
                                for i = 1, #strongestMove.Name do
                                    local val = string.sub(strongestMove.Name,i,i)
                                    if not tonumber(val) then
                                        fixedName = fixedName .. tostring(val)
                                    end
                                end
                                Library:Notify("Using Strongest Move " .. tostring(fixedName),5)
                                game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("SBO"):FireServer(Cage,tostring(fixedName),Target)
                            else
                                Library:Notify("Failed to get strongestmove " .. tostring(strongestNum) .. " " .. tostring(strongestMove), 5)
                            end
                        else
                            game:GetService("ReplicatedStorage"):WaitForChild("RS"):WaitForChild("Remotes"):WaitForChild("SBO"):FireServer(Cage,"Punch",Target)
                        end
                    end
                end
            end)
            if not s then Library:Notify("Error Occured: " .. tostring(e), 10) end
            until InBattle == false or Player.Character.Humanoid.Health == 0 or AutoFarm == false
        end
    end)
    
    Connections.MainLoop = RunService.Stepped:Connect(LPH_JIT_MAX(function(time, deltaTime)
        if Player and Player.Character then
            local Humanoid = Player.Character:FindFirstChildOfClass("Humanoid")
            if WalkSpeedToggled then
                Humanoid.WalkSpeed = WalkSpeedValue
            end
            if JumpPowerToggled then
                Humanoid.UseJumpPower = true
                Humanoid.JumpPower = JumpPowerValue
            end
    
            local PlayerGui = Player.PlayerGui
            local CoinAmount = PlayerGui.MainGui.UI.HUDFrame.Anchor.Coins.Back.Logo.Amount
    
            if AutoCollectCoins and CoinAmount then
                if tonumber(CoinAmount.Text) < tonumber(MaxCountAmount) then
                    for i,v in pairs(workspace.Map:GetChildren()) do
                        if v:IsA('Folder') and v:FindFirstChild("Treasure") then
                            for i2,v2 in pairs(v.Treasure:GetChildren()) do
                                if tostring(v2):find('Cent') and v2:IsA('Part') and not (v2:FindFirstChild(Player.Name)) then
                                    v2.CFrame = Player.Character.HumanoidRootPart.CFrame
                                end
                            end
                        end
                    end
                end
            end
            if AutoFarm and not InBattle then
                for i,v in pairs(workspace.Enemies:GetChildren()) do
                    if v:IsA("Model") and WhitelistedEnemies[v.Name] == true and v:FindFirstChild("Attributes") then
                        if v.Attributes:FindFirstChild("InBattle") and v.Attributes:FindFirstChild("InBattle").Value == false then
                            firetouchinterest(v.Torso, Player.Character.HumanoidRootPart, 0)
                            firetouchinterest(v.Torso, Player.Character.HumanoidRootPart, 1)
                        end
                    end
                end
            end
        end -- End of char check
    end))
    
    Connections.NoclipLoop = RunService.Stepped:Connect(LPH_JIT_MAX(function()
        if Player.Character and UseNoClip then
            for i,v in pairs(Player.Character:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide == true then
                    v.CanCollide = false
                end
            end
        end
    end))
    
    -- UI BackEnd
    Library.KeybindFrame.Visible = false; -- todo: add a function for this
    
    Library:OnUnload(function()
        for i,v in pairs(Connections) do v:Disconnect() end
        Library.Unloaded = true
    end)
    
    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
    
    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
    
    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
    
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('Exceros Hub')
    SaveManager:SetFolder('Exceros Hub/Adventure Story')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
end
if GameToLoad == "Steal Time From Others" then -- [[ Steal Time From Others Loader ]]
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
    
    local Window = Library:CreateWindow({
        Title = "Exceros Hub || STFO",
        Center = true,
        AutoShow = true,
        TabPadding = 4,
        MenuFadeTime = 0.2
    })
    
    local Tabs = {
        Main = Window:AddTab('Main'),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }
    
    -- Services
    local Players = game:GetService('Players')
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Lighting = game:GetService("Lighting")
    local UserInputService = game:GetService("UserInputService")
    
    local Player = Players.LocalPlayer
    
    -- Connections
    local Connections = {}
    local Hooks = {}
    local Functions = {}
    
    -- Groupbox
    local Reach = Tabs.Main:AddLeftGroupbox("Reach")
    local Misc = Tabs.Main:AddRightGroupbox("Misc")
    local Local = Tabs.Main:AddLeftGroupbox("Local")
    local ModNotifier = Tabs.Main:AddRightGroupbox("Mods")
    
    
    local ReachToggled = false
    local ReachRange = 12
    local Amp = false
    local AmpAmount = 5
    local AutoClicker = false
    local WalkSpeedToggled = false
    local WalkSpeed = 16
    local JumpPowerToggled = false
    local JumpPower = 50
    local ModNotify = false
    
    -- local player
    
    
    Local:AddToggle('Walk Speed', {
        Text = 'Walk Speed',
        Default = false,
        Tooltip = 'makes u walk faster', 
        Callback = function(Value)
            WalkSpeedToggled = Value
        end
    })
    
    Local:AddSlider('Speed Amount', {
        Text = 'Speed Amount',
        Default = 16,
        Min = 16,
        Max = 25,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            WalkSpeed = Value
        end
    })
    
    Local:AddToggle('Jump Power', {
        Text = 'Jump Power',
        Default = false,
        Tooltip = 'makes u jump higher', 
        Callback = function(Value)
            JumpPowerToggled = Value
        end
    })
    
    Local:AddSlider('Jump Amount', {
        Text = 'Jump Amount',
        Default = 50,
        Min = 50,
        Max = 100,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            JumpPower = Value
        end
    })
    
    
    -- misc
    Misc:AddToggle('Auto-Lunge', {
        Text = 'Auto-Lunge',
        Default = false,
        Tooltip = 'lunges for u', 
        Callback = function(Value)
            AutoClicker = Value
        end
    })
    
    ModNotifier:AddToggle('Mod Notifier', {
        Text = 'Mod Notifier',
        Default = true,
        Tooltip = 'Toggle on/off Mod Notififer', 
        Callback = function(Value)
            ModNotify = Value
        end
      })
    
    -- reach
    Reach:AddToggle('Sword Reach', {
        Text = 'Sword Reach',
        Default = false,
        Tooltip = 'gives your sword reach', 
        Callback = function(Value)
            ReachToggled = Value
        end
    })
    
    Reach:AddSlider('Reach Range', {
        Text = 'Reach Range',
        Default = 12,
        Min = 0,
        Max = 12,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            ReachRange = Value
        end
    })
    
    Reach:AddToggle('Damage Amplifier', {
        Text = 'Damage Amplifier',
        Default = false,
        Tooltip = 'makes your sword do lots of damage', 
        Callback = function(Value)
            Amp = Value
        end
    })
    
    Reach:AddSlider('Amplifier Amount', {
        Text = 'Reach Range',
        Default = 5,
        Min = 0,
        Max = 5,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            AmpAmount = Value
        end
    })
    
    -- hooks
    
    local LocalPlayerAPI = {}
    
    local WalkSpeedHook; WalkSpeedHook = hookmetamethod(game, "__index", newcclosure(LPH_NO_VIRTUALIZE(function(Self,Key)
        if not checkcaller() and typeof(Self) == "Instance" and WalkSpeedToggled then
            if Self:IsA("Humanoid") and string.split(tostring(Key), "\0")[1] == "WalkSpeed" then
                return 16
            end
        end
        return WalkSpeedHook(Self,Key)
    end)))
    
    local JumpPowerHook; JumpPowerHook = hookmetamethod(game, "__index", newcclosure(LPH_NO_VIRTUALIZE(function(Self,Key)
        if not checkcaller() and typeof(Self) == "Instance" and JumpPowerToggled then
            if Self:IsA("Humanoid") and string.split(tostring(Key), "\0")[1] == "JumpPower" then
                return 50
            end
        end
        return JumpPowerHook(Self,Key)
    end)))
    
    local Disabled = {}
    
    function LocalPlayerAPI:DisableHumanoidConnections()
        if Player and Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") then
            local Humanoid = Player.Character:FindFirstChildOfClass("Humanoid")
            if not Disabled[Humanoid] then
                Disabled[Humanoid] = true
                for _,v in pairs(getconnections(Humanoid.Changed)) do
                    v:Disable()
                end
                for _,v in pairs(getconnections(Humanoid:GetPropertyChangedSignal("WalkSpeed"))) do
                    v:Disable()
                end
                for _,v in pairs(getconnections(Humanoid:GetPropertyChangedSignal("JumpPower"))) do
                    v:Disable()
                end
            end
        end
    end
    
    -- main
    local PartNames = {"Head", "HumanoidRootPart", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}
    local function FireTouch(Handle, Part)
        if Amp then
            for i = 1, AmpAmount do
                for i,v in pairs(Part.Parent:GetChildren()) do
                    if v:IsA("Part") and table.find(PartNames, tostring(v)) then
                        firetouchinterest(v, Handle, 0)
                        firetouchinterest(v, Handle, 1)
                    end
                end
            end
        else
            firetouchinterest(Part, Handle, 0)
            firetouchinterest(Part, Handle, 1)
        end
    end
    
    Connections[1] = RunService.RenderStepped:Connect(LPH_JIT_MAX(function()
        pcall(function()
            local Character = Player.Character
            if ReachToggled then
                if Character and (Character:FindFirstChildOfClass("Humanoid") and Character:FindFirstChildOfClass("Humanoid").Health > 0) then
                    local Tool = Character:FindFirstChildOfClass("Tool")
                    if Tool and Tool.Handle then
                        local RealHandle = Tool.Handle:FindFirstChild("Part")
                        if RealHandle and RealHandle:FindFirstChildOfClass("TouchTransmitter") then
                            for _,v in pairs(Players:GetPlayers()) do
                                if v ~= Player and v.Character and v.Character:FindFirstChildOfClass("Humanoid") and v.Character:FindFirstChildOfClass("Humanoid").Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
                                    local Distance = (RealHandle.Position-v.Character.HumanoidRootPart.Position).Magnitude
                                    if Distance <= ReachRange then
                                        FireTouch(RealHandle,v.Character.HumanoidRootPart)
                                    end
                                end
                            end
                        end
                    end
                end
            end
            if AutoClicker then
                if Character and (Character:FindFirstChildOfClass("Humanoid") and Character:FindFirstChildOfClass("Humanoid").Health > 0) then
                    local Tool = Character:FindFirstChildOfClass("Tool")
                    if Tool and Tool.Handle then
                        Tool:Activate()
                    end
                end
            end
            if WalkSpeedToggled then
                if Character and Character:FindFirstChildOfClass("Humanoid") then
                    LocalPlayerAPI:DisableHumanoidConnections()
                    Character:FindFirstChildOfClass("Humanoid").WalkSpeed = WalkSpeed
                end
            else
                if Character and Character:FindFirstChildOfClass("Humanoid") then
                    if Character:FindFirstChildOfClass("Humanoid").WalkSpeed ~= 16 then Character:FindFirstChildOfClass("Humanoid").WalkSpeed = 16 Disabled[Character:FindFirstChildOfClass("Humanoid")] = false end
                end
            end
            if JumpPowerToggled then
                if Character and Character:FindFirstChildOfClass("Humanoid") then
                    LocalPlayerAPI:DisableHumanoidConnections()
                    Character:FindFirstChildOfClass("Humanoid").JumpPower = JumpPower
                end
            else
                if Character and Character:FindFirstChildOfClass("Humanoid") then
                    if Character:FindFirstChildOfClass("Humanoid").JumpPower ~= 50 then Character:FindFirstChildOfClass("Humanoid").JumpPower = 50 Disabled[Character:FindFirstChildOfClass("Humanoid")] = false end
                end
            end
        end)
    end))
    
    local Blacklisted_Roles = {"Moderators", "Admins", "Owner", "Develoer","Community Manager"}
    local GroupId = 15197892
    game:GetService("Players").PlayerAdded:Connect(function(Plr)
      if ModNotify then
          if table.find(Blacklisted_Roles, Plr:GetRoleInGroup(GroupId)) then
              Library:Notify("An Admin has JOINED your game " .. tostring(Plr), 10)
          end
      end
    end)
    game:GetService("Players").PlayerRemoving:Connect(function(Plr)
      if ModNotify then     
          if table.find(Blacklisted_Roles, Plr:GetRoleInGroup(GroupId)) then
              Library:Notify("An Admin has LEFT your game " .. tostring(Plr), 10)
          end
      end
    end)
    for _,v in pairs(game:GetService("Players"):GetPlayers()) do
      if ModNotify then
          if table.find(Blacklisted_Roles, v:GetRoleInGroup(GroupId)) then
              Library:Notify("An Admin is in your game " .. tostring(v), 10)
          end
      end
    end
    
    -- UI BackEnd
    Library.KeybindFrame.Visible = false; -- todo: add a function for this
    
    Library:OnUnload(function()
        for i,v in pairs(Connections) do v:Disconnect() end
        Library.Unloaded = true
    end)
    
    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
    
    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
    
    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
    
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('Exceros Hub')
    SaveManager:SetFolder('Exceros Hub/Adventure Story')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
end
if GameToLoad == "Super League Soccer" then -- [[ Super League Soccer Loader ]]
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()
    
    local Window = Library:CreateWindow({
        Title = "Exceros Hub || Super League Soccer!",
        Center = true,
        AutoShow = true,
        TabPadding = 4,
        MenuFadeTime = 0.2
    })
    
    local Tabs = {
        Main = Window:AddTab('Main'),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }
    
    -- Services
    local Players = game:GetService('Players')
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Lighting = game:GetService("Lighting")
    local UserInputService = game:GetService("UserInputService")
    
    local Player = Players.LocalPlayer
    
    -- Connections
    local Connections = {}
    local Hooks = {}
    local Functions = {}
    
    
    local BallBox = Tabs.Main:AddLeftGroupbox("Ball")
    local LocalPlayerBox = Tabs.Main:AddRightGroupbox("Local")
    local Misc = Tabs.Main:AddRightGroupbox("Misc")
    local KickModifying = Tabs.Main:AddLeftGroupbox("Kick Modifier")
    
    local BallReachToggled = false
    local BallReach = 15
    local TackleReachToggled = false
    local TackleReachRange = 25
    local InfiniteStamina = false
    local BoostTackle = false
    local Boost = 40
    local NoTackleCooldown = false
    local NoDribbleCooldown = false
    local SuperShot = false
    local SuperShotBoost = 5
    local InstantFullPower = false
    local InstantFullPowerPass = false
    
    BallBox:AddToggle('Ball Reach', {
        Text = 'Ball Collect Reach',
        Default = false,
        Tooltip = 'collects the ball from farther away', 
        Callback = function(Value)
            BallReachToggled = Value
        end
    })
    
    BallBox:AddSlider('Ball Range', {
        Text = 'Ball Reach Range',
        Default = 15,
        Min = 0,
        Max = 15,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            BallReach = Value
        end
    })
    
    BallBox:AddToggle('Tackle Reach', {
        Text = 'Tackle Reach',
        Default = false,
        Tooltip = 'lets u tackle people from far away', 
        Callback = function(Value)
            TackleReachToggled = Value
        end
    })
    
    BallBox:AddSlider('Tackle Range', {
        Text = 'Tackle Range',
        Default = 30,
        Min = 0,
        Max = 30,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            TackleReachRange = Value
        end
    })
    
    -- local palyer
    LocalPlayerBox:AddToggle('Infinite Stamina', {
        Text = 'Infinite Stamina',
        Default = false,
        Tooltip = 'lets u have infinite stamina', 
        Callback = function(Value)
            InfiniteStamina = Value
        end
    })
    
    local DribblesCDs = {}
    local TackleCDs = {}
    local HookAlready = {
        Tackle = false,
        Dribble = false,
    }
    
    LocalPlayerBox:AddToggle('No Tackle Cooldown', {
        Text = 'No Tackle Cooldown',
        Default = false,
        Tooltip = 'no cooldowns for tackling', 
        Callback = function(Value)
            NoTackleCooldown = Value
    
            LPH_NO_VIRTUALIZE(function()
                if NoTackleCooldown then
                    for i,v in next, getgc(true) do
                        if type(v) == "table" and rawget(v, "Tackle") then
                            if type(rawget(v, "Tackle")) == "number" then
                                if not TackleCDs[v] then
                                    TackleCDs[v] = true
                                end
                            end
                        end
                    end
                end
            end)()
        end
    })
    
    LocalPlayerBox:AddToggle('No Dribble Cooldown', {
        Text = 'No Dribble Cooldown',
        Default = false,
        Tooltip = 'no cooldowns for dribbling', 
        Callback = function(Value)
            NoDribbleCooldown = Value
    
            LPH_NO_VIRTUALIZE(function()
                if NoDribbleCooldown then
                    for i,v in next, getgc(true) do
                        if type(v) == "table" and rawget(v, "Dribble") then
                            if type(rawget(v, "Dribble")) == "number" then
                                if not DribblesCDs[v] then
                                    DribblesCDs[v] = true
                                end
                            end
                        end
                    end
                end
            end)()
        end
    })
    
    KickModifying:AddToggle('Instant Full-Power Kick', {
        Text = 'Instant Full-Power Kick',
        Default = false,
        Tooltip = 'instant full power for kicks', 
        Callback = function(Value)
            InstantFullPower = Value
    
            LPH_NO_VIRTUALIZE(function()
                if InstantFullPower == true then
                    for i,v in next, getgc() do
                        if type(v) == "function" and debug.getinfo(v).name == "SetKick" then
                            for i2,v2 in pairs(debug.getconstants(v)) do
                                if type(v2) == "number" then
                                    print(i2,v2,type(v2))
                                    if v2 == 0.6 then
                                        debug.setconstant(v, i2, 0)
                                    end
                                end
                            end
                        end
                    end            
                else
                    for i,v in next, getgc() do
                        if type(v) == "function" and debug.getinfo(v).name == "SetKick" then
                            for i2,v2 in pairs(debug.getconstants(v)) do
                                if type(v2) == "number" then
                                    print(i2,v2,type(v2))
                                    if v2 == 0 then
                                        debug.setconstant(v, i2, 0.6)
                                    end
                                end
                            end
                        end
                    end
                end
            end)()
        end
    })
    
    KickModifying:AddToggle('Instant Full-Power Pass', {
        Text = 'Instant Full-Power Pass',
        Default = false,
        Tooltip = 'instant full power for passes', 
        Callback = function(Value)
            InstantFullPowerPass = Value
    
            LPH_NO_VIRTUALIZE(function()
                if InstantFullPowerPass then
                    for i,v in next, getgc() do
                        if type(v) == "function" and debug.getinfo(v).name == "SetPass" then
                            for i2,v2 in pairs(debug.getconstants(v)) do
                                if type(v2) == "number" then
                                    if v2 == 0.6 then
                                        debug.setconstant(v, i2, 0)
                                    end
                                end
                            end
                        end
                    end
                else
                    for i,v in next, getgc() do
                        if type(v) == "function" and debug.getinfo(v).name == "SetPass" then
                            for i2,v2 in pairs(debug.getconstants(v)) do
                                if type(v2) == "number" then
                                    if v2 == 0 then
                                        debug.setconstant(v, i2, 0.6)
                                    end
                                end
                            end
                        end
                    end
                end
            end)()
        end
    })
    
    LocalPlayerBox:AddDivider()
    
    local ShootHooked = false
    local HookFuncs = {}
    LocalPlayerBox:AddToggle('Super Shot', {
        Text = 'Super Shot',
        Default = false,
        Tooltip = 'turns your leg into a kicking machine', 
        Callback = function(Value)
            SuperShot = Value
            LPH_NO_VIRTUALIZE(function()
                for i,v in next, getgc() do
                    if type(v) == "function" and debug.getinfo(v).name == "Shoot" and not ShootHooked then
                        ShootHooked = true
                        HookFuncs[i] = hookfunction(v, function(...) 
                            if not checkcaller() and SuperShot then
                                local Args={...}
                                Args[2] = Vector3.new(Args[2].X*SuperShotBoost,Args[2].Y,Args[2].Z*SuperShotBoost)
                                return HookFuncs[i](table.unpack(Args))
                            end
                            return HookFuncs[i](...)
                        end)
                    end
                end
            end)()
        end
    })
    
    LocalPlayerBox:AddSlider('Super Shot Speed', {
        Text = 'Super Shot Speed',
        Default = 5,
        Min = 0,
        Max = 15,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            SuperShotBoost = Value
        end
    })
    
    
    -- misc
    Misc:AddToggle('Fast Tackle', {
        Text = 'Fast Tackle',
        Default = false,
        Tooltip = 'makes u slider faster [buggy]', 
        Callback = function(Value)
            BoostTackle = Value
        end
    })
    
    Misc:AddSlider('Tackle Speed', {
        Text = 'Tackle Speed',
        Default = 50,
        Min = 32,
        Max = 70,
        Rounding = 0,
        Compact = false,
    
        Callback = function(Value)
            Boost = Value
        end
    })
    
    local getNewFunctions = Instance.new("BindableFunction")
    
    getNewFunctions.OnInvoke = function()
        --Library:Notify("🟨 newFunctions.OnInvoke Fired.")
        if NoTackleCooldown then
            LPH_NO_VIRTUALIZE(function()
                for i,v in next, getgc(true) do
                    if type(v) == "table" and rawget(v, "Tackle") then
                        if type(rawget(v, "Tackle")) == "number" then
                            if not TackleCDs[v] then
                                TackleCDs[v] = true
                                --Library:Notify("✅ new_Tackle Function found! " .. tostring(v))
                            end
                        end
                    end
                end
            end)()
        end
        if NoDribbleCooldown then
            LPH_NO_VIRTUALIZE(function()
                for i,v in next, getgc(true) do
                    if type(v) == "table" and rawget(v, "Dribble") then
                        if type(rawget(v, "Dribble")) == "number" then
                            if not DribblesCDs[v] then
                                DribblesCDs[v] = true
                                --Library:Notify("✅ new_Dribble Function found! " .. tostring(v))
                            end
                        end
                    end
                end
            end)()
        end
    end
    
    LPH_NO_VIRTUALIZE(function()
        local getTackled; getTackled = hookmetamethod(game, '__namecall', function(Self, ...)
            if not checkcaller() and typeof(Self) == "Instance" then
                if tostring(Self) == "Tackle" and tostring(getnamecallmethod()) == "FireServer" then
                    if HookAlready.Tackle == false then
                        HookAlready.Tackle = true
                        getNewFunctions.Invoke(getNewFunctions)
                    end
                end
            end
            return getTackled(Self, ...)
        end)
    end)()
    
    LPH_NO_VIRTUALIZE(function()
        local getDribble; getDribble = hookmetamethod(game, '__namecall', function(Self, ...)
            if not checkcaller() and typeof(Self) == "Instance" then
                if tostring(Self) == "Dribble" and tostring(getnamecallmethod()) == "FireServer" then
                    if HookAlready.Dribble == false then
                        HookAlready.Dribble = true
                        getNewFunctions.Invoke(getNewFunctions)
                    end
                end
            end
            return getDribble(Self, ...)
        end)
    end)()
    
    local Tables = {}
    local TackleTables = {}
    local DribbleTables = {}
    
    Player.CharacterAdded:Connect(function(newCharacter)
        repeat task.wait() until newCharacter
        HookAlready.Dribble = false
        HookAlready.Tackle = false
        table.clear(TackleTables)
        table.clear(DribbleTables)
        -- Library:Notify("🟨 CharacterAdded Fired, Resetting Functions " .. tostring(NoDribbleCooldown) .. " " .. tostring(NoTackleCooldown), 3)
    end)
    
    -- hooks
    local IsHookingMega = false
    
    LPH_NO_VIRTUALIZE(function()
        local MegaTackle; MegaTackle = hookmetamethod(game, "__newindex", function(s,k,v)
            if not checkcaller() and not IsHookingMega and BoostTackle then
                if s:IsA("LinearVelocity") and tostring(k) == "VectorVelocity" then
                    IsHookingMega = true
                    s.VectorVelocity = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.LookVector * Boost
                    IsHookingMega = false
                    return
                end
            end
            return MegaTackle(s,k,v)
        end)
    end)()
    
    -- funcs
    local function getTableSize(tbl)
        local c = 0
        for i,v in pairs(tbl) do c=c+1 end
        return c
    end
    
    LPH_NO_VIRTUALIZE(function()
        Connections.MainLoop = RunService.RenderStepped:Connect(function()
            if BallReachToggled then
                for i,v in pairs(workspace:GetChildren()) do
                    if tostring(v) == "Gameball" and (v.CFrame.Position-Player.Character.HumanoidRootPart.CFrame.Position).Magnitude <= BallReach then
                        v.CFrame = Player.Character.HumanoidRootPart.CFrame
                    end
                end
            end
            if TackleReachToggled then
                for _,player in pairs(Players:GetPlayers()) do
                    if player and player ~= Player and player.Character and player.Character:FindFirstChild("Ball") then
                        player.Character.Ball.Massless = true
                        player.Character.Ball.Size = Vector3.new(TackleReachRange,4,TackleReachRange)
                    end
                end
            else
                for _,player in pairs(Players:GetPlayers()) do
                    if player and player ~= Player and player.Character and player.Character:FindFirstChild("Ball") and player.Character:FindFirstChild("Ball").Size ~= Vector3.new(1.6,1.6,1.6) then
                        player.Character.Ball.Size = Vector3.new(1.6,1.6,1.6)
                        player.Character.Ball.Massless = false
                    end
                end
            end
            if InfiniteStamina then
                if getTableSize(Tables) == 0 then
                    for i,v in next, getgc(true) do
                        if type(v) == "table" and rawget(v, "Stamina") and not Tables[v] then
                            Tables[v] = true
                        end
                    end
                end
                if getTableSize(Tables) ~= 0 then
                    for i,v in pairs(Tables) do
                        rawset(i, "Stamina", 600)
                    end
                end
            end
            if NoTackleCooldown and HookAlready.Tackle then
                for i,v in pairs(TackleCDs) do
                    rawset(i, "Tackle", tick())
                end
            end
            if NoDribbleCooldown and HookAlready.Dribble then
                for i,v in pairs(DribblesCDs) do
                    rawset(i, "Dribble", tick())
                end
            end
        end)
    end)()
    -- UI BackEnd
    Library.KeybindFrame.Visible = false; -- todo: add a function for this
    
    Library:OnUnload(function()
        for i,v in pairs(Connections) do v:Disconnect() end
        Library.Unloaded = true
    end)
    
    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
    
    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })
    
    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu
    
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('Exceros Hub')
    SaveManager:SetFolder('Exceros Hub/SuperLeagueSoccer')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
end
if GameToLoad == "NST Remastered" then -- [[ nst remastered loader ]]
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()

    local Window = Library:CreateWindow({
        Title = "Exceros Hub || NST Remastered",
        Center = true,
        AutoShow = true,
        TabPadding = 4,
        MenuFadeTime = 0.2
    })

    local Tabs = {
        Main = Window:AddTab('Main'),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }

    -- Services
    local Players = game:GetService('Players')
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Lighting = game:GetService("Lighting")
    local UserInputService = game:GetService("UserInputService")

    local Player = Players.LocalPlayer

    -- Connections
    local Connections = {}
    local Hooks = {}
    local Functions = {}

    -- Groupbox
    local LocalGroupBox = Tabs.Main:AddLeftGroupbox("Local Player")
    local CombatGroupBox = Tabs.Main:AddRightGroupbox("Combat")

    local WalkspeedToggle = false
    local Walkspeed = 16 
    local JumpPowerToggle = false
    local JumpPower = 50

    local NoStun = false
    local NoAnimations = false

    -- Local 
    LocalGroupBox:AddToggle('Walk Speed', {
        Text = 'Walk Speed',
        Default = false,
        Tooltip = 'sets humanoid walkspeed', 
        Callback = function(Value)
            WalkspeedToggle = Value
        end
    })

    LocalGroupBox:AddSlider('Walk Speed Value', {
        Text = 'Walk Speed Value',
        Default = 16,
        Min = 16,
        Max = 100,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            Walkspeed = Value
        end
    })

    LocalGroupBox:AddToggle('Jump Power', {
        Text = 'Jump Power',
        Default = false,
        Tooltip = 'sets jump power', 
        Callback = function(Value)
            JumpPowerToggle = Value
        end
    })

    LocalGroupBox:AddSlider('Jump Power Value', {
        Text = 'Jump Power Value',
        Default = 50,
        Min = 50,
        Max = 500,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            JumpPower = Value
        end
    })

    -- Combat 
    CombatGroupBox:AddToggle('No Stun', {
        Text = 'No Stun',
        Default = false,
        Tooltip = 'No Stun', 
        Callback = function(Value)
            NoStun = Value
        end
    })
    CombatGroupBox:AddToggle('No Animations', {
        Text = 'No Animations',
        Default = false,
        Tooltip = 'No animations for anything', 
        Callback = function(Value)
            NoAnimations = Value
        end
    })


    LPH_NO_VIRTUALIZE(function()
        Connections.mainstepLoop = RunService.RenderStepped:Connect(function()
            local success,err = pcall(function()
                if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health ~= 0 then
                    if WalkspeedToggle then
                        Player.Character.Humanoid.WalkSpeed = Walkspeed
                    else
                        if Player.Character.Humanoid.WalkSpeed ~= 16 then
                            Player.Character.Humanoid.WalkSpeed = 16
                        end
                    end
                    if JumpPowerToggle then
                        Player.Character.Humanoid.JumpPower = JumpPower
                    else
                        if Player.Character.Humanoid.JumpPower ~= 50 then
                            Player.Character.Humanoid.JumpPower = 50
                        end
                    end
                    if NoStun then
                        if Player.Character:FindFirstChildOfClass("NumberValue") then
                            Player.Character:FindFirstChildOfClass("NumberValue"):Destroy()
                        elseif Player.Character:FindFirstChildOfClass("BoolValue") then
                            Player.Character:FindFirstChildOfClass("BoolValue"):Destroy()
                        end
                    end
                    if NoAnimations then
                        for _,v in pairs(Player.Character.Humanoid:GetPlayingAnimationTracks()) do
                            v:Stop()
                        end
                    end
                end
            end)
            if not success then warn(err) end
        end)
    end)()
    -- UI BackEnd
    Library.KeybindFrame.Visible = false; -- todo: add a function for this

    Library:OnUnload(function()
        for i,v in pairs(Connections) do v:Disconnect() end
        Library.Unloaded = true
    end)

    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('Exceros Hub')
    SaveManager:SetFolder('Exceros Hub/NST Remastered')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
end
if GameToLoad == "Peroxide" then
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/Paupxx/Exceros-Library/main/addons/SaveManager.lua'))()

    Library:Notify("Loading Peroxide...")

    local Window = Library:CreateWindow({
        Title = "Exceros Hub || Peroxide",
        Center = true,
        AutoShow = true,
        TabPadding = 4,
        MenuFadeTime = 0.2
    })

    local Tabs = {
        Main = Window:AddTab('Main'),
        ESP = Window:AddTab("ESP"),
        ['UI Settings'] = Window:AddTab('UI Settings'),
    }

    -- bypasses
    local ScriptContext = game:GetService("ScriptContext")
    for _,v in pairs(getconnections(ScriptContext.Error)) do
        v:Disable()
    end
    local IsLoadedHub = false
        --[[
    local walkSpeedHook; walkSpeedHook = hookmetamethod(game, "__index", newcclosure(LPH_NO_VIRTUALIZE(function(self,key)
        if not checkcaller() and typeof(self) == "Instance" then
            if tostring(self) == "Humanoid" and string.split(tostring(key), "\0")[1] == "WalkSpeed" then
                return 16
            end
        end
        return walkSpeedHook(self,key)
    end)))--]]

    -- Services
    local Players = game:GetService('Players')
    local RunService = game:GetService("RunService")
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Lighting = game:GetService("Lighting")
    local UserInputService = game:GetService("UserInputService")
    local Player = Players.LocalPlayer
    local PathfindingService = game:GetService("PathfindingService")
    local TweenService = game:GetService("TweenService")

    -- Connections
    local Connections = {}
    local Hooks = {}
    local Functions = {}
    local parse = {}
    local functionsSet = {}
    local PlayerESP = {}
    local EnemyESP = {}
    local NPCESP = {}

    -- Groupbox
    local LocalGroupBox = Tabs.Main:AddLeftGroupbox("Local")
    local CombatGroupBox = Tabs.Main:AddRightGroupbox("Combat")
    local MiscBox = Tabs.Main:AddRightGroupbox("Misc")
    local EspGroupBox = Tabs.ESP:AddLeftGroupbox("ESP")
    local NPCGroupBox = Tabs.ESP:AddRightGroupbox("Enemy ESP")
    local NPCRealGroupBox = Tabs.ESP:AddRightGroupbox("NPC ESP")
    local AutoTrainBox = Tabs.Main:AddLeftGroupbox("Auto Train")
    local AutoFarmBox = Tabs.Main:AddRightGroupbox("Auto Farm")

    -- values
    local NoDashCooldown = false
    local DashCooldownCustomAmount = 1.5
    local WalkspeedToggle = false
    local Walkspeed = 16 
    local JumpPowerToggle = false
    local JumpPower = 50
    local InfiniteJump = false

    local NoAnimations = false
    local FastAnimations = false

    local PlayerESPToggle = false
    local PlayerESPColor = Color3.fromRGB(255, 255, 255)
    local HealthESP = false
    local ClanESP = false
    local NameESPType = "Player Name"
    local PlayerDist = 5000

    local EnemyESPToggle = false
    local EnemyESPColor = Color3.fromRGB(197, 48, 48)
    local EnemyHealthESP = false
    local RemoveUID = true
    local EnemyDist = 5000

    local NpcESPToggle = false
    local NpcESPColor = Color3.fromRGB(161, 52, 194)
    local NpcDist = 5000

    local SpoofServerName = false
    local OriginalServerData = {}

    local TreadMillAutoTrain = false
    local AutoTrainBenchPress = false
    local AutoTrainDummy = false
    local AutoTrainReiatsu = false

    local AutoFarm = false
    local AutoSwing = false
    local UseHeavy = false
    local ChosenNpcs = {["NormalHollow"]=true}
    local TweenSpeed = 32

    local AutoOrb = false


    -- constant updating variables 
    local DistanceFromEnemy = math.huge
    
    -- functions
    function parse:getConstant(func, index, expected_value, constant_type)
        if typeof(func) == "function" then
            local const_f = debug.getconstant(func, index)
            if const_f and typeof(const_f) == constant_type then
                if const_f == expected_value then
                    print("success found constant!")
                    return const_f
                elseif const_f ~= expected_value then
                    print("success found constant but not exact value")
                    return const_f
                end
            else
                print("const_f is not a type of",constant_type)
            end
        else
            print("func not a function parse:getConstant")
        end
        return nil
    end

    function parse:setConstant(func, index, value)
        debug.setconstant(func, index, value)
    end
    
    local temp_parse = {}
    
    function parse:setKey()
        LPH_NO_VIRTUALIZE(function()
            for i,v in next, getgc(true) do
                if type(v) == "table" and rawget(v, "Key") then
                    local Key = rawget(v, "Key")
                    if typeof(Key) == "string" then
                        temp_parse["key"] = Key
                    end
                end
            end
        end)()
    end

    function parse:getKey()
        if temp_parse["key"] ~= nil then
            return temp_parse["key"]
        elseif temp_parse["key"] == nil then
            parse:setKey()
        end
    end

    local character_handle = {}
    local swinging = false
    local last_heavy = os.time()

    function character_handle:setSwing(state)
        if state == true then
            task.spawn(function()
                repeat task.wait(0.5)
                    local inputRemote = ReplicatedStorage:FindFirstChild("Remotes"):FindFirstChild("Input")
                    local client_key = parse:getKey()
                    if inputRemote and client_key and DistanceFromEnemy <= 15 then
                        if UseHeavy and (os.time() - last_heavy) > 3.5 then
                            inputRemote:FireServer({
                                ["Pressing"] = true,
                                ["InputState"] = "Heavy",
                                ["Key"] = client_key,
                            })
                        end
                        inputRemote:FireServer({
                            ["Pressing"] = true,
                            ["InputState"] = "LeftClick",
                            ["Key"] = client_key,
                        })
                        inputRemote:FireServer({
                            ["Pressing"] = false,
                            ["InputState"] = "LeftClick",
                            ["Key"] = client_key,
                        })
                    end
                until state == false or Player.Character == nil or AutoSwing == false
            end)
        end
    end

    local function AddModelToESPLibrary(model, tbl, espcolor)
        if model:IsA("Model") then
            local Con1
            local totalModelData = {}


            pcall(function()
                if typeof(tbl) == "table" then
                    for i,v in pairs(tbl) do
                        if tostring(v.Name) == tostring(model) then
                            table.remove(tbl, i)
                            if v.Drawing then
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                            end
                        end
                    end
                end
            end)
            
            local TextDrawing = Drawing.new("Text")
            TextDrawing.Size = 16
            TextDrawing.Visible = false
            TextDrawing.Outline = true
            TextDrawing.Center = true
            TextDrawing.Text = tostring(model)
            TextDrawing.Color = espcolor
            
            totalModelData.Drawing = TextDrawing
            totalModelData.Model = model
            totalModelData.Name = tostring(model)
            
            table.insert(tbl, totalModelData)
        end
    end

    local function getClosestHollow()
        local Closest, MaxDistance = nil, 2000

        local asyncFixed = {}
        for name,val in pairs(ChosenNpcs) do
            if val == true then
                table.insert(asyncFixed, name)
            end
        end
        if workspace:FindFirstChild("Live") and Player.Character and Player.Character.Humanoid and Player.Character.Humanoid.Health ~= 0 then
            for _,v in pairs(workspace:FindFirstChild("Live"):GetChildren()) do
                if table.find(asyncFixed, tostring(v):split("_")[1]) and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChildOfClass("Humanoid") and v.Humanoid.Health ~= 0 then
                    local mag = (Player.Character.HumanoidRootPart.Position-v.HumanoidRootPart.Position).Magnitude
                    if mag <= MaxDistance then
                        Closest = v
                        MaxDistance = mag
                    end
                end
            end
        end
        return Closest,MaxDistance
    end

    local function getClosestOrb()
        local Closest, MaxDistance = nil, 200
        for _,v in pairs(workspace.Effects.Orbs:GetChildren()) do
            local Distance = (Player.Character.HumanoidRootPart.Position-v.Position).Magnitude
            if Distance <= MaxDistance then
                MaxDistance = Distance
                Closest = v
            end
        end
        return Closest
    end

    -- toggles

    -- autofarm
    AutoFarmBox:AddToggle('Auto Farm', {
        Text = 'Auto Farm',
        Default = false,
        Tooltip = 'Auto Farms chosen enemies', 
        Callback = function(Value)
            AutoFarm = Value
        end
    })
    AutoFarmBox:AddToggle('Auto Swing', {
        Text = 'Auto Swing',
        Default = false,
        Tooltip = 'Auto Swing', 
        Callback = function(Value)
            AutoSwing = Value

            character_handle:setSwing(Value)
        end
    })
    AutoFarmBox:AddToggle('Use Heavy Attack', {
        Text = 'Use Heavy Attack',
        Default = false,
        Tooltip = 'Use Heavy Attack', 
        Callback = function(Value)
            UseHeavy = Value
        end
    })
    AutoFarmBox:AddDropdown('Enemies', {
        Values = {
            "NormalHollow",
            "RedEyeHollow",
            "AdjuchasHollow"
        },
        Default = 1,
        Multi = true, 

        Text = 'Enemies',
        Tooltip = 'what enemies u wanna mess with', -- Information shown when you hover over the dropdown

        Callback = function(Value)
            ChosenNpcs = Value
        end
    })
    AutoFarmBox:AddSlider('Tween Speed', {
        Text = 'Tween Speed',
        Default = 32,
        Min = 0,
        Max = 150,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            TweenSpeed = Value
        end
    })
    -- misc box claim codes
    MiscBox:AddButton({Text = "Claim Codes",Func = function()
        local codes = {
            "80kLikesSorryForACStrikes",
            "60kLikesHiGuys",
            "AmogusGrimaceShake",
            "RELEASE!!!!",
        }
        for i,v in pairs(codes) do
            local args = {
                [1] = v
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("RedeemCode"):InvokeServer(unpack(args))
        end
    end,
    DoubleClick = false,
    Tooltip = nil,})

    -- auto train
    AutoTrainBox:AddToggle('Auto-Train Treadmill', {
        Text = 'Auto-Train Treadmill',
        Default = false,
        Tooltip = 'auto trains treadmill for u', 
        Callback = function(Value)
            TreadMillAutoTrain = Value
        end
    })
    
    AutoTrainBox:AddToggle('Auto-Train Bench Press', {
        Text = 'Auto-Train Bench Press',
        Default = false,
        Tooltip = 'auto trains Bench Press for u', 
        Callback = function(Value)
            AutoTrainBenchPress = Value
        end
    })

    AutoTrainBox:AddToggle('Auto-Train Dummy', {
        Text = 'Auto-Train Dummy',
        Default = false,
        Tooltip = 'auto trains Dummy for u', 
        Callback = function(Value)
            AutoTrainDummy = Value
        end
    })

    AutoTrainBox:AddToggle('Auto-Train Reiatsu', {
        Text = 'Auto-Train Reiatsu',
        Default = false,
        Tooltip = 'auto trains Reiatsu for u', 
        Callback = function(Value)
            AutoTrainReiatsu = Value
        end
    })

    AutoTrainBox:AddDivider()

    AutoTrainBox:AddToggle('Auto Meditate', {
        Text = 'Auto Meditate',
        Default = false,
        Tooltip = 'collects the green orbs for u', 
        Callback = function(Value)
            AutoOrb = Value
        end
    })


    -- local
    LocalGroupBox:AddToggle('Walk Speed', {
        Text = 'Walk Speed',
        Default = false,
        Tooltip = 'sets humanoid walkspeed', 
        Callback = function(Value)
            WalkspeedToggle = Value
        end
    })

    LocalGroupBox:AddSlider('Walk Speed Value', {
        Text = 'Walk Speed Value',
        Default = 16,
        Min = 16,
        Max = 85,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            Walkspeed = Value
        end
    })

    LocalGroupBox:AddToggle('Jump Power', {
        Text = 'Jump Power',
        Default = false,
        Tooltip = 'sets jump power', 
        Callback = function(Value)
            JumpPowerToggle = Value
        end
    })

    LocalGroupBox:AddSlider('Jump Power Value', {
        Text = 'Jump Power Value',
        Default = 50,
        Min = 50,
        Max = 200,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            JumpPower = Value
        end
    })


    LocalGroupBox:AddToggle('No Dash Cooldown', {
        Text = 'No Dash Cooldown',
        Default = false,
        Tooltip = 'sets dash cooldown', 
        Callback = function(Value)
            NoDashCooldown = Value

            if IsLoadedHub then
                pcall(function()
                    if NoDashCooldown then
                        for i,v in next, getgc() do
                            if type(v) == "function" and debug.getinfo(v).name == "Dash" then
                                local const_found = parse:getConstant(v, 16, 1.5, "number")
                                if const_found then
                                    parse:setConstant(v, 16, DashCooldownCustomAmount)
                                end
                            end
                        end
                    else
                        for i,v in next, getgc() do
                            if type(v) == "function" and debug.getinfo(v).name == "Dash" then
                                local const_found = parse:getConstant(v, 16, DashCooldownCustomAmount, "number")
                                if const_found then
                                    parse:setConstant(v, 16, 1.5)
                                end
                            end
                        end
                    end
                end)
            end
        end
    })

    LocalGroupBox:AddSlider('No Dash Cooldown Rate', {
        Text = 'No Dash Cooldown Rate',
        Default = 1,
        Min = 0,
        Max = 5,
        Rounding = 1,
        Compact = false,

        Callback = function(Value)
            DashCooldownCustomAmount = Value
        end
    })

    LocalGroupBox:AddToggle('Infinite Jump', {
        Text = 'Infinite Jump',
        Default = false,
        Tooltip = 'infinite jump', 
        Callback = function(Value)
            InfiniteJump = Value
        end
    })

    -- [[ COMBAT ]]
    CombatGroupBox:AddToggle('No Animations', {
        Text = 'No Animations',
        Default = false,
        Tooltip = 'No animations for anything', 
        Callback = function(Value)
            NoAnimations = Value
        end
    })

    CombatGroupBox:AddToggle('Fast Animations', {
        Text = 'Fast Animations',
        Default = false,
        Tooltip = 'makes anims super fast that it does so much damage OL', 
        Callback = function(Value)
            FastAnimations = Value
        end
    })

    -- [[ ESP ]]
    EspGroupBox:AddToggle('Player ESP', {
        Text = 'Player ESP',
        Default = false,
        Tooltip = 'shows player esp', 
        Callback = function(Value)
            PlayerESPToggle = Value
        end}):AddColorPicker('Player ESP Color', {
        Default = Color3.fromRGB(255, 255, 255), 
        Title = 'Choose Player ESP Color', 
        Transparency = nil,
        Callback = function(Value)
            PlayerESPColor = Value
        end
    })

    EspGroupBox:AddToggle('Show Health', {
        Text = 'Show Health',
        Default = false,
        Tooltip = 'show health fr', 
        Callback = function(Value)
            HealthESP = Value
        end
    })

    EspGroupBox:AddToggle('Show Clan', {
        Text = 'Show Clan',
        Default = false,
        Tooltip = 'show Clan fr', 
        Callback = function(Value)
            ClanESP = Value
        end
    })

    EspGroupBox:AddDropdown('ESP Name Type', {
        Values = {"Player Name", "Peroxide Name"},
        Default = 1,
        Multi = false, 

        Text = 'ESP Name Type',
        Tooltip = 'shows either roblox name or peroxide name', -- Information shown when you hover over the dropdown

        Callback = function(Value)
            NameESPType = tostring(Value)
        end
    })

    EspGroupBox:AddSlider('Distance Slider', {
        Text = 'Player Distance',
        Default = 5000,
        Min = 0,
        Max = 10000,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            PlayerDist = Value
        end
    })

    -- [[ ESP ENEMY ]]
    NPCGroupBox:AddToggle('Enemy ESP', {
        Text = 'Enemy ESP',
        Default = false,
        Tooltip = 'shows Enemy esp', 
        Callback = function(Value)
            EnemyESPToggle = Value
        end}):AddColorPicker('Enemy ESP Color', {
        Default = Color3.fromRGB(255, 255, 255), 
        Title = 'Choose Enemy ESP Color', 
        Transparency = nil,
        Callback = function(Value)
            EnemyESPColor = Value
        end
    })

    NPCGroupBox:AddToggle('Show Health', {
        Text = 'Show Health',
        Default = false,
        Tooltip = 'show health fr', 
        Callback = function(Value)
            EnemyHealthESP = Value
        end
    })

    NPCGroupBox:AddToggle('Remove UID', {
        Text = 'Remove UID',
        Default = true,
        Tooltip = 'removes the httpservice:generateguid() from the name', 
        Callback = function(Value)
            RemoveUID = Value
        end
    })

    NPCGroupBox:AddSlider('Distance Slider', {
        Text = 'Enemy Distance',
        Default = 5000,
        Min = 0,
        Max = 10000,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            EnemyDist = Value
        end
    })

    -- [[ ESP NPC ]]
    NPCRealGroupBox:AddToggle('NPC ESP', {
        Text = 'NPC ESP',
        Default = false,
        Tooltip = 'shows NPC esp', 
        Callback = function(Value)
            NpcESPToggle = Value
        end}):AddColorPicker('NPC ESP Color', {
        Default = Color3.fromRGB(255, 255, 255), 
        Title = 'Choose NPC ESP Color', 
        Transparency = nil,
        Callback = function(Value)
            NpcESPColor = Value
        end
    })

    NPCRealGroupBox:AddSlider('Distance Slider', {
        Text = 'NPC Distance',
        Default = 5000,
        Min = 0,
        Max = 10000,
        Rounding = 0,
        Compact = false,

        Callback = function(Value)
            NpcDist = Value
        end
    })

    -- [[ MISC ]]
    MiscBox:AddToggle('Spoof Server', {
        Text = 'Spoof Server',
        Default = false,
        Tooltip = 'hides server info', 
        Callback = function(Value)
            SpoofServerName = Value
        end
    })

    -- connections

    local InfiniteJumpDebounce = false
    Connections.InfiniteJumpCheck = UserInputService.JumpRequest:Connect(function()
        if not InfiniteJumpDebounce and InfiniteJump then
            InfiniteJumpDebounce = true
            Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            task.wait()
            InfiniteJumpDebounce = false
        end
    end)

    local Tweens = {

    }

    LPH_NO_VIRTUALIZE(function()
        Connections.mainLoop = RunService.RenderStepped:Connect(function()
            pcall(function()
                if Player and Player.Character then
                    if WalkspeedToggle then
                        Player.Character.Humanoid.WalkSpeed = Walkspeed
                    end
                    if JumpPowerToggle then
                        Player.Character.Humanoid.UseJumpPower = true
                        Player.Character.Humanoid.JumpPower = JumpPower
                    end
                    if NoAnimations then
                        for _,v in pairs(Player.Character.Humanoid:GetPlayingAnimationTracks()) do
                            v:Stop()
                        end
                    end
                    if FastAnimations then
                        for i,v in pairs(Player.Character.Humanoid:GetPlayingAnimationTracks()) do
                            v:AdjustSpeed(9e9)
                        end
                    end
                    if AutoOrb then
                        local Orb = getClosestOrb()
                        if Orb then
                            firetouchinterest(Orb, Player.Character.HumanoidRootPart, 0)
                            firetouchinterest(Orb, Player.Character.HumanoidRootPart, 1)
                        end
                    end
                end
                if Player and Player.PlayerGui then
                    if SpoofServerName then
                        local ServerRegion = Player.PlayerGui:FindFirstChild("ServerRegion")
                        if ServerRegion then
                            ServerRegion.RegionLabel.Visible = false
                            ServerRegion.AgeLabel.Visible = false
                            ServerRegion.VersionLabel.Visible = false
                        end
                    else
                        local ServerRegion = Player.PlayerGui:FindFirstChild("ServerRegion")
                        if ServerRegion then
                            ServerRegion.RegionLabel.Visible = true
                            ServerRegion.AgeLabel.Visible = true
                            ServerRegion.VersionLabel.Visible = true
                        end
                    end
                end
                local PlayerUI = Player.PlayerGui 
                if PlayerUI then
                    if TreadMillAutoTrain then
                        if PlayerUI:FindFirstChildOfClass("BillboardGui") then
                            local Bill = PlayerUI:FindFirstChildOfClass("BillboardGui")
                            if Bill and Bill:FindFirstChild("Frame") then
                                local Frame = Bill:FindFirstChild("Frame")
                                if Frame and Frame:FindFirstChild("Gear") then
                                    local Gear = Frame:FindFirstChild("Gear")
                                    local Target = Frame:FindFirstChild("Target")
                                    Gear.Position = Target.Position
                                end
                            end
                        end
                    end
                    if AutoTrainBenchPress then
                        if PlayerUI:FindFirstChildOfClass("BillboardGui") then
                            local Bill = PlayerUI:FindFirstChildOfClass("BillboardGui")
                            if Bill and Bill:FindFirstChild("GameBar") then
                                local Bar = Bill:FindFirstChild("GameBar")
                                if Bar and Bar:FindFirstChild('Container'):FindFirstChild("Bar") then
                                    local Bar2 = Bar:FindFirstChild('Container'):FindFirstChild("Bar")
                                    local Marker = Bar:FindFirstChild('Container'):FindFirstChild("Marker")
                                    Bar2.Position = Marker.Position + UDim2.new(0,0,0.1,0)
                                end
                            end
                        end
                    end
                    if AutoTrainDummy then
                        if PlayerUI:FindFirstChildOfClass("BillboardGui") then
                            local Bill = PlayerUI:FindFirstChildOfClass("BillboardGui") 
                            if Bill and Bill:FindFirstChild("Frame") then
                                local Frame = Bill:FindFirstChild("Frame")
                                if Frame and Frame:FindFirstChild("Goal") then
                                    for i,v in pairs(Frame:GetChildren()) do
                                        if tostring(v) == "Tick" then
                                            v.Size = UDim2.new(100,0,100,0)
                                            --[[if v.Position.X.Scale - Frame.Goal.Position.X.Scale <= 0.15 then
                                                if isrbxactive and isrbxactive() == true then
                                                    
                                                end
                                            end]]
                                        end
                                    end
                                end
                            end
                        end
                    end
                    if AutoTrainReiatsu then
                        if PlayerUI:FindFirstChildOfClass("BillboardGui") then
                            local Bill = PlayerUI:FindFirstChildOfClass("BillboardGui") 
                            if Bill and Bill:FindFirstChild("Frame") then
                                for _,v in pairs(Bill.Frame:GetChildren()) do
                                    if v.Name:find("Blocker") then
                                        v.Size = UDim2.new(1,0,1,0)
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        end)
    end)()


    local IsWayPointCreated = false
    local blockedPathCon = nil
    local blockedId = nil

    LPH_NO_VIRTUALIZE(function()
        task.spawn(function()
            Connections.autofarmyuh = RunService.Stepped:Connect(function()
                local s,e = pcall(function()
                    if AutoFarm then -- AUTO FARM VERY IMPORTANT LOOL
                        if Player and Player.Character then
                            local closestHollow, Distance = getClosestHollow()
                            if closestHollow and closestHollow:FindFirstChild("HumanoidRootPart") then
                                DistanceFromEnemy = tonumber(Distance)
                                if Distance <= 15 then
                                    Player.Character.HumanoidRootPart.CFrame = CFrame.new(Player.Character.HumanoidRootPart.Position, closestHollow.HumanoidRootPart.Position)
                                end
                                if Distance >= 20 then
                                    local path = PathfindingService:CreatePath({
                                        AgentCanJump = true,
                                        AgentHeight = 4,
                                        AgentRadius = 5,
                                        WaypointSpacing = 8,
                                    })
                                    local succ,err = pcall(function()
                                        path:ComputeAsync(Player.Character.HumanoidRootPart.CFrame.Position, closestHollow.HumanoidRootPart.CFrame.Position)
                                    end)
                                    if not succ then print(err) end
                                    if succ and path.Status == Enum.PathStatus.Success then
                                        local points = path:GetWaypoints()
                                        for i,point in pairs(points) do
                                            local tween = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new((Player.Character.HumanoidRootPart.Position-point.Position).Magnitude / TweenSpeed, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {CFrame = CFrame.new(point.Position) + Vector3.new(0,2.5,0)})
                                            tween:Play()
                                            if closestHollow.Parent == nil or closestHollow.Parent ~= workspace.Live or closestHollow:FindFirstChildOfClass("Humanoid") == nil or (closestHollow and closestHollow:FindFirstChildOfClass("Humanoid") and closestHollow.Humanoid.Health==0) then
                                                tween:Cancel()
                                                break
                                            end
                                            tween.Completed:Wait()
                                        end
                                    end
                                elseif Distance < 20 then
                                    local TweenCloser = TweenService:Create(Player.Character.HumanoidRootPart, TweenInfo.new(Distance/TweenSpeed), {CFrame = CFrame.new(closestHollow.HumanoidRootPart.CFrame.Position) + Vector3.new(0, 4, 0)})
                                    if closestHollow.Parent == nil or closestHollow.Parent ~= workspace.Live or closestHollow:FindFirstChildOfClass("Humanoid") == nil or (closestHollow and closestHollow:FindFirstChildOfClass("Humanoid") and closestHollow.Humanoid.Health==0) then
                                        TweenCloser:Cancel()
                                    end
                                    TweenCloser:Play()
                                end
                            else
                                --print('no xd xd')
                            end
                        end
                    end
                end)
                if not s then print(e) end
            end)
        end)
    end)()

    LPH_NO_VIRTUALIZE(function()
        Connections.mainloopforpalyeresp = RunService.Stepped:Connect(function()
            for i,v in pairs(PlayerESP) do
                local succ, err = pcall(function()
                    if v.Model ~= nil and v.Drawing ~= nil then
                        if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                            local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                            --if not OnScreen then v.Drawing.Visible = false return end
                            if OnScreen and PlayerESPToggle then
                                local plr = Players:GetPlayerFromCharacter(v.Model)
                                local dist = math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)
                                if dist <= PlayerDist then
                                    if HealthESP and v.Model:FindFirstChildOfClass("Humanoid") then
                                        local healthString = tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").Health)) .. "/" .. tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").MaxHealth))
                                        if NameESPType == "Player Name" then
                                            v.Drawing.Text = v.Name .. " [" .. tostring(dist) .. "m]" .. " [" .. healthString .. "]"                         
                                        else
                                            v.Drawing.Text = plr.Stats.FirstName.Value .. " [" .. tostring(dist) .. "m]" .. " [" .. healthString .. "]"                         
                                        end
                                    else
                                        if NameESPType == "Player Name" then
                                            v.Drawing.Text = v.Name .. " [" .. tostring(dist) .. "m]"                         
                                        else
                                            v.Drawing.Text = plr.Stats.FirstName.Value .. " [" .. tostring(dist) .. "m]"                         
                                        end
                                    end
                                    if ClanESP then
                                        if plr.Stats and plr.Stats.Clan then
                                            if (plr.Stats.Clan.Value ~= "" or plr.Stats.Clan.Value ~= nil) then
                                                v.Drawing.Text = v.Drawing.Text .. " [" .. tostring(plr.Stats.Clan.Value) .. "]"
                                            end
                                        end
                                    end
                                    v.Drawing.Color = PlayerESPColor
                                    v.Drawing.Visible = true
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                        end
                    else
                        v.Drawing.Visible = false
                        v.Drawing:Remove()
                        table.remove(PlayerESP, i)
                    end
                end)
                if not succ then
                    if v.Drawing then
                        v.Drawing.Visible = false
                    end
                    if v.Model == nil then
                        v.Drawing.Visible = false
                        v.Drawing:Remove()
                        table.remove(PlayerESP, i)
                    end
                end
            end
        end)
    end)()

    LPH_NO_VIRTUALIZE(function()
        Connections.mainloopforenemy = RunService.Stepped:Connect(function()
            for i,v in pairs(EnemyESP) do
                local succ,err = pcall(function()
                    if v.Model ~= nil and v.Drawing ~= nil then
                        if v.Model:FindFirstChildOfClass("Humanoid") then
                            if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                                if OnScreen and EnemyESPToggle and v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                                    local dist = math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)
                                    local newName = v.Name
                                    if RemoveUID then
                                        newName = string.split(v.Name, "_")[1]
                                    end
                                    if dist <= EnemyDist then
                                        if EnemyHealthESP and v.Model:FindFirstChildOfClass("Humanoid") then
                                            local healthString = tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").Health)) .. "/" .. tostring(math.floor(v.Model:FindFirstChildOfClass("Humanoid").MaxHealth))
                                            v.Drawing.Text = newName .. " [" .. tostring(dist) .. "m]" .. " [" .. healthString .. "]"                         
                                        else
                                            v.Drawing.Text = newName .. " [" .. tostring(dist) .. "m]"                         
                                        end
                                        v.Drawing.Color = EnemyESPColor
                                        v.Drawing.Visible = true
                                        v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                    else
                                        v.Drawing.Visible = false
                                    end
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                        end
                    else
                        v.Drawing.Visible = false
                        v.Drawing:Remove()
                        table.remove(EnemyESP, i)
                    end
                end)
                if not succ then
                    if v.Drawing then
                        v.Drawing.Visible = false
                    end
                    if v.Model == nil then
                        v.Drawing.Visible = false
                        v.Drawing:Remove()
                        table.remove(EnemyESP, i)
                    end
                end
            end
        end)
    end)()

    LPH_NO_VIRTUALIZE(function()
        Connections.mainloopfornpc = RunService.Stepped:Connect(function()
            for i,v in pairs(NPCESP) do
                local succ,err = pcall(function()
                    if v.Model ~= nil and v.Drawing ~= nil then
                        if v.Model and v.Model:FindFirstChild("HumanoidRootPart") then
                            local ScreenPos, OnScreen = workspace.CurrentCamera:WorldToScreenPoint(v.Model:FindFirstChild("HumanoidRootPart").Position+Vector3.new(0,3,0))
                            if OnScreen and NpcESPToggle then
                                local dist = math.floor((Player.Character.HumanoidRootPart.Position-v.Model.PrimaryPart.Position).Magnitude)
                                if dist <= NpcDist then
                                    v.Drawing.Text = v.Name .. " [" .. tostring(dist) .. "m]"                         
                                    v.Drawing.Color = NpcESPColor
                                    v.Drawing.Visible = true
                                    v.Drawing.Position = Vector2.new(ScreenPos.X,ScreenPos.Y)
                                else
                                    v.Drawing.Visible = false
                                end
                            else
                                v.Drawing.Visible = false
                            end
                        else
                            v.Drawing.Visible = false
                        end
                    else
                        v.Drawing.Visible = false
                        v.Drawing:Remove()
                        table.remove(NPCESP, i)
                    end
                end)
                if not succ then
                    if v.Drawing then
                        v.Drawing.Visible = false
                    end
                    if v.Model == nil then
                        v.Drawing.Visible = false
                        v.Drawing:Remove()
                        table.remove(NPCESP, i)
                    end
                    print(err)
                end
            end
        end)
    end)()


    -- [[ CONNECTORS ]]

    
    task.spawn(function()
        for i,v in pairs(Players:GetPlayers()) do
            if v ~= Player then
                if v.Character and v.Character:IsA("Model") then
                    AddModelToESPLibrary(v.Character, PlayerESP, PlayerESPColor)
                end
                Connections[v] = v.CharacterAdded:Connect(function(char)
                    if char:IsA("Model") then
                        for i,v in pairs(PlayerESP) do
                            if v.Model and v.Model == char then
                                return
                            end
                        end
                        AddModelToESPLibrary(char, PlayerESP, PlayerESPColor)
                    end
                end)
            end
        end
        Connections.PlayerAdded = Players.PlayerAdded:Connect(function(p)
            p.CharacterAdded:Connect(function(char)
                if char:IsA("Model") then
                    for i,v in pairs(PlayerESP) do
                        if v.Model and v.Model == char then
                            return
                        end
                    end
                    AddModelToESPLibrary(char, PlayerESP, PlayerESPColor)
                end
            end)
        end)
        Connections.PlayerRemoved = Players.PlayerRemoving:Connect(function(p)
            for i,v in pairs(PlayerESP) do
                if tostring(v.Name) == tostring(p) then
                    if v.Drawing then
                        v.Drawing.Visible = false
                        v.Drawing:Remove()
                    end
                    PlayerESP[i] = nil
                    table.remove(PlayerESP, i)
                end
            end
        end)
    end)
    
    task.spawn(function()
        local LiveFolder = workspace:WaitForChild("Live", 100)
        if LiveFolder then
            for _,v in pairs(LiveFolder:GetChildren()) do
                if v:IsA("Model") and not Players:FindFirstChild(tostring(v)) then
                    AddModelToESPLibrary(v, EnemyESP, EnemyESPColor)
                end
            end
            Connections.LiveFolderAdded = LiveFolder.ChildAdded:Connect(function(child)
                if child:IsA("Model") and not Players:FindFirstChild(tostring(child)) then
                    for i,v in pairs(EnemyESP) do
                        if v.Model and v.Model == child then
                            return
                        end
                    end
                    AddModelToESPLibrary(child, EnemyESP, EnemyESPColor)
                end
            end)
            Connections.LiveFolderRemoved = LiveFolder.ChildRemoved:Connect(function(child)
                if child:IsA("Model") then
                    for i,v in pairs(EnemyESP) do
                        if tostring(v.Name) == tostring(child) then
                            if v.Drawing then
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                            end
                            EnemyESP[i] = nil
                            table.remove(EnemyESP, i)
                        end
                    end
                end
            end)
        end
    end)

    
    task.spawn(function()
        local NPCFolder = workspace:WaitForChild("NPCs", 100)
        if NPCFolder then
            for _,v in pairs(NPCFolder:GetChildren()) do
                if v:IsA("Model") and not Players:FindFirstChild(tostring(v)) then
                    AddModelToESPLibrary(v, NPCESP, NpcESPColor)
                end
            end
            Connections.NPCFolderAdded = NPCFolder.ChildAdded:Connect(function(child)
                if child:IsA("Model") and not Players:FindFirstChild(tostring(child)) then
                    for i,v in pairs(NPCESP) do
                        if v.Model and v.Model == child then
                            print(v,"has already3")
                            return
                        end
                    end
                    AddModelToESPLibrary(child, NPCESP, NpcESPColor)
                end
            end)
            Connections.NPCFolderRemoved = NPCFolder.ChildRemoved:Connect(function(child)
                if child:IsA("Model") then
                    for i,v in pairs(NPCESP) do
                        if tostring(v.Name) == tostring(child) then
                            if v.Drawing then
                                v.Drawing.Visible = false
                                v.Drawing:Remove()
                            end
                            NPCESP[i] = nil
                            table.remove(NPCESP, i)
                        end
                    end
                end
            end)
        end
    end)
    
    task.spawn(function()
        if Player.Character then
            for _,v in pairs(getconnections(ScriptContext.Error)) do
                v:Disable()
            end
        end
        Player.CharacterAdded:Connect(function()
            for _,v in pairs(getconnections(ScriptContext.Error)) do
                v:Disable()
            end
        end)
    end)

    -- end
    Library.KeybindFrame.Visible = false; -- todo: add a function for this

    Library:OnUnload(function()
        pcall(function()
            for i,v in pairs(Connections) do v:Disconnect() end
            for i,v in pairs(PlayerESP) do
                v.Drawing.Visible = false
                v.Drawing:Remove()
            end
            for i,v in pairs(NPCESP) do
                v.Drawing.Visible = false
                v.Drawing:Remove()
            end
            for i,v in pairs(EnemyESP) do
                v.Drawing.Visible = false
                v.Drawing:Remove()
            end
        end)
        Library.Unloaded = true
    end)

    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

    Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('Exceros Hub')
    SaveManager:SetFolder('Exceros Hub/Peroxide')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()

    Library:Notify("Loaded Peroxide!")
    IsLoadedHub = true
end

end)
if not s then
    warn("EXCEROS HUB ERROR:",e)
end
